
Ejercicio_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006318  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08006428  08006428  00007428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d8  080067d8  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  080067d8  080067d8  000077d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e0  080067e0  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e0  080067e0  000077e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067e4  080067e4  000077e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080067e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001d4  080069bc  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080069bc  000083d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c701  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002138  00000000  00000000  000148fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00016a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0e  00000000  00000000  00017730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c21  00000000  00000000  0001813e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f75d  00000000  00000000  00030d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0b6  00000000  00000000  000404bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc572  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  000cc5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d0b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006410 	.word	0x08006410

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006410 	.word	0x08006410

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <MX_GPIO_Init+0x58>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a13      	ldr	r2, [pc, #76]	@ (8000ae0 <MX_GPIO_Init+0x58>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_GPIO_Init+0x58>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_GPIO_Init+0x58>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <MX_GPIO_Init+0x58>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_GPIO_Init+0x58>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_GPIO_Init+0x58>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a07      	ldr	r2, [pc, #28]	@ (8000ae0 <MX_GPIO_Init+0x58>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <MX_GPIO_Init+0x58>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// funcion para habilitar "printf"
int __io_putchar(int ch)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 100);
 8000aec:	1d39      	adds	r1, r7, #4
 8000aee:	2364      	movs	r3, #100	@ 0x64
 8000af0:	2201      	movs	r2, #1
 8000af2:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <__io_putchar+0x20>)
 8000af4:	f002 f9c5 	bl	8002e82 <HAL_UART_Transmit>
	return ch;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000240 	.word	0x20000240

08000b08 <map>:

//La función map sirve para convertir números de un rango a otro
uint16_t map( uint16_t x, uint16_t min_int, uint16_t max_int, uint16_t min_out, uint16_t max_out )
{
 8000b08:	b490      	push	{r4, r7}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4608      	mov	r0, r1
 8000b12:	4611      	mov	r1, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4623      	mov	r3, r4
 8000b18:	80fb      	strh	r3, [r7, #6]
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80bb      	strh	r3, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	807b      	strh	r3, [r7, #2]
 8000b22:	4613      	mov	r3, r2
 8000b24:	803b      	strh	r3, [r7, #0]
	uint16_t resultado;
	resultado = (x - min_int) * (max_out - min_out) / (max_int - min_int) + min_out;
 8000b26:	88fa      	ldrh	r2, [r7, #6]
 8000b28:	88bb      	ldrh	r3, [r7, #4]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	8b39      	ldrh	r1, [r7, #24]
 8000b2e:	883a      	ldrh	r2, [r7, #0]
 8000b30:	1a8a      	subs	r2, r1, r2
 8000b32:	fb03 f202 	mul.w	r2, r3, r2
 8000b36:	8879      	ldrh	r1, [r7, #2]
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	1acb      	subs	r3, r1, r3
 8000b3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	883b      	ldrh	r3, [r7, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	81fb      	strh	r3, [r7, #14]
    return resultado;
 8000b48:	89fb      	ldrh	r3, [r7, #14]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc90      	pop	{r4, r7}
 8000b52:	4770      	bx	lr

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b58:	f000 fb66 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5c:	f000 f828 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b60:	f7ff ff92 	bl	8000a88 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b64:	f000 fabc 	bl	80010e0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000b68:	f000 f9c8 	bl	8000efc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480a      	ldr	r0, [pc, #40]	@ (8000b98 <main+0x44>)
 8000b70:	f001 fbb8 	bl	80022e4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &rx_dato, 3);
 8000b74:	2203      	movs	r2, #3
 8000b76:	4909      	ldr	r1, [pc, #36]	@ (8000b9c <main+0x48>)
 8000b78:	4809      	ldr	r0, [pc, #36]	@ (8000ba0 <main+0x4c>)
 8000b7a:	f002 fa05 	bl	8002f88 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM1->CCR1 = datoRX_convercion_duty_cycle;//ciclo de trabajo del motor dc que va de 0 a 1000
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <main+0x50>)
 8000b80:	881a      	ldrh	r2, [r3, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <main+0x54>)
 8000b84:	635a      	str	r2, [r3, #52]	@ 0x34
	  printf("Duty Cycle: %d\n\r", rx_dato);
 8000b86:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <main+0x48>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	@ (8000bac <main+0x58>)
 8000b8e:	f003 fcbf 	bl	8004510 <iprintf>
	  TIM1->CCR1 = datoRX_convercion_duty_cycle;//ciclo de trabajo del motor dc que va de 0 a 1000
 8000b92:	bf00      	nop
 8000b94:	e7f3      	b.n	8000b7e <main+0x2a>
 8000b96:	bf00      	nop
 8000b98:	200001f8 	.word	0x200001f8
 8000b9c:	200001f0 	.word	0x200001f0
 8000ba0:	20000240 	.word	0x20000240
 8000ba4:	200001f2 	.word	0x200001f2
 8000ba8:	40012c00 	.word	0x40012c00
 8000bac:	08006428 	.word	0x08006428

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b090      	sub	sp, #64	@ 0x40
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	2228      	movs	r2, #40	@ 0x28
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fcfb 	bl	80045ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be4:	2302      	movs	r3, #2
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 febb 	bl	8001974 <HAL_RCC_OscConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c04:	f000 f844 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c08:	230f      	movs	r3, #15
 8000c0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000c1a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000c1e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2102      	movs	r1, #2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 f927 	bl	8001e78 <HAL_RCC_ClockConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c30:	f000 f82e 	bl	8000c90 <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3740      	adds	r7, #64	@ 0x40
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <HAL_UART_RxCpltCallback+0x44>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d113      	bne.n	8000c76 <HAL_UART_RxCpltCallback+0x3a>
	{
		//convertimos el dato obtenido del RX a duty cycle
		datoRX_convercion_duty_cycle = map(rx_dato, 0, 100, 0, 1000);
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <HAL_UART_RxCpltCallback+0x48>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2264      	movs	r2, #100	@ 0x64
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f7ff ff52 	bl	8000b08 <map>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <HAL_UART_RxCpltCallback+0x4c>)
 8000c6a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &rx_dato, 3);
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	4905      	ldr	r1, [pc, #20]	@ (8000c84 <HAL_UART_RxCpltCallback+0x48>)
 8000c70:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <HAL_UART_RxCpltCallback+0x50>)
 8000c72:	f002 f989 	bl	8002f88 <HAL_UART_Receive_IT>
	}
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40004800 	.word	0x40004800
 8000c84:	200001f0 	.word	0x200001f0
 8000c88:	200001f2 	.word	0x200001f2
 8000c8c:	20000240 	.word	0x20000240

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <HAL_MspInit+0x60>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_MspInit+0x60>)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <NMI_Handler+0x4>

08000d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <MemManage_Handler+0x4>

08000d18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 fab0 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <USART3_IRQHandler+0x10>)
 8000d5e:	f002 f939 	bl	8002fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000240 	.word	0x20000240

08000d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return 1;
 8000d70:	2301      	movs	r3, #1
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <_kill>:

int _kill(int pid, int sig)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d84:	f003 fc6c 	bl	8004660 <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2216      	movs	r2, #22
 8000d8c:	601a      	str	r2, [r3, #0]
  return -1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_exit>:

void _exit (int status)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000da2:	f04f 31ff 	mov.w	r1, #4294967295
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffe7 	bl	8000d7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <_exit+0x12>

08000db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
  }

  return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fe6d 	bl	8000ae4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
  }
  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e48:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <_isatty>:

int _isatty(int file)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
	...

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f003 fbd4 	bl	8004660 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20005000 	.word	0x20005000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	200001f4 	.word	0x200001f4
 8000eec:	200003d8 	.word	0x200003d8

08000ef0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b096      	sub	sp, #88	@ 0x58
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	615a      	str	r2, [r3, #20]
 8000f2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2220      	movs	r2, #32
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fb40 	bl	80045ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f3c:	4a3e      	ldr	r2, [pc, #248]	@ (8001038 <MX_TIM1_Init+0x13c>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000f40:	4b3c      	ldr	r3, [pc, #240]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f42:	22b3      	movs	r2, #179	@ 0xb3
 8000f44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000f4c:	4b39      	ldr	r3, [pc, #228]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5a:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f60:	4b34      	ldr	r3, [pc, #208]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f62:	2280      	movs	r2, #128	@ 0x80
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f66:	4833      	ldr	r0, [pc, #204]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f68:	f001 f914 	bl	8002194 <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f72:	f7ff fe8d 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f7c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f80:	4619      	mov	r1, r3
 8000f82:	482c      	ldr	r0, [pc, #176]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f84:	f001 fb12 	bl	80025ac <HAL_TIM_ConfigClockSource>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f8e:	f7ff fe7f 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f92:	4828      	ldr	r0, [pc, #160]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000f94:	f001 f94d 	bl	8002232 <HAL_TIM_PWM_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f9e:	f7ff fe77 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000faa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4820      	ldr	r0, [pc, #128]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000fb2:	f001 fe67 	bl	8002c84 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fbc:	f7ff fe68 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc0:	2360      	movs	r3, #96	@ 0x60
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4813      	ldr	r0, [pc, #76]	@ (8001034 <MX_TIM1_Init+0x138>)
 8000fe6:	f001 fa1f 	bl	8002428 <HAL_TIM_PWM_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ff0:	f7ff fe4e 	bl	8000c90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001008:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800100c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4807      	ldr	r0, [pc, #28]	@ (8001034 <MX_TIM1_Init+0x138>)
 8001018:	f001 fe92 	bl	8002d40 <HAL_TIMEx_ConfigBreakDeadTime>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001022:	f7ff fe35 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001026:	4803      	ldr	r0, [pc, #12]	@ (8001034 <MX_TIM1_Init+0x138>)
 8001028:	f000 f826 	bl	8001078 <HAL_TIM_MspPostInit>

}
 800102c:	bf00      	nop
 800102e:	3758      	adds	r7, #88	@ 0x58
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001f8 	.word	0x200001f8
 8001038:	40012c00 	.word	0x40012c00

0800103c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <HAL_TIM_Base_MspInit+0x34>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d10b      	bne.n	8001066 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_TIM_Base_MspInit+0x38>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_TIM_Base_MspInit+0x38>)
 8001054:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_TIM_Base_MspInit+0x38>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40012c00 	.word	0x40012c00
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <HAL_TIM_MspPostInit+0x5c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d118      	bne.n	80010ca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_TIM_MspPostInit+0x60>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_TIM_MspPostInit+0x60>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_TIM_MspPostInit+0x60>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <HAL_TIM_MspPostInit+0x64>)
 80010c6:	f000 fad1 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40012c00 	.word	0x40012c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010800 	.word	0x40010800

080010e0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_USART3_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <MX_USART3_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <MX_USART3_UART_Init+0x4c>)
 80010ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_USART3_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_USART3_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_USART3_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_USART3_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_USART3_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_USART3_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_USART3_UART_Init+0x4c>)
 8001118:	f001 fe63 	bl	8002de2 <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001122:	f7ff fdb5 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000240 	.word	0x20000240
 8001130:	40004800 	.word	0x40004800

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a20      	ldr	r2, [pc, #128]	@ (80011d0 <HAL_UART_MspInit+0x9c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d139      	bne.n	80011c8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <HAL_UART_MspInit+0xa0>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	4a1e      	ldr	r2, [pc, #120]	@ (80011d4 <HAL_UART_MspInit+0xa0>)
 800115a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800115e:	61d3      	str	r3, [r2, #28]
 8001160:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <HAL_UART_MspInit+0xa0>)
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_UART_MspInit+0xa0>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <HAL_UART_MspInit+0xa0>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <HAL_UART_MspInit+0xa0>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <HAL_UART_MspInit+0xa4>)
 800119a:	f000 fa67 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800119e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4619      	mov	r1, r3
 80011b2:	4809      	ldr	r0, [pc, #36]	@ (80011d8 <HAL_UART_MspInit+0xa4>)
 80011b4:	f000 fa5a 	bl	800166c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2027      	movs	r0, #39	@ 0x27
 80011be:	f000 f96c 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011c2:	2027      	movs	r0, #39	@ 0x27
 80011c4:	f000 f985 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011c8:	bf00      	nop
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40004800 	.word	0x40004800
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010c00 	.word	0x40010c00

080011dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011dc:	f7ff fe88 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011e2:	490c      	ldr	r1, [pc, #48]	@ (8001214 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001218 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a09      	ldr	r2, [pc, #36]	@ (800121c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011f8:	4c09      	ldr	r4, [pc, #36]	@ (8001220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001206:	f003 fa31 	bl	800466c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800120a:	f7ff fca3 	bl	8000b54 <main>
  bx lr
 800120e:	4770      	bx	lr
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001218:	080067e8 	.word	0x080067e8
  ldr r2, =_sbss
 800121c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001220:	200003d8 	.word	0x200003d8

08001224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_2_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <HAL_Init+0x28>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	@ (8001250 <HAL_Init+0x28>)
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f923 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	200f      	movs	r0, #15
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fd2a 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40022000 	.word	0x40022000

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f93b 	bl	80014ee <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f903 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	@ (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_IncTick+0x1c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_IncTick+0x20>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a03      	ldr	r2, [pc, #12]	@ (80012d4 <HAL_IncTick+0x20>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	20000008 	.word	0x20000008
 80012d4:	20000288 	.word	0x20000288

080012d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b02      	ldr	r3, [pc, #8]	@ (80012e8 <HAL_GetTick+0x10>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000288 	.word	0x20000288

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4906      	ldr	r1, [pc, #24]	@ (8001384 <__NVIC_EnableIRQ+0x34>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	@ (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	@ (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	@ 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff90 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff2d 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff42 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff90 	bl	80013dc <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5f 	bl	8001388 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff35 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d008      	beq.n	8001530 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2204      	movs	r2, #4
 8001522:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e020      	b.n	8001572 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 020e 	bic.w	r2, r2, #14
 800153e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f202 	lsl.w	r2, r1, r2
 800155e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d005      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2204      	movs	r2, #4
 8001598:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e051      	b.n	8001644 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 020e 	bic.w	r2, r2, #14
 80015ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a22      	ldr	r2, [pc, #136]	@ (8001650 <HAL_DMA_Abort_IT+0xd4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d029      	beq.n	800161e <HAL_DMA_Abort_IT+0xa2>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <HAL_DMA_Abort_IT+0xd8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <HAL_DMA_Abort_IT+0x9e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001658 <HAL_DMA_Abort_IT+0xdc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d01a      	beq.n	8001614 <HAL_DMA_Abort_IT+0x98>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1e      	ldr	r2, [pc, #120]	@ (800165c <HAL_DMA_Abort_IT+0xe0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d012      	beq.n	800160e <HAL_DMA_Abort_IT+0x92>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <HAL_DMA_Abort_IT+0xe4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00a      	beq.n	8001608 <HAL_DMA_Abort_IT+0x8c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001664 <HAL_DMA_Abort_IT+0xe8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d102      	bne.n	8001602 <HAL_DMA_Abort_IT+0x86>
 80015fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001600:	e00e      	b.n	8001620 <HAL_DMA_Abort_IT+0xa4>
 8001602:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001606:	e00b      	b.n	8001620 <HAL_DMA_Abort_IT+0xa4>
 8001608:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800160c:	e008      	b.n	8001620 <HAL_DMA_Abort_IT+0xa4>
 800160e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001612:	e005      	b.n	8001620 <HAL_DMA_Abort_IT+0xa4>
 8001614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001618:	e002      	b.n	8001620 <HAL_DMA_Abort_IT+0xa4>
 800161a:	2310      	movs	r3, #16
 800161c:	e000      	b.n	8001620 <HAL_DMA_Abort_IT+0xa4>
 800161e:	2301      	movs	r3, #1
 8001620:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <HAL_DMA_Abort_IT+0xec>)
 8001622:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	4798      	blx	r3
    } 
  }
  return status;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40020008 	.word	0x40020008
 8001654:	4002001c 	.word	0x4002001c
 8001658:	40020030 	.word	0x40020030
 800165c:	40020044 	.word	0x40020044
 8001660:	40020058 	.word	0x40020058
 8001664:	4002006c 	.word	0x4002006c
 8001668:	40020000 	.word	0x40020000

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b08b      	sub	sp, #44	@ 0x2c
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	e169      	b.n	8001954 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001680:	2201      	movs	r2, #1
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8158 	bne.w	800194e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a9a      	ldr	r2, [pc, #616]	@ (800190c <HAL_GPIO_Init+0x2a0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d05e      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016a8:	4a98      	ldr	r2, [pc, #608]	@ (800190c <HAL_GPIO_Init+0x2a0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d875      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ae:	4a98      	ldr	r2, [pc, #608]	@ (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d058      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016b4:	4a96      	ldr	r2, [pc, #600]	@ (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d86f      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ba:	4a96      	ldr	r2, [pc, #600]	@ (8001914 <HAL_GPIO_Init+0x2a8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d052      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016c0:	4a94      	ldr	r2, [pc, #592]	@ (8001914 <HAL_GPIO_Init+0x2a8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d869      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016c6:	4a94      	ldr	r2, [pc, #592]	@ (8001918 <HAL_GPIO_Init+0x2ac>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04c      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016cc:	4a92      	ldr	r2, [pc, #584]	@ (8001918 <HAL_GPIO_Init+0x2ac>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d863      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016d2:	4a92      	ldr	r2, [pc, #584]	@ (800191c <HAL_GPIO_Init+0x2b0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d046      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016d8:	4a90      	ldr	r2, [pc, #576]	@ (800191c <HAL_GPIO_Init+0x2b0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d85d      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d82a      	bhi.n	8001738 <HAL_GPIO_Init+0xcc>
 80016e2:	2b12      	cmp	r3, #18
 80016e4:	d859      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016e6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <HAL_GPIO_Init+0x80>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	08001767 	.word	0x08001767
 80016f0:	08001741 	.word	0x08001741
 80016f4:	08001753 	.word	0x08001753
 80016f8:	08001795 	.word	0x08001795
 80016fc:	0800179b 	.word	0x0800179b
 8001700:	0800179b 	.word	0x0800179b
 8001704:	0800179b 	.word	0x0800179b
 8001708:	0800179b 	.word	0x0800179b
 800170c:	0800179b 	.word	0x0800179b
 8001710:	0800179b 	.word	0x0800179b
 8001714:	0800179b 	.word	0x0800179b
 8001718:	0800179b 	.word	0x0800179b
 800171c:	0800179b 	.word	0x0800179b
 8001720:	0800179b 	.word	0x0800179b
 8001724:	0800179b 	.word	0x0800179b
 8001728:	0800179b 	.word	0x0800179b
 800172c:	0800179b 	.word	0x0800179b
 8001730:	08001749 	.word	0x08001749
 8001734:	0800175d 	.word	0x0800175d
 8001738:	4a79      	ldr	r2, [pc, #484]	@ (8001920 <HAL_GPIO_Init+0x2b4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173e:	e02c      	b.n	800179a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e029      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	3304      	adds	r3, #4
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	e024      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	3308      	adds	r3, #8
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e01f      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	330c      	adds	r3, #12
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e01a      	b.n	800179c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800176e:	2304      	movs	r3, #4
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e013      	b.n	800179c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	611a      	str	r2, [r3, #16]
          break;
 8001786:	e009      	b.n	800179c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	615a      	str	r2, [r3, #20]
          break;
 8001792:	e003      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
          break;
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x130>
          break;
 800179a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2bff      	cmp	r3, #255	@ 0xff
 80017a0:	d801      	bhi.n	80017a6 <HAL_GPIO_Init+0x13a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	e001      	b.n	80017aa <HAL_GPIO_Init+0x13e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3304      	adds	r3, #4
 80017aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	@ 0xff
 80017b0:	d802      	bhi.n	80017b8 <HAL_GPIO_Init+0x14c>
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x152>
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	3b08      	subs	r3, #8
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	210f      	movs	r1, #15
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80b1 	beq.w	800194e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001924 <HAL_GPIO_Init+0x2b8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001924 <HAL_GPIO_Init+0x2b8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001924 <HAL_GPIO_Init+0x2b8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001804:	4a48      	ldr	r2, [pc, #288]	@ (8001928 <HAL_GPIO_Init+0x2bc>)
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a40      	ldr	r2, [pc, #256]	@ (800192c <HAL_GPIO_Init+0x2c0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_GPIO_Init+0x1ec>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3f      	ldr	r2, [pc, #252]	@ (8001930 <HAL_GPIO_Init+0x2c4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00d      	beq.n	8001854 <HAL_GPIO_Init+0x1e8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3e      	ldr	r2, [pc, #248]	@ (8001934 <HAL_GPIO_Init+0x2c8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x1e4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3d      	ldr	r2, [pc, #244]	@ (8001938 <HAL_GPIO_Init+0x2cc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_GPIO_Init+0x1e0>
 8001848:	2303      	movs	r3, #3
 800184a:	e006      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 800184c:	2304      	movs	r3, #4
 800184e:	e004      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001850:	2302      	movs	r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001858:	2300      	movs	r3, #0
 800185a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186a:	492f      	ldr	r1, [pc, #188]	@ (8001928 <HAL_GPIO_Init+0x2bc>)
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	492c      	ldr	r1, [pc, #176]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001892:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4928      	ldr	r1, [pc, #160]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 800189c:	4013      	ands	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ac:	4b23      	ldr	r3, [pc, #140]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4922      	ldr	r1, [pc, #136]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ba:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	491e      	ldr	r1, [pc, #120]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4918      	ldr	r1, [pc, #96]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4914      	ldr	r1, [pc, #80]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d021      	beq.n	8001940 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	490e      	ldr	r1, [pc, #56]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e021      	b.n	800194e <HAL_GPIO_Init+0x2e2>
 800190a:	bf00      	nop
 800190c:	10320000 	.word	0x10320000
 8001910:	10310000 	.word	0x10310000
 8001914:	10220000 	.word	0x10220000
 8001918:	10210000 	.word	0x10210000
 800191c:	10120000 	.word	0x10120000
 8001920:	10110000 	.word	0x10110000
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40011000 	.word	0x40011000
 8001938:	40011400 	.word	0x40011400
 800193c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_GPIO_Init+0x304>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	43db      	mvns	r3, r3
 8001948:	4909      	ldr	r1, [pc, #36]	@ (8001970 <HAL_GPIO_Init+0x304>)
 800194a:	4013      	ands	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f ae8e 	bne.w	8001680 <HAL_GPIO_Init+0x14>
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	372c      	adds	r7, #44	@ 0x2c
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e272      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8087 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001994:	4b92      	ldr	r3, [pc, #584]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b04      	cmp	r3, #4
 800199e:	d00c      	beq.n	80019ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a0:	4b8f      	ldr	r3, [pc, #572]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d112      	bne.n	80019d2 <HAL_RCC_OscConfig+0x5e>
 80019ac:	4b8c      	ldr	r3, [pc, #560]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b8:	d10b      	bne.n	80019d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ba:	4b89      	ldr	r3, [pc, #548]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d06c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x12c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d168      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e24c      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x76>
 80019dc:	4b80      	ldr	r3, [pc, #512]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a7f      	ldr	r2, [pc, #508]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e02e      	b.n	8001a48 <HAL_RCC_OscConfig+0xd4>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x98>
 80019f2:	4b7b      	ldr	r3, [pc, #492]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7a      	ldr	r2, [pc, #488]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b78      	ldr	r3, [pc, #480]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a77      	ldr	r2, [pc, #476]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e01d      	b.n	8001a48 <HAL_RCC_OscConfig+0xd4>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0xbc>
 8001a16:	4b72      	ldr	r3, [pc, #456]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a71      	ldr	r2, [pc, #452]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b6f      	ldr	r3, [pc, #444]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a6e      	ldr	r2, [pc, #440]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0xd4>
 8001a30:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6a      	ldr	r2, [pc, #424]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b68      	ldr	r3, [pc, #416]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a67      	ldr	r2, [pc, #412]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fc42 	bl	80012d8 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fc3e 	bl	80012d8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	@ 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e200      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0xe4>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fc2e 	bl	80012d8 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fc2a 	bl	80012d8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	@ 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1ec      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	4b53      	ldr	r3, [pc, #332]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x10c>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d063      	beq.n	8001b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aae:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aba:	4b49      	ldr	r3, [pc, #292]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d11c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x18c>
 8001ac6:	4b46      	ldr	r3, [pc, #280]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d116      	bne.n	8001b00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x176>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e1c0      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b3d      	ldr	r3, [pc, #244]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4939      	ldr	r1, [pc, #228]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	e03a      	b.n	8001b76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d020      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b08:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fbe3 	bl	80012d8 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff fbdf 	bl	80012d8 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e1a1      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	4b2d      	ldr	r3, [pc, #180]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4927      	ldr	r1, [pc, #156]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
 8001b48:	e015      	b.n	8001b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fbc2 	bl	80012d8 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff fbbe 	bl	80012d8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e180      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d03a      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d019      	beq.n	8001bbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7ff fba2 	bl	80012d8 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7ff fb9e 	bl	80012d8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e160      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f000 face 	bl	8002158 <RCC_Delay>
 8001bbc:	e01c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fb88 	bl	80012d8 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bca:	e00f      	b.n	8001bec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fb84 	bl	80012d8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d908      	bls.n	8001bec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e146      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	42420000 	.word	0x42420000
 8001be8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	4b92      	ldr	r3, [pc, #584]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e9      	bne.n	8001bcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a6 	beq.w	8001d52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b88      	ldr	r3, [pc, #544]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4a87      	ldr	r2, [pc, #540]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	61d3      	str	r3, [r2, #28]
 8001c22:	4b85      	ldr	r3, [pc, #532]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c32:	4b82      	ldr	r3, [pc, #520]	@ (8001e3c <HAL_RCC_OscConfig+0x4c8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e3c <HAL_RCC_OscConfig+0x4c8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7e      	ldr	r2, [pc, #504]	@ (8001e3c <HAL_RCC_OscConfig+0x4c8>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fb45 	bl	80012d8 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff fb41 	bl	80012d8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b64      	cmp	r3, #100	@ 0x64
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e103      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b75      	ldr	r3, [pc, #468]	@ (8001e3c <HAL_RCC_OscConfig+0x4c8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x312>
 8001c78:	4b6f      	ldr	r3, [pc, #444]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	e02d      	b.n	8001ce2 <HAL_RCC_OscConfig+0x36e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x334>
 8001c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a69      	ldr	r2, [pc, #420]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	4b67      	ldr	r3, [pc, #412]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a66      	ldr	r2, [pc, #408]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	e01c      	b.n	8001ce2 <HAL_RCC_OscConfig+0x36e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0x356>
 8001cb0:	4b61      	ldr	r3, [pc, #388]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a60      	ldr	r2, [pc, #384]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a5d      	ldr	r2, [pc, #372]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x36e>
 8001cca:	4b5b      	ldr	r3, [pc, #364]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a5a      	ldr	r2, [pc, #360]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	4b58      	ldr	r3, [pc, #352]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a57      	ldr	r2, [pc, #348]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d015      	beq.n	8001d16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7ff faf5 	bl	80012d8 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7ff faf1 	bl	80012d8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0b1      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	4b4b      	ldr	r3, [pc, #300]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ee      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x37e>
 8001d14:	e014      	b.n	8001d40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fadf 	bl	80012d8 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fadb 	bl	80012d8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e09b      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d34:	4b40      	ldr	r3, [pc, #256]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d105      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d46:	4b3c      	ldr	r3, [pc, #240]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8087 	beq.w	8001e6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5c:	4b36      	ldr	r3, [pc, #216]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d061      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d146      	bne.n	8001dfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d70:	4b33      	ldr	r3, [pc, #204]	@ (8001e40 <HAL_RCC_OscConfig+0x4cc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff faaf 	bl	80012d8 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff faab 	bl	80012d8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e06d      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da4:	d108      	bne.n	8001db8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001da6:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4921      	ldr	r1, [pc, #132]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a19      	ldr	r1, [r3, #32]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	491b      	ldr	r1, [pc, #108]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fa7f 	bl	80012d8 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dde:	f7ff fa7b 	bl	80012d8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e03d      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x46a>
 8001dfc:	e035      	b.n	8001e6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <HAL_RCC_OscConfig+0x4cc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fa68 	bl	80012d8 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff fa64 	bl	80012d8 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e026      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x498>
 8001e2a:	e01e      	b.n	8001e6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e019      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_RCC_OscConfig+0x500>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000

08001e78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0d0      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d910      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b67      	ldr	r3, [pc, #412]	@ (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4965      	ldr	r1, [pc, #404]	@ (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b63      	ldr	r3, [pc, #396]	@ (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b8      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed4:	4b59      	ldr	r3, [pc, #356]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a58      	ldr	r2, [pc, #352]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ede:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eec:	4b53      	ldr	r3, [pc, #332]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ef6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b50      	ldr	r3, [pc, #320]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	494d      	ldr	r1, [pc, #308]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d040      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b47      	ldr	r3, [pc, #284]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d115      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07f      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f36:	4b41      	ldr	r3, [pc, #260]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e073      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	4b3d      	ldr	r3, [pc, #244]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e06b      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f56:	4b39      	ldr	r3, [pc, #228]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 0203 	bic.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4936      	ldr	r1, [pc, #216]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f68:	f7ff f9b6 	bl	80012d8 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7ff f9b2 	bl	80012d8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e053      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 020c 	and.w	r2, r3, #12
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1eb      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d210      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0207 	bic.w	r2, r3, #7
 8001fae:	4922      	ldr	r1, [pc, #136]	@ (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e032      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4916      	ldr	r1, [pc, #88]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	490e      	ldr	r1, [pc, #56]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002006:	f000 f821 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800200a:	4602      	mov	r2, r0
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	490a      	ldr	r1, [pc, #40]	@ (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8002018:	5ccb      	ldrb	r3, [r1, r3]
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	4a09      	ldr	r2, [pc, #36]	@ (8002044 <HAL_RCC_ClockConfig+0x1cc>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002022:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <HAL_RCC_ClockConfig+0x1d0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f914 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000
 800203c:	40021000 	.word	0x40021000
 8002040:	0800643c 	.word	0x0800643c
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x30>
 8002076:	2b08      	cmp	r3, #8
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x36>
 800207a:	e027      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800207e:	613b      	str	r3, [r7, #16]
      break;
 8002080:	e027      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0c9b      	lsrs	r3, r3, #18
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	4a17      	ldr	r2, [pc, #92]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800208c:	5cd3      	ldrb	r3, [r2, r3]
 800208e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d010      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800209a:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	0c5b      	lsrs	r3, r3, #17
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	4a11      	ldr	r2, [pc, #68]	@ (80020ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ae:	fb03 f202 	mul.w	r2, r3, r2
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e004      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a0c      	ldr	r2, [pc, #48]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	613b      	str	r3, [r7, #16]
      break;
 80020ca:	e002      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ce:	613b      	str	r3, [r7, #16]
      break;
 80020d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d2:	693b      	ldr	r3, [r7, #16]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	007a1200 	.word	0x007a1200
 80020e8:	08006454 	.word	0x08006454
 80020ec:	08006464 	.word	0x08006464
 80020f0:	003d0900 	.word	0x003d0900

080020f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f8:	4b02      	ldr	r3, [pc, #8]	@ (8002104 <HAL_RCC_GetHCLKFreq+0x10>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	20000000 	.word	0x20000000

08002108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800210c:	f7ff fff2 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002110:	4602      	mov	r2, r0
 8002112:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4903      	ldr	r1, [pc, #12]	@ (800212c <HAL_RCC_GetPCLK1Freq+0x24>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	0800644c 	.word	0x0800644c

08002130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002134:	f7ff ffde 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	0adb      	lsrs	r3, r3, #11
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4903      	ldr	r1, [pc, #12]	@ (8002154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002146:	5ccb      	ldrb	r3, [r1, r3]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	0800644c 	.word	0x0800644c

08002158 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002160:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <RCC_Delay+0x34>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <RCC_Delay+0x38>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0a5b      	lsrs	r3, r3, #9
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002174:	bf00      	nop
  }
  while (Delay --);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f9      	bne.n	8002174 <RCC_Delay+0x1c>
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000000 	.word	0x20000000
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e041      	b.n	800222a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe ff3e 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f000 fab2 	bl	800273c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e041      	b.n	80022c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f839 	bl	80022d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4610      	mov	r0, r2
 8002272:	f000 fa63 	bl	800273c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <HAL_TIM_PWM_Start+0x24>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e022      	b.n	800234e <HAL_TIM_PWM_Start+0x6a>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d109      	bne.n	8002322 <HAL_TIM_PWM_Start+0x3e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	bf14      	ite	ne
 800231a:	2301      	movne	r3, #1
 800231c:	2300      	moveq	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e015      	b.n	800234e <HAL_TIM_PWM_Start+0x6a>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d109      	bne.n	800233c <HAL_TIM_PWM_Start+0x58>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e008      	b.n	800234e <HAL_TIM_PWM_Start+0x6a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e05e      	b.n	8002414 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <HAL_TIM_PWM_Start+0x82>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002364:	e013      	b.n	800238e <HAL_TIM_PWM_Start+0xaa>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d104      	bne.n	8002376 <HAL_TIM_PWM_Start+0x92>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002374:	e00b      	b.n	800238e <HAL_TIM_PWM_Start+0xaa>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d104      	bne.n	8002386 <HAL_TIM_PWM_Start+0xa2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002384:	e003      	b.n	800238e <HAL_TIM_PWM_Start+0xaa>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fc50 	bl	8002c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1e      	ldr	r2, [pc, #120]	@ (800241c <HAL_TIM_PWM_Start+0x138>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d107      	bne.n	80023b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_TIM_PWM_Start+0x138>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_TIM_PWM_Start+0xfa>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c8:	d009      	beq.n	80023de <HAL_TIM_PWM_Start+0xfa>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a14      	ldr	r2, [pc, #80]	@ (8002420 <HAL_TIM_PWM_Start+0x13c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_TIM_PWM_Start+0xfa>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <HAL_TIM_PWM_Start+0x140>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d111      	bne.n	8002402 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d010      	beq.n	8002412 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002400:	e007      	b.n	8002412 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40000400 	.word	0x40000400
 8002424:	40000800 	.word	0x40000800

08002428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002442:	2302      	movs	r3, #2
 8002444:	e0ae      	b.n	80025a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b0c      	cmp	r3, #12
 8002452:	f200 809f 	bhi.w	8002594 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002456:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	08002491 	.word	0x08002491
 8002460:	08002595 	.word	0x08002595
 8002464:	08002595 	.word	0x08002595
 8002468:	08002595 	.word	0x08002595
 800246c:	080024d1 	.word	0x080024d1
 8002470:	08002595 	.word	0x08002595
 8002474:	08002595 	.word	0x08002595
 8002478:	08002595 	.word	0x08002595
 800247c:	08002513 	.word	0x08002513
 8002480:	08002595 	.word	0x08002595
 8002484:	08002595 	.word	0x08002595
 8002488:	08002595 	.word	0x08002595
 800248c:	08002553 	.word	0x08002553
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f9b2 	bl	8002800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0208 	orr.w	r2, r2, #8
 80024aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0204 	bic.w	r2, r2, #4
 80024ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6999      	ldr	r1, [r3, #24]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	619a      	str	r2, [r3, #24]
      break;
 80024ce:	e064      	b.n	800259a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f9f8 	bl	80028cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6999      	ldr	r1, [r3, #24]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	021a      	lsls	r2, r3, #8
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	619a      	str	r2, [r3, #24]
      break;
 8002510:	e043      	b.n	800259a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fa41 	bl	80029a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0208 	orr.w	r2, r2, #8
 800252c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0204 	bic.w	r2, r2, #4
 800253c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69d9      	ldr	r1, [r3, #28]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	61da      	str	r2, [r3, #28]
      break;
 8002550:	e023      	b.n	800259a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa8b 	bl	8002a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800256c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800257c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69d9      	ldr	r1, [r3, #28]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	021a      	lsls	r2, r3, #8
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	61da      	str	r2, [r3, #28]
      break;
 8002592:	e002      	b.n	800259a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	75fb      	strb	r3, [r7, #23]
      break;
 8002598:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_TIM_ConfigClockSource+0x1c>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e0b4      	b.n	8002732 <HAL_TIM_ConfigClockSource+0x186>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002600:	d03e      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0xd4>
 8002602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002606:	f200 8087 	bhi.w	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800260e:	f000 8086 	beq.w	800271e <HAL_TIM_ConfigClockSource+0x172>
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002616:	d87f      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b70      	cmp	r3, #112	@ 0x70
 800261a:	d01a      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0xa6>
 800261c:	2b70      	cmp	r3, #112	@ 0x70
 800261e:	d87b      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002620:	2b60      	cmp	r3, #96	@ 0x60
 8002622:	d050      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002624:	2b60      	cmp	r3, #96	@ 0x60
 8002626:	d877      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002628:	2b50      	cmp	r3, #80	@ 0x50
 800262a:	d03c      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0xfa>
 800262c:	2b50      	cmp	r3, #80	@ 0x50
 800262e:	d873      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002630:	2b40      	cmp	r3, #64	@ 0x40
 8002632:	d058      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002634:	2b40      	cmp	r3, #64	@ 0x40
 8002636:	d86f      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002638:	2b30      	cmp	r3, #48	@ 0x30
 800263a:	d064      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15a>
 800263c:	2b30      	cmp	r3, #48	@ 0x30
 800263e:	d86b      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002640:	2b20      	cmp	r3, #32
 8002642:	d060      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15a>
 8002644:	2b20      	cmp	r3, #32
 8002646:	d867      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002648:	2b00      	cmp	r3, #0
 800264a:	d05c      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15a>
 800264c:	2b10      	cmp	r3, #16
 800264e:	d05a      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15a>
 8002650:	e062      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002662:	f000 facc 	bl	8002bfe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	609a      	str	r2, [r3, #8]
      break;
 800267e:	e04f      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002690:	f000 fab5 	bl	8002bfe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026a2:	609a      	str	r2, [r3, #8]
      break;
 80026a4:	e03c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b2:	461a      	mov	r2, r3
 80026b4:	f000 fa2c 	bl	8002b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2150      	movs	r1, #80	@ 0x50
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fa83 	bl	8002bca <TIM_ITRx_SetConfig>
      break;
 80026c4:	e02c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026d2:	461a      	mov	r2, r3
 80026d4:	f000 fa4a 	bl	8002b6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2160      	movs	r1, #96	@ 0x60
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fa73 	bl	8002bca <TIM_ITRx_SetConfig>
      break;
 80026e4:	e01c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f2:	461a      	mov	r2, r3
 80026f4:	f000 fa0c 	bl	8002b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2140      	movs	r1, #64	@ 0x40
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fa63 	bl	8002bca <TIM_ITRx_SetConfig>
      break;
 8002704:	e00c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f000 fa5a 	bl	8002bca <TIM_ITRx_SetConfig>
      break;
 8002716:	e003      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e000      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800271e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a29      	ldr	r2, [pc, #164]	@ (80027f4 <TIM_Base_SetConfig+0xb8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00b      	beq.n	800276c <TIM_Base_SetConfig+0x30>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800275a:	d007      	beq.n	800276c <TIM_Base_SetConfig+0x30>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a26      	ldr	r2, [pc, #152]	@ (80027f8 <TIM_Base_SetConfig+0xbc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d003      	beq.n	800276c <TIM_Base_SetConfig+0x30>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a25      	ldr	r2, [pc, #148]	@ (80027fc <TIM_Base_SetConfig+0xc0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d108      	bne.n	800277e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a1c      	ldr	r2, [pc, #112]	@ (80027f4 <TIM_Base_SetConfig+0xb8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00b      	beq.n	800279e <TIM_Base_SetConfig+0x62>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800278c:	d007      	beq.n	800279e <TIM_Base_SetConfig+0x62>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a19      	ldr	r2, [pc, #100]	@ (80027f8 <TIM_Base_SetConfig+0xbc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <TIM_Base_SetConfig+0x62>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a18      	ldr	r2, [pc, #96]	@ (80027fc <TIM_Base_SetConfig+0xc0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d108      	bne.n	80027b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a07      	ldr	r2, [pc, #28]	@ (80027f4 <TIM_Base_SetConfig+0xb8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d103      	bne.n	80027e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	615a      	str	r2, [r3, #20]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40000400 	.word	0x40000400
 80027fc:	40000800 	.word	0x40000800

08002800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f023 0201 	bic.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800282e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f023 0302 	bic.w	r3, r3, #2
 8002848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a1c      	ldr	r2, [pc, #112]	@ (80028c8 <TIM_OC1_SetConfig+0xc8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d10c      	bne.n	8002876 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0308 	bic.w	r3, r3, #8
 8002862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a13      	ldr	r2, [pc, #76]	@ (80028c8 <TIM_OC1_SetConfig+0xc8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d111      	bne.n	80028a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800288c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	621a      	str	r2, [r3, #32]
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40012c00 	.word	0x40012c00

080028cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f023 0210 	bic.w	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f023 0320 	bic.w	r3, r3, #32
 8002916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <TIM_OC2_SetConfig+0xd0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10d      	bne.n	8002948 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a14      	ldr	r2, [pc, #80]	@ (800299c <TIM_OC2_SetConfig+0xd0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d113      	bne.n	8002978 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800295e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	621a      	str	r2, [r3, #32]
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	40012c00 	.word	0x40012c00

080029a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a70 <TIM_OC3_SetConfig+0xd0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10d      	bne.n	8002a1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a14      	ldr	r2, [pc, #80]	@ (8002a70 <TIM_OC3_SetConfig+0xd0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d113      	bne.n	8002a4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	621a      	str	r2, [r3, #32]
}
 8002a64:	bf00      	nop
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40012c00 	.word	0x40012c00

08002a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	031b      	lsls	r3, r3, #12
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a0f      	ldr	r2, [pc, #60]	@ (8002b0c <TIM_OC4_SetConfig+0x98>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d109      	bne.n	8002ae8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	621a      	str	r2, [r3, #32]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 0201 	bic.w	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f023 030a 	bic.w	r3, r3, #10
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f023 0210 	bic.w	r2, r3, #16
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	031b      	lsls	r3, r3, #12
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	621a      	str	r2, [r3, #32]
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f043 0307 	orr.w	r3, r3, #7
 8002bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	609a      	str	r2, [r3, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b087      	sub	sp, #28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	021a      	lsls	r2, r3, #8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	609a      	str	r2, [r3, #8]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	2201      	movs	r2, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1a      	ldr	r2, [r3, #32]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e046      	b.n	8002d2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a16      	ldr	r2, [pc, #88]	@ (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00e      	beq.n	8002cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce8:	d009      	beq.n	8002cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a10      	ldr	r2, [pc, #64]	@ (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10c      	bne.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800

08002d40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e03d      	b.n	8002dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e042      	b.n	8002e7a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7fe f993 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2224      	movs	r2, #36	@ 0x24
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e24:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fdc6 	bl	80039b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e3a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e4a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e5a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08a      	sub	sp, #40	@ 0x28
 8002e86:	af02      	add	r7, sp, #8
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d16d      	bne.n	8002f7e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_UART_Transmit+0x2c>
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e066      	b.n	8002f80 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2221      	movs	r2, #33	@ 0x21
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fa0a 	bl	80012d8 <HAL_GetTick>
 8002ec4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eda:	d108      	bne.n	8002eee <HAL_UART_Transmit+0x6c>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e003      	b.n	8002ef6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef6:	e02a      	b.n	8002f4e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2200      	movs	r2, #0
 8002f00:	2180      	movs	r1, #128	@ 0x80
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fb15 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e036      	b.n	8002f80 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e007      	b.n	8002f40 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1cf      	bne.n	8002ef8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2140      	movs	r1, #64	@ 0x40
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fae5 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e006      	b.n	8002f80 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	4613      	mov	r3, r2
 8002f94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d112      	bne.n	8002fc8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_UART_Receive_IT+0x26>
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e00b      	b.n	8002fca <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fb25 	bl	800360e <UART_Start_Receive_IT>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	e000      	b.n	8002fca <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_UART_IRQHandler+0x66>
 8003026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fc01 	bl	800383a <UART_Receive_IT>
      return;
 8003038:	e25b      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800303a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80de 	beq.w	8003200 <HAL_UART_IRQHandler+0x22c>
 8003044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003054:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80d1 	beq.w	8003200 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800305e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_UART_IRQHandler+0xae>
 800306a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800306e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <HAL_UART_IRQHandler+0xd2>
 800308e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f043 0202 	orr.w	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_UART_IRQHandler+0xf6>
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d011      	beq.n	80030fa <HAL_UART_IRQHandler+0x126>
 80030d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	f043 0208 	orr.w	r2, r3, #8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 81f2 	beq.w	80034e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_UART_IRQHandler+0x14e>
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fb8c 	bl	800383a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <HAL_UART_IRQHandler+0x17a>
 8003146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04f      	beq.n	80031ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa96 	bl	8003680 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d041      	beq.n	80031e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3314      	adds	r3, #20
 8003168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800317c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3314      	adds	r3, #20
 800318a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800318e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800319a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1d9      	bne.n	8003162 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d013      	beq.n	80031de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ba:	4a7e      	ldr	r2, [pc, #504]	@ (80033b4 <HAL_UART_IRQHandler+0x3e0>)
 80031bc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe f9da 	bl	800157c <HAL_DMA_Abort_IT>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031d8:	4610      	mov	r0, r2
 80031da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	e00e      	b.n	80031fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f993 	bl	800350a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	e00a      	b.n	80031fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f98f 	bl	800350a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ec:	e006      	b.n	80031fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f98b 	bl	800350a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80031fa:	e175      	b.n	80034e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	bf00      	nop
    return;
 80031fe:	e173      	b.n	80034e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 814f 	bne.w	80034a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8148 	beq.w	80034a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8141 	beq.w	80034a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80b6 	beq.w	80033b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8145 	beq.w	80034ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800326a:	429a      	cmp	r2, r3
 800326c:	f080 813e 	bcs.w	80034ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003276:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b20      	cmp	r3, #32
 8003280:	f000 8088 	beq.w	8003394 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800329a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800329e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	330c      	adds	r3, #12
 80032ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80032b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032c0:	e841 2300 	strex	r3, r2, [r1]
 80032c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1d9      	bne.n	8003284 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3314      	adds	r3, #20
 80032d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3314      	adds	r3, #20
 80032f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e1      	bne.n	80032d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3314      	adds	r3, #20
 8003312:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003314:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003316:	e853 3f00 	ldrex	r3, [r3]
 800331a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800331c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800331e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003330:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003332:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003334:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003336:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003338:	e841 2300 	strex	r3, r2, [r1]
 800333c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800333e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e3      	bne.n	800330c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003364:	f023 0310 	bic.w	r3, r3, #16
 8003368:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003376:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003378:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800337c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e3      	bne.n	8003352 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe f8b9 	bl	8001506 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f8b6 	bl	800351c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033b0:	e09c      	b.n	80034ec <HAL_UART_IRQHandler+0x518>
 80033b2:	bf00      	nop
 80033b4:	08003745 	.word	0x08003745
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 808e 	beq.w	80034f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80033d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8089 	beq.w	80034f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003402:	647a      	str	r2, [r7, #68]	@ 0x44
 8003404:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e3      	bne.n	80033de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3314      	adds	r3, #20
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	623b      	str	r3, [r7, #32]
   return(result);
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800343a:	633a      	str	r2, [r7, #48]	@ 0x30
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e3      	bne.n	8003416 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	60fb      	str	r3, [r7, #12]
   return(result);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0310 	bic.w	r3, r3, #16
 8003472:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003480:	61fa      	str	r2, [r7, #28]
 8003482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003484:	69b9      	ldr	r1, [r7, #24]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	e841 2300 	strex	r3, r2, [r1]
 800348c:	617b      	str	r3, [r7, #20]
   return(result);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e3      	bne.n	800345c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800349a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f83b 	bl	800351c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034a6:	e023      	b.n	80034f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <HAL_UART_IRQHandler+0x4f4>
 80034b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f953 	bl	800376c <UART_Transmit_IT>
    return;
 80034c6:	e014      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00e      	beq.n	80034f2 <HAL_UART_IRQHandler+0x51e>
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f992 	bl	800380a <UART_EndTransmit_IT>
    return;
 80034e6:	e004      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80034e8:	bf00      	nop
 80034ea:	e002      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80034ec:	bf00      	nop
 80034ee:	e000      	b.n	80034f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80034f0:	bf00      	nop
  }
}
 80034f2:	37e8      	adds	r7, #232	@ 0xe8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b090      	sub	sp, #64	@ 0x40
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003542:	e050      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d04c      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800354c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0x30>
 8003552:	f7fd fec1 	bl	80012d8 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800355e:	429a      	cmp	r2, r3
 8003560:	d241      	bcs.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	330c      	adds	r3, #12
 8003580:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003582:	637a      	str	r2, [r7, #52]	@ 0x34
 8003584:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003588:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e5      	bne.n	8003562 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	613b      	str	r3, [r7, #16]
   return(result);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3314      	adds	r3, #20
 80035b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035b6:	623a      	str	r2, [r7, #32]
 80035b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	69f9      	ldr	r1, [r7, #28]
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e5      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e00f      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	429a      	cmp	r2, r3
 8003602:	d09f      	beq.n	8003544 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3740      	adds	r7, #64	@ 0x40
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	4613      	mov	r3, r2
 800361a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	88fa      	ldrh	r2, [r7, #6]
 8003626:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2222      	movs	r2, #34	@ 0x22
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003652:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0220 	orr.w	r2, r2, #32
 8003672:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b095      	sub	sp, #84	@ 0x54
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3314      	adds	r3, #20
 80036c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3314      	adds	r3, #20
 80036da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d119      	bne.n	800372c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	60bb      	str	r3, [r7, #8]
   return(result);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 0310 	bic.w	r3, r3, #16
 800370e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003718:	61ba      	str	r2, [r7, #24]
 800371a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6979      	ldr	r1, [r7, #20]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	613b      	str	r3, [r7, #16]
   return(result);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e5      	bne.n	80036f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800373a:	bf00      	nop
 800373c:	3754      	adds	r7, #84	@ 0x54
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff fed3 	bl	800350a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b21      	cmp	r3, #33	@ 0x21
 800377e:	d13e      	bne.n	80037fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003788:	d114      	bne.n	80037b4 <UART_Transmit_IT+0x48>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d110      	bne.n	80037b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	1c9a      	adds	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	621a      	str	r2, [r3, #32]
 80037b2:	e008      	b.n	80037c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	1c59      	adds	r1, r3, #1
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6211      	str	r1, [r2, #32]
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4619      	mov	r1, r3
 80037d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003820:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fe64 	bl	80034f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b08c      	sub	sp, #48	@ 0x30
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b22      	cmp	r3, #34	@ 0x22
 800384c:	f040 80ae 	bne.w	80039ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003858:	d117      	bne.n	800388a <UART_Receive_IT+0x50>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d113      	bne.n	800388a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	b29b      	uxth	r3, r3
 8003874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003878:	b29a      	uxth	r2, r3
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003882:	1c9a      	adds	r2, r3, #2
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	@ 0x28
 8003888:	e026      	b.n	80038d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389c:	d007      	beq.n	80038ae <UART_Receive_IT+0x74>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <UART_Receive_IT+0x82>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e008      	b.n	80038ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4619      	mov	r1, r3
 80038e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d15d      	bne.n	80039a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0220 	bic.w	r2, r2, #32
 80038fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800390a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	2b01      	cmp	r3, #1
 8003930:	d135      	bne.n	800399e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	613b      	str	r3, [r7, #16]
   return(result);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f023 0310 	bic.w	r3, r3, #16
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003958:	623a      	str	r2, [r7, #32]
 800395a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	69f9      	ldr	r1, [r7, #28]
 800395e:	6a3a      	ldr	r2, [r7, #32]
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	61bb      	str	r3, [r7, #24]
   return(result);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e5      	bne.n	8003938 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b10      	cmp	r3, #16
 8003978:	d10a      	bne.n	8003990 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fdc0 	bl	800351c <HAL_UARTEx_RxEventCallback>
 800399c:	e002      	b.n	80039a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd f94c 	bl	8000c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e002      	b.n	80039ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3730      	adds	r7, #48	@ 0x30
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80039f2:	f023 030c 	bic.w	r3, r3, #12
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003acc <UART_SetConfig+0x114>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d103      	bne.n	8003a28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7fe fb86 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	e002      	b.n	8003a2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7fe fb6e 	bl	8002108 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009a      	lsls	r2, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	4a22      	ldr	r2, [pc, #136]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	0119      	lsls	r1, r3, #4
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009a      	lsls	r2, r3, #2
 8003a58:	441a      	add	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003a66:	fba3 0302 	umull	r0, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2064      	movs	r0, #100	@ 0x64
 8003a6e:	fb00 f303 	mul.w	r3, r0, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	3332      	adds	r3, #50	@ 0x32
 8003a78:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a84:	4419      	add	r1, r3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009a      	lsls	r2, r3, #2
 8003a90:	441a      	add	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2064      	movs	r0, #100	@ 0x64
 8003aa6:	fb00 f303 	mul.w	r3, r0, r3
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	3332      	adds	r3, #50	@ 0x32
 8003ab0:	4a07      	ldr	r2, [pc, #28]	@ (8003ad0 <UART_SetConfig+0x118>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	f003 020f 	and.w	r2, r3, #15
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40013800 	.word	0x40013800
 8003ad0:	51eb851f 	.word	0x51eb851f

08003ad4 <__cvt>:
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ada:	461d      	mov	r5, r3
 8003adc:	bfbb      	ittet	lt
 8003ade:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003ae2:	461d      	movlt	r5, r3
 8003ae4:	2300      	movge	r3, #0
 8003ae6:	232d      	movlt	r3, #45	@ 0x2d
 8003ae8:	b088      	sub	sp, #32
 8003aea:	4614      	mov	r4, r2
 8003aec:	bfb8      	it	lt
 8003aee:	4614      	movlt	r4, r2
 8003af0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003af2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003af4:	7013      	strb	r3, [r2, #0]
 8003af6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003af8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003afc:	f023 0820 	bic.w	r8, r3, #32
 8003b00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b04:	d005      	beq.n	8003b12 <__cvt+0x3e>
 8003b06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b0a:	d100      	bne.n	8003b0e <__cvt+0x3a>
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e000      	b.n	8003b14 <__cvt+0x40>
 8003b12:	2303      	movs	r3, #3
 8003b14:	aa07      	add	r2, sp, #28
 8003b16:	9204      	str	r2, [sp, #16]
 8003b18:	aa06      	add	r2, sp, #24
 8003b1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b1e:	e9cd 3600 	strd	r3, r6, [sp]
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	f000 fe5f 	bl	80047e8 <_dtoa_r>
 8003b2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003b2e:	4607      	mov	r7, r0
 8003b30:	d119      	bne.n	8003b66 <__cvt+0x92>
 8003b32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003b34:	07db      	lsls	r3, r3, #31
 8003b36:	d50e      	bpl.n	8003b56 <__cvt+0x82>
 8003b38:	eb00 0906 	add.w	r9, r0, r6
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2300      	movs	r3, #0
 8003b40:	4620      	mov	r0, r4
 8003b42:	4629      	mov	r1, r5
 8003b44:	f7fc ff30 	bl	80009a8 <__aeabi_dcmpeq>
 8003b48:	b108      	cbz	r0, 8003b4e <__cvt+0x7a>
 8003b4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b4e:	2230      	movs	r2, #48	@ 0x30
 8003b50:	9b07      	ldr	r3, [sp, #28]
 8003b52:	454b      	cmp	r3, r9
 8003b54:	d31e      	bcc.n	8003b94 <__cvt+0xc0>
 8003b56:	4638      	mov	r0, r7
 8003b58:	9b07      	ldr	r3, [sp, #28]
 8003b5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003b5c:	1bdb      	subs	r3, r3, r7
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	b008      	add	sp, #32
 8003b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b6a:	eb00 0906 	add.w	r9, r0, r6
 8003b6e:	d1e5      	bne.n	8003b3c <__cvt+0x68>
 8003b70:	7803      	ldrb	r3, [r0, #0]
 8003b72:	2b30      	cmp	r3, #48	@ 0x30
 8003b74:	d10a      	bne.n	8003b8c <__cvt+0xb8>
 8003b76:	2200      	movs	r2, #0
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	f7fc ff13 	bl	80009a8 <__aeabi_dcmpeq>
 8003b82:	b918      	cbnz	r0, 8003b8c <__cvt+0xb8>
 8003b84:	f1c6 0601 	rsb	r6, r6, #1
 8003b88:	f8ca 6000 	str.w	r6, [sl]
 8003b8c:	f8da 3000 	ldr.w	r3, [sl]
 8003b90:	4499      	add	r9, r3
 8003b92:	e7d3      	b.n	8003b3c <__cvt+0x68>
 8003b94:	1c59      	adds	r1, r3, #1
 8003b96:	9107      	str	r1, [sp, #28]
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	e7d9      	b.n	8003b50 <__cvt+0x7c>

08003b9c <__exponent>:
 8003b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b9e:	2900      	cmp	r1, #0
 8003ba0:	bfb6      	itet	lt
 8003ba2:	232d      	movlt	r3, #45	@ 0x2d
 8003ba4:	232b      	movge	r3, #43	@ 0x2b
 8003ba6:	4249      	neglt	r1, r1
 8003ba8:	2909      	cmp	r1, #9
 8003baa:	7002      	strb	r2, [r0, #0]
 8003bac:	7043      	strb	r3, [r0, #1]
 8003bae:	dd29      	ble.n	8003c04 <__exponent+0x68>
 8003bb0:	f10d 0307 	add.w	r3, sp, #7
 8003bb4:	461d      	mov	r5, r3
 8003bb6:	270a      	movs	r7, #10
 8003bb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	fb07 1416 	mls	r4, r7, r6, r1
 8003bc2:	3430      	adds	r4, #48	@ 0x30
 8003bc4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003bc8:	460c      	mov	r4, r1
 8003bca:	2c63      	cmp	r4, #99	@ 0x63
 8003bcc:	4631      	mov	r1, r6
 8003bce:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bd2:	dcf1      	bgt.n	8003bb8 <__exponent+0x1c>
 8003bd4:	3130      	adds	r1, #48	@ 0x30
 8003bd6:	1e94      	subs	r4, r2, #2
 8003bd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003bdc:	4623      	mov	r3, r4
 8003bde:	1c41      	adds	r1, r0, #1
 8003be0:	42ab      	cmp	r3, r5
 8003be2:	d30a      	bcc.n	8003bfa <__exponent+0x5e>
 8003be4:	f10d 0309 	add.w	r3, sp, #9
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	42ac      	cmp	r4, r5
 8003bec:	bf88      	it	hi
 8003bee:	2300      	movhi	r3, #0
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	4403      	add	r3, r0
 8003bf4:	1a18      	subs	r0, r3, r0
 8003bf6:	b003      	add	sp, #12
 8003bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bfa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003bfe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c02:	e7ed      	b.n	8003be0 <__exponent+0x44>
 8003c04:	2330      	movs	r3, #48	@ 0x30
 8003c06:	3130      	adds	r1, #48	@ 0x30
 8003c08:	7083      	strb	r3, [r0, #2]
 8003c0a:	70c1      	strb	r1, [r0, #3]
 8003c0c:	1d03      	adds	r3, r0, #4
 8003c0e:	e7f1      	b.n	8003bf4 <__exponent+0x58>

08003c10 <_printf_float>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	b091      	sub	sp, #68	@ 0x44
 8003c16:	460c      	mov	r4, r1
 8003c18:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003c1c:	4616      	mov	r6, r2
 8003c1e:	461f      	mov	r7, r3
 8003c20:	4605      	mov	r5, r0
 8003c22:	f000 fcd3 	bl	80045cc <_localeconv_r>
 8003c26:	6803      	ldr	r3, [r0, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	9308      	str	r3, [sp, #32]
 8003c2c:	f7fc fa90 	bl	8000150 <strlen>
 8003c30:	2300      	movs	r3, #0
 8003c32:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c34:	f8d8 3000 	ldr.w	r3, [r8]
 8003c38:	9009      	str	r0, [sp, #36]	@ 0x24
 8003c3a:	3307      	adds	r3, #7
 8003c3c:	f023 0307 	bic.w	r3, r3, #7
 8003c40:	f103 0208 	add.w	r2, r3, #8
 8003c44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c48:	f8d4 b000 	ldr.w	fp, [r4]
 8003c4c:	f8c8 2000 	str.w	r2, [r8]
 8003c50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c5a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003c6a:	4b9c      	ldr	r3, [pc, #624]	@ (8003edc <_printf_float+0x2cc>)
 8003c6c:	f7fc fece 	bl	8000a0c <__aeabi_dcmpun>
 8003c70:	bb70      	cbnz	r0, 8003cd0 <_printf_float+0xc0>
 8003c72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	4b98      	ldr	r3, [pc, #608]	@ (8003edc <_printf_float+0x2cc>)
 8003c7c:	f7fc fea8 	bl	80009d0 <__aeabi_dcmple>
 8003c80:	bb30      	cbnz	r0, 8003cd0 <_printf_float+0xc0>
 8003c82:	2200      	movs	r2, #0
 8003c84:	2300      	movs	r3, #0
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fc fe97 	bl	80009bc <__aeabi_dcmplt>
 8003c8e:	b110      	cbz	r0, 8003c96 <_printf_float+0x86>
 8003c90:	232d      	movs	r3, #45	@ 0x2d
 8003c92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c96:	4a92      	ldr	r2, [pc, #584]	@ (8003ee0 <_printf_float+0x2d0>)
 8003c98:	4b92      	ldr	r3, [pc, #584]	@ (8003ee4 <_printf_float+0x2d4>)
 8003c9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c9e:	bf94      	ite	ls
 8003ca0:	4690      	movls	r8, r2
 8003ca2:	4698      	movhi	r8, r3
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	f04f 0900 	mov.w	r9, #0
 8003caa:	6123      	str	r3, [r4, #16]
 8003cac:	f02b 0304 	bic.w	r3, fp, #4
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	4633      	mov	r3, r6
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	9700      	str	r7, [sp, #0]
 8003cba:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003cbc:	f000 f9d4 	bl	8004068 <_printf_common>
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	f040 8090 	bne.w	8003de6 <_printf_float+0x1d6>
 8003cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cca:	b011      	add	sp, #68	@ 0x44
 8003ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	4640      	mov	r0, r8
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	f7fc fe98 	bl	8000a0c <__aeabi_dcmpun>
 8003cdc:	b148      	cbz	r0, 8003cf2 <_printf_float+0xe2>
 8003cde:	464b      	mov	r3, r9
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bfb8      	it	lt
 8003ce4:	232d      	movlt	r3, #45	@ 0x2d
 8003ce6:	4a80      	ldr	r2, [pc, #512]	@ (8003ee8 <_printf_float+0x2d8>)
 8003ce8:	bfb8      	it	lt
 8003cea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003cee:	4b7f      	ldr	r3, [pc, #508]	@ (8003eec <_printf_float+0x2dc>)
 8003cf0:	e7d3      	b.n	8003c9a <_printf_float+0x8a>
 8003cf2:	6863      	ldr	r3, [r4, #4]
 8003cf4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	d13f      	bne.n	8003d7c <_printf_float+0x16c>
 8003cfc:	2306      	movs	r3, #6
 8003cfe:	6063      	str	r3, [r4, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	9206      	str	r2, [sp, #24]
 8003d0a:	aa0e      	add	r2, sp, #56	@ 0x38
 8003d0c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003d10:	aa0d      	add	r2, sp, #52	@ 0x34
 8003d12:	9203      	str	r2, [sp, #12]
 8003d14:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003d18:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	4642      	mov	r2, r8
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	4628      	mov	r0, r5
 8003d24:	464b      	mov	r3, r9
 8003d26:	910a      	str	r1, [sp, #40]	@ 0x28
 8003d28:	f7ff fed4 	bl	8003ad4 <__cvt>
 8003d2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003d2e:	4680      	mov	r8, r0
 8003d30:	2947      	cmp	r1, #71	@ 0x47
 8003d32:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003d34:	d128      	bne.n	8003d88 <_printf_float+0x178>
 8003d36:	1cc8      	adds	r0, r1, #3
 8003d38:	db02      	blt.n	8003d40 <_printf_float+0x130>
 8003d3a:	6863      	ldr	r3, [r4, #4]
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	dd40      	ble.n	8003dc2 <_printf_float+0x1b2>
 8003d40:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d44:	fa5f fa8a 	uxtb.w	sl, sl
 8003d48:	4652      	mov	r2, sl
 8003d4a:	3901      	subs	r1, #1
 8003d4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003d50:	910d      	str	r1, [sp, #52]	@ 0x34
 8003d52:	f7ff ff23 	bl	8003b9c <__exponent>
 8003d56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d58:	4681      	mov	r9, r0
 8003d5a:	1813      	adds	r3, r2, r0
 8003d5c:	2a01      	cmp	r2, #1
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	dc02      	bgt.n	8003d68 <_printf_float+0x158>
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	07d2      	lsls	r2, r2, #31
 8003d66:	d501      	bpl.n	8003d6c <_printf_float+0x15c>
 8003d68:	3301      	adds	r3, #1
 8003d6a:	6123      	str	r3, [r4, #16]
 8003d6c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d09e      	beq.n	8003cb2 <_printf_float+0xa2>
 8003d74:	232d      	movs	r3, #45	@ 0x2d
 8003d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d7a:	e79a      	b.n	8003cb2 <_printf_float+0xa2>
 8003d7c:	2947      	cmp	r1, #71	@ 0x47
 8003d7e:	d1bf      	bne.n	8003d00 <_printf_float+0xf0>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1bd      	bne.n	8003d00 <_printf_float+0xf0>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e7ba      	b.n	8003cfe <_printf_float+0xee>
 8003d88:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d8c:	d9dc      	bls.n	8003d48 <_printf_float+0x138>
 8003d8e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d92:	d118      	bne.n	8003dc6 <_printf_float+0x1b6>
 8003d94:	2900      	cmp	r1, #0
 8003d96:	6863      	ldr	r3, [r4, #4]
 8003d98:	dd0b      	ble.n	8003db2 <_printf_float+0x1a2>
 8003d9a:	6121      	str	r1, [r4, #16]
 8003d9c:	b913      	cbnz	r3, 8003da4 <_printf_float+0x194>
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	07d0      	lsls	r0, r2, #31
 8003da2:	d502      	bpl.n	8003daa <_printf_float+0x19a>
 8003da4:	3301      	adds	r3, #1
 8003da6:	440b      	add	r3, r1
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	f04f 0900 	mov.w	r9, #0
 8003dae:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003db0:	e7dc      	b.n	8003d6c <_printf_float+0x15c>
 8003db2:	b913      	cbnz	r3, 8003dba <_printf_float+0x1aa>
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	07d2      	lsls	r2, r2, #31
 8003db8:	d501      	bpl.n	8003dbe <_printf_float+0x1ae>
 8003dba:	3302      	adds	r3, #2
 8003dbc:	e7f4      	b.n	8003da8 <_printf_float+0x198>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e7f2      	b.n	8003da8 <_printf_float+0x198>
 8003dc2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003dc8:	4299      	cmp	r1, r3
 8003dca:	db05      	blt.n	8003dd8 <_printf_float+0x1c8>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	6121      	str	r1, [r4, #16]
 8003dd0:	07d8      	lsls	r0, r3, #31
 8003dd2:	d5ea      	bpl.n	8003daa <_printf_float+0x19a>
 8003dd4:	1c4b      	adds	r3, r1, #1
 8003dd6:	e7e7      	b.n	8003da8 <_printf_float+0x198>
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	bfcc      	ite	gt
 8003ddc:	2201      	movgt	r2, #1
 8003dde:	f1c1 0202 	rsble	r2, r1, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	e7e0      	b.n	8003da8 <_printf_float+0x198>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	055a      	lsls	r2, r3, #21
 8003dea:	d407      	bmi.n	8003dfc <_printf_float+0x1ec>
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	4642      	mov	r2, r8
 8003df0:	4631      	mov	r1, r6
 8003df2:	4628      	mov	r0, r5
 8003df4:	47b8      	blx	r7
 8003df6:	3001      	adds	r0, #1
 8003df8:	d12b      	bne.n	8003e52 <_printf_float+0x242>
 8003dfa:	e764      	b.n	8003cc6 <_printf_float+0xb6>
 8003dfc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e00:	f240 80dc 	bls.w	8003fbc <_printf_float+0x3ac>
 8003e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f7fc fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d033      	beq.n	8003e7c <_printf_float+0x26c>
 8003e14:	2301      	movs	r3, #1
 8003e16:	4631      	mov	r1, r6
 8003e18:	4628      	mov	r0, r5
 8003e1a:	4a35      	ldr	r2, [pc, #212]	@ (8003ef0 <_printf_float+0x2e0>)
 8003e1c:	47b8      	blx	r7
 8003e1e:	3001      	adds	r0, #1
 8003e20:	f43f af51 	beq.w	8003cc6 <_printf_float+0xb6>
 8003e24:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003e28:	4543      	cmp	r3, r8
 8003e2a:	db02      	blt.n	8003e32 <_printf_float+0x222>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	07d8      	lsls	r0, r3, #31
 8003e30:	d50f      	bpl.n	8003e52 <_printf_float+0x242>
 8003e32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e36:	4631      	mov	r1, r6
 8003e38:	4628      	mov	r0, r5
 8003e3a:	47b8      	blx	r7
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	f43f af42 	beq.w	8003cc6 <_printf_float+0xb6>
 8003e42:	f04f 0900 	mov.w	r9, #0
 8003e46:	f108 38ff 	add.w	r8, r8, #4294967295
 8003e4a:	f104 0a1a 	add.w	sl, r4, #26
 8003e4e:	45c8      	cmp	r8, r9
 8003e50:	dc09      	bgt.n	8003e66 <_printf_float+0x256>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	079b      	lsls	r3, r3, #30
 8003e56:	f100 8102 	bmi.w	800405e <_printf_float+0x44e>
 8003e5a:	68e0      	ldr	r0, [r4, #12]
 8003e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e5e:	4298      	cmp	r0, r3
 8003e60:	bfb8      	it	lt
 8003e62:	4618      	movlt	r0, r3
 8003e64:	e731      	b.n	8003cca <_printf_float+0xba>
 8003e66:	2301      	movs	r3, #1
 8003e68:	4652      	mov	r2, sl
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b8      	blx	r7
 8003e70:	3001      	adds	r0, #1
 8003e72:	f43f af28 	beq.w	8003cc6 <_printf_float+0xb6>
 8003e76:	f109 0901 	add.w	r9, r9, #1
 8003e7a:	e7e8      	b.n	8003e4e <_printf_float+0x23e>
 8003e7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	dc38      	bgt.n	8003ef4 <_printf_float+0x2e4>
 8003e82:	2301      	movs	r3, #1
 8003e84:	4631      	mov	r1, r6
 8003e86:	4628      	mov	r0, r5
 8003e88:	4a19      	ldr	r2, [pc, #100]	@ (8003ef0 <_printf_float+0x2e0>)
 8003e8a:	47b8      	blx	r7
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	f43f af1a 	beq.w	8003cc6 <_printf_float+0xb6>
 8003e92:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003e96:	ea59 0303 	orrs.w	r3, r9, r3
 8003e9a:	d102      	bne.n	8003ea2 <_printf_float+0x292>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	07d9      	lsls	r1, r3, #31
 8003ea0:	d5d7      	bpl.n	8003e52 <_printf_float+0x242>
 8003ea2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	47b8      	blx	r7
 8003eac:	3001      	adds	r0, #1
 8003eae:	f43f af0a 	beq.w	8003cc6 <_printf_float+0xb6>
 8003eb2:	f04f 0a00 	mov.w	sl, #0
 8003eb6:	f104 0b1a 	add.w	fp, r4, #26
 8003eba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ebc:	425b      	negs	r3, r3
 8003ebe:	4553      	cmp	r3, sl
 8003ec0:	dc01      	bgt.n	8003ec6 <_printf_float+0x2b6>
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	e793      	b.n	8003dee <_printf_float+0x1de>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	465a      	mov	r2, fp
 8003eca:	4631      	mov	r1, r6
 8003ecc:	4628      	mov	r0, r5
 8003ece:	47b8      	blx	r7
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	f43f aef8 	beq.w	8003cc6 <_printf_float+0xb6>
 8003ed6:	f10a 0a01 	add.w	sl, sl, #1
 8003eda:	e7ee      	b.n	8003eba <_printf_float+0x2aa>
 8003edc:	7fefffff 	.word	0x7fefffff
 8003ee0:	08006466 	.word	0x08006466
 8003ee4:	0800646a 	.word	0x0800646a
 8003ee8:	0800646e 	.word	0x0800646e
 8003eec:	08006472 	.word	0x08006472
 8003ef0:	08006476 	.word	0x08006476
 8003ef4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ef6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003efa:	4553      	cmp	r3, sl
 8003efc:	bfa8      	it	ge
 8003efe:	4653      	movge	r3, sl
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	4699      	mov	r9, r3
 8003f04:	dc36      	bgt.n	8003f74 <_printf_float+0x364>
 8003f06:	f04f 0b00 	mov.w	fp, #0
 8003f0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f0e:	f104 021a 	add.w	r2, r4, #26
 8003f12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f14:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f16:	eba3 0309 	sub.w	r3, r3, r9
 8003f1a:	455b      	cmp	r3, fp
 8003f1c:	dc31      	bgt.n	8003f82 <_printf_float+0x372>
 8003f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f20:	459a      	cmp	sl, r3
 8003f22:	dc3a      	bgt.n	8003f9a <_printf_float+0x38a>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	07da      	lsls	r2, r3, #31
 8003f28:	d437      	bmi.n	8003f9a <_printf_float+0x38a>
 8003f2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f2c:	ebaa 0903 	sub.w	r9, sl, r3
 8003f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f32:	ebaa 0303 	sub.w	r3, sl, r3
 8003f36:	4599      	cmp	r9, r3
 8003f38:	bfa8      	it	ge
 8003f3a:	4699      	movge	r9, r3
 8003f3c:	f1b9 0f00 	cmp.w	r9, #0
 8003f40:	dc33      	bgt.n	8003faa <_printf_float+0x39a>
 8003f42:	f04f 0800 	mov.w	r8, #0
 8003f46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f4a:	f104 0b1a 	add.w	fp, r4, #26
 8003f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f50:	ebaa 0303 	sub.w	r3, sl, r3
 8003f54:	eba3 0309 	sub.w	r3, r3, r9
 8003f58:	4543      	cmp	r3, r8
 8003f5a:	f77f af7a 	ble.w	8003e52 <_printf_float+0x242>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	465a      	mov	r2, fp
 8003f62:	4631      	mov	r1, r6
 8003f64:	4628      	mov	r0, r5
 8003f66:	47b8      	blx	r7
 8003f68:	3001      	adds	r0, #1
 8003f6a:	f43f aeac 	beq.w	8003cc6 <_printf_float+0xb6>
 8003f6e:	f108 0801 	add.w	r8, r8, #1
 8003f72:	e7ec      	b.n	8003f4e <_printf_float+0x33e>
 8003f74:	4642      	mov	r2, r8
 8003f76:	4631      	mov	r1, r6
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b8      	blx	r7
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d1c2      	bne.n	8003f06 <_printf_float+0x2f6>
 8003f80:	e6a1      	b.n	8003cc6 <_printf_float+0xb6>
 8003f82:	2301      	movs	r3, #1
 8003f84:	4631      	mov	r1, r6
 8003f86:	4628      	mov	r0, r5
 8003f88:	920a      	str	r2, [sp, #40]	@ 0x28
 8003f8a:	47b8      	blx	r7
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	f43f ae9a 	beq.w	8003cc6 <_printf_float+0xb6>
 8003f92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f94:	f10b 0b01 	add.w	fp, fp, #1
 8003f98:	e7bb      	b.n	8003f12 <_printf_float+0x302>
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47b8      	blx	r7
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d1c0      	bne.n	8003f2a <_printf_float+0x31a>
 8003fa8:	e68d      	b.n	8003cc6 <_printf_float+0xb6>
 8003faa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003fac:	464b      	mov	r3, r9
 8003fae:	4631      	mov	r1, r6
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	4442      	add	r2, r8
 8003fb4:	47b8      	blx	r7
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d1c3      	bne.n	8003f42 <_printf_float+0x332>
 8003fba:	e684      	b.n	8003cc6 <_printf_float+0xb6>
 8003fbc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003fc0:	f1ba 0f01 	cmp.w	sl, #1
 8003fc4:	dc01      	bgt.n	8003fca <_printf_float+0x3ba>
 8003fc6:	07db      	lsls	r3, r3, #31
 8003fc8:	d536      	bpl.n	8004038 <_printf_float+0x428>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4642      	mov	r2, r8
 8003fce:	4631      	mov	r1, r6
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	47b8      	blx	r7
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	f43f ae76 	beq.w	8003cc6 <_printf_float+0xb6>
 8003fda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fde:	4631      	mov	r1, r6
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	47b8      	blx	r7
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	f43f ae6e 	beq.w	8003cc6 <_printf_float+0xb6>
 8003fea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ff6:	f7fc fcd7 	bl	80009a8 <__aeabi_dcmpeq>
 8003ffa:	b9c0      	cbnz	r0, 800402e <_printf_float+0x41e>
 8003ffc:	4653      	mov	r3, sl
 8003ffe:	f108 0201 	add.w	r2, r8, #1
 8004002:	4631      	mov	r1, r6
 8004004:	4628      	mov	r0, r5
 8004006:	47b8      	blx	r7
 8004008:	3001      	adds	r0, #1
 800400a:	d10c      	bne.n	8004026 <_printf_float+0x416>
 800400c:	e65b      	b.n	8003cc6 <_printf_float+0xb6>
 800400e:	2301      	movs	r3, #1
 8004010:	465a      	mov	r2, fp
 8004012:	4631      	mov	r1, r6
 8004014:	4628      	mov	r0, r5
 8004016:	47b8      	blx	r7
 8004018:	3001      	adds	r0, #1
 800401a:	f43f ae54 	beq.w	8003cc6 <_printf_float+0xb6>
 800401e:	f108 0801 	add.w	r8, r8, #1
 8004022:	45d0      	cmp	r8, sl
 8004024:	dbf3      	blt.n	800400e <_printf_float+0x3fe>
 8004026:	464b      	mov	r3, r9
 8004028:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800402c:	e6e0      	b.n	8003df0 <_printf_float+0x1e0>
 800402e:	f04f 0800 	mov.w	r8, #0
 8004032:	f104 0b1a 	add.w	fp, r4, #26
 8004036:	e7f4      	b.n	8004022 <_printf_float+0x412>
 8004038:	2301      	movs	r3, #1
 800403a:	4642      	mov	r2, r8
 800403c:	e7e1      	b.n	8004002 <_printf_float+0x3f2>
 800403e:	2301      	movs	r3, #1
 8004040:	464a      	mov	r2, r9
 8004042:	4631      	mov	r1, r6
 8004044:	4628      	mov	r0, r5
 8004046:	47b8      	blx	r7
 8004048:	3001      	adds	r0, #1
 800404a:	f43f ae3c 	beq.w	8003cc6 <_printf_float+0xb6>
 800404e:	f108 0801 	add.w	r8, r8, #1
 8004052:	68e3      	ldr	r3, [r4, #12]
 8004054:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004056:	1a5b      	subs	r3, r3, r1
 8004058:	4543      	cmp	r3, r8
 800405a:	dcf0      	bgt.n	800403e <_printf_float+0x42e>
 800405c:	e6fd      	b.n	8003e5a <_printf_float+0x24a>
 800405e:	f04f 0800 	mov.w	r8, #0
 8004062:	f104 0919 	add.w	r9, r4, #25
 8004066:	e7f4      	b.n	8004052 <_printf_float+0x442>

08004068 <_printf_common>:
 8004068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800406c:	4616      	mov	r6, r2
 800406e:	4698      	mov	r8, r3
 8004070:	688a      	ldr	r2, [r1, #8]
 8004072:	690b      	ldr	r3, [r1, #16]
 8004074:	4607      	mov	r7, r0
 8004076:	4293      	cmp	r3, r2
 8004078:	bfb8      	it	lt
 800407a:	4613      	movlt	r3, r2
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004082:	460c      	mov	r4, r1
 8004084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004088:	b10a      	cbz	r2, 800408e <_printf_common+0x26>
 800408a:	3301      	adds	r3, #1
 800408c:	6033      	str	r3, [r6, #0]
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	0699      	lsls	r1, r3, #26
 8004092:	bf42      	ittt	mi
 8004094:	6833      	ldrmi	r3, [r6, #0]
 8004096:	3302      	addmi	r3, #2
 8004098:	6033      	strmi	r3, [r6, #0]
 800409a:	6825      	ldr	r5, [r4, #0]
 800409c:	f015 0506 	ands.w	r5, r5, #6
 80040a0:	d106      	bne.n	80040b0 <_printf_common+0x48>
 80040a2:	f104 0a19 	add.w	sl, r4, #25
 80040a6:	68e3      	ldr	r3, [r4, #12]
 80040a8:	6832      	ldr	r2, [r6, #0]
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	42ab      	cmp	r3, r5
 80040ae:	dc2b      	bgt.n	8004108 <_printf_common+0xa0>
 80040b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040b4:	6822      	ldr	r2, [r4, #0]
 80040b6:	3b00      	subs	r3, #0
 80040b8:	bf18      	it	ne
 80040ba:	2301      	movne	r3, #1
 80040bc:	0692      	lsls	r2, r2, #26
 80040be:	d430      	bmi.n	8004122 <_printf_common+0xba>
 80040c0:	4641      	mov	r1, r8
 80040c2:	4638      	mov	r0, r7
 80040c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040c8:	47c8      	blx	r9
 80040ca:	3001      	adds	r0, #1
 80040cc:	d023      	beq.n	8004116 <_printf_common+0xae>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	6922      	ldr	r2, [r4, #16]
 80040d2:	f003 0306 	and.w	r3, r3, #6
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	bf14      	ite	ne
 80040da:	2500      	movne	r5, #0
 80040dc:	6833      	ldreq	r3, [r6, #0]
 80040de:	f04f 0600 	mov.w	r6, #0
 80040e2:	bf08      	it	eq
 80040e4:	68e5      	ldreq	r5, [r4, #12]
 80040e6:	f104 041a 	add.w	r4, r4, #26
 80040ea:	bf08      	it	eq
 80040ec:	1aed      	subeq	r5, r5, r3
 80040ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040f2:	bf08      	it	eq
 80040f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bfc4      	itt	gt
 80040fc:	1a9b      	subgt	r3, r3, r2
 80040fe:	18ed      	addgt	r5, r5, r3
 8004100:	42b5      	cmp	r5, r6
 8004102:	d11a      	bne.n	800413a <_printf_common+0xd2>
 8004104:	2000      	movs	r0, #0
 8004106:	e008      	b.n	800411a <_printf_common+0xb2>
 8004108:	2301      	movs	r3, #1
 800410a:	4652      	mov	r2, sl
 800410c:	4641      	mov	r1, r8
 800410e:	4638      	mov	r0, r7
 8004110:	47c8      	blx	r9
 8004112:	3001      	adds	r0, #1
 8004114:	d103      	bne.n	800411e <_printf_common+0xb6>
 8004116:	f04f 30ff 	mov.w	r0, #4294967295
 800411a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411e:	3501      	adds	r5, #1
 8004120:	e7c1      	b.n	80040a6 <_printf_common+0x3e>
 8004122:	2030      	movs	r0, #48	@ 0x30
 8004124:	18e1      	adds	r1, r4, r3
 8004126:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004130:	4422      	add	r2, r4
 8004132:	3302      	adds	r3, #2
 8004134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004138:	e7c2      	b.n	80040c0 <_printf_common+0x58>
 800413a:	2301      	movs	r3, #1
 800413c:	4622      	mov	r2, r4
 800413e:	4641      	mov	r1, r8
 8004140:	4638      	mov	r0, r7
 8004142:	47c8      	blx	r9
 8004144:	3001      	adds	r0, #1
 8004146:	d0e6      	beq.n	8004116 <_printf_common+0xae>
 8004148:	3601      	adds	r6, #1
 800414a:	e7d9      	b.n	8004100 <_printf_common+0x98>

0800414c <_printf_i>:
 800414c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	7e0f      	ldrb	r7, [r1, #24]
 8004152:	4691      	mov	r9, r2
 8004154:	2f78      	cmp	r7, #120	@ 0x78
 8004156:	4680      	mov	r8, r0
 8004158:	460c      	mov	r4, r1
 800415a:	469a      	mov	sl, r3
 800415c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800415e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004162:	d807      	bhi.n	8004174 <_printf_i+0x28>
 8004164:	2f62      	cmp	r7, #98	@ 0x62
 8004166:	d80a      	bhi.n	800417e <_printf_i+0x32>
 8004168:	2f00      	cmp	r7, #0
 800416a:	f000 80d3 	beq.w	8004314 <_printf_i+0x1c8>
 800416e:	2f58      	cmp	r7, #88	@ 0x58
 8004170:	f000 80ba 	beq.w	80042e8 <_printf_i+0x19c>
 8004174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004178:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800417c:	e03a      	b.n	80041f4 <_printf_i+0xa8>
 800417e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004182:	2b15      	cmp	r3, #21
 8004184:	d8f6      	bhi.n	8004174 <_printf_i+0x28>
 8004186:	a101      	add	r1, pc, #4	@ (adr r1, 800418c <_printf_i+0x40>)
 8004188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800418c:	080041e5 	.word	0x080041e5
 8004190:	080041f9 	.word	0x080041f9
 8004194:	08004175 	.word	0x08004175
 8004198:	08004175 	.word	0x08004175
 800419c:	08004175 	.word	0x08004175
 80041a0:	08004175 	.word	0x08004175
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	08004175 	.word	0x08004175
 80041ac:	08004175 	.word	0x08004175
 80041b0:	08004175 	.word	0x08004175
 80041b4:	08004175 	.word	0x08004175
 80041b8:	080042fb 	.word	0x080042fb
 80041bc:	08004223 	.word	0x08004223
 80041c0:	080042b5 	.word	0x080042b5
 80041c4:	08004175 	.word	0x08004175
 80041c8:	08004175 	.word	0x08004175
 80041cc:	0800431d 	.word	0x0800431d
 80041d0:	08004175 	.word	0x08004175
 80041d4:	08004223 	.word	0x08004223
 80041d8:	08004175 	.word	0x08004175
 80041dc:	08004175 	.word	0x08004175
 80041e0:	080042bd 	.word	0x080042bd
 80041e4:	6833      	ldr	r3, [r6, #0]
 80041e6:	1d1a      	adds	r2, r3, #4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6032      	str	r2, [r6, #0]
 80041ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041f4:	2301      	movs	r3, #1
 80041f6:	e09e      	b.n	8004336 <_printf_i+0x1ea>
 80041f8:	6833      	ldr	r3, [r6, #0]
 80041fa:	6820      	ldr	r0, [r4, #0]
 80041fc:	1d19      	adds	r1, r3, #4
 80041fe:	6031      	str	r1, [r6, #0]
 8004200:	0606      	lsls	r6, r0, #24
 8004202:	d501      	bpl.n	8004208 <_printf_i+0xbc>
 8004204:	681d      	ldr	r5, [r3, #0]
 8004206:	e003      	b.n	8004210 <_printf_i+0xc4>
 8004208:	0645      	lsls	r5, r0, #25
 800420a:	d5fb      	bpl.n	8004204 <_printf_i+0xb8>
 800420c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004210:	2d00      	cmp	r5, #0
 8004212:	da03      	bge.n	800421c <_printf_i+0xd0>
 8004214:	232d      	movs	r3, #45	@ 0x2d
 8004216:	426d      	negs	r5, r5
 8004218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800421c:	230a      	movs	r3, #10
 800421e:	4859      	ldr	r0, [pc, #356]	@ (8004384 <_printf_i+0x238>)
 8004220:	e011      	b.n	8004246 <_printf_i+0xfa>
 8004222:	6821      	ldr	r1, [r4, #0]
 8004224:	6833      	ldr	r3, [r6, #0]
 8004226:	0608      	lsls	r0, r1, #24
 8004228:	f853 5b04 	ldr.w	r5, [r3], #4
 800422c:	d402      	bmi.n	8004234 <_printf_i+0xe8>
 800422e:	0649      	lsls	r1, r1, #25
 8004230:	bf48      	it	mi
 8004232:	b2ad      	uxthmi	r5, r5
 8004234:	2f6f      	cmp	r7, #111	@ 0x6f
 8004236:	6033      	str	r3, [r6, #0]
 8004238:	bf14      	ite	ne
 800423a:	230a      	movne	r3, #10
 800423c:	2308      	moveq	r3, #8
 800423e:	4851      	ldr	r0, [pc, #324]	@ (8004384 <_printf_i+0x238>)
 8004240:	2100      	movs	r1, #0
 8004242:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004246:	6866      	ldr	r6, [r4, #4]
 8004248:	2e00      	cmp	r6, #0
 800424a:	bfa8      	it	ge
 800424c:	6821      	ldrge	r1, [r4, #0]
 800424e:	60a6      	str	r6, [r4, #8]
 8004250:	bfa4      	itt	ge
 8004252:	f021 0104 	bicge.w	r1, r1, #4
 8004256:	6021      	strge	r1, [r4, #0]
 8004258:	b90d      	cbnz	r5, 800425e <_printf_i+0x112>
 800425a:	2e00      	cmp	r6, #0
 800425c:	d04b      	beq.n	80042f6 <_printf_i+0x1aa>
 800425e:	4616      	mov	r6, r2
 8004260:	fbb5 f1f3 	udiv	r1, r5, r3
 8004264:	fb03 5711 	mls	r7, r3, r1, r5
 8004268:	5dc7      	ldrb	r7, [r0, r7]
 800426a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800426e:	462f      	mov	r7, r5
 8004270:	42bb      	cmp	r3, r7
 8004272:	460d      	mov	r5, r1
 8004274:	d9f4      	bls.n	8004260 <_printf_i+0x114>
 8004276:	2b08      	cmp	r3, #8
 8004278:	d10b      	bne.n	8004292 <_printf_i+0x146>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	07df      	lsls	r7, r3, #31
 800427e:	d508      	bpl.n	8004292 <_printf_i+0x146>
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	6861      	ldr	r1, [r4, #4]
 8004284:	4299      	cmp	r1, r3
 8004286:	bfde      	ittt	le
 8004288:	2330      	movle	r3, #48	@ 0x30
 800428a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800428e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004292:	1b92      	subs	r2, r2, r6
 8004294:	6122      	str	r2, [r4, #16]
 8004296:	464b      	mov	r3, r9
 8004298:	4621      	mov	r1, r4
 800429a:	4640      	mov	r0, r8
 800429c:	f8cd a000 	str.w	sl, [sp]
 80042a0:	aa03      	add	r2, sp, #12
 80042a2:	f7ff fee1 	bl	8004068 <_printf_common>
 80042a6:	3001      	adds	r0, #1
 80042a8:	d14a      	bne.n	8004340 <_printf_i+0x1f4>
 80042aa:	f04f 30ff 	mov.w	r0, #4294967295
 80042ae:	b004      	add	sp, #16
 80042b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	f043 0320 	orr.w	r3, r3, #32
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	2778      	movs	r7, #120	@ 0x78
 80042be:	4832      	ldr	r0, [pc, #200]	@ (8004388 <_printf_i+0x23c>)
 80042c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	6831      	ldr	r1, [r6, #0]
 80042c8:	061f      	lsls	r7, r3, #24
 80042ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80042ce:	d402      	bmi.n	80042d6 <_printf_i+0x18a>
 80042d0:	065f      	lsls	r7, r3, #25
 80042d2:	bf48      	it	mi
 80042d4:	b2ad      	uxthmi	r5, r5
 80042d6:	6031      	str	r1, [r6, #0]
 80042d8:	07d9      	lsls	r1, r3, #31
 80042da:	bf44      	itt	mi
 80042dc:	f043 0320 	orrmi.w	r3, r3, #32
 80042e0:	6023      	strmi	r3, [r4, #0]
 80042e2:	b11d      	cbz	r5, 80042ec <_printf_i+0x1a0>
 80042e4:	2310      	movs	r3, #16
 80042e6:	e7ab      	b.n	8004240 <_printf_i+0xf4>
 80042e8:	4826      	ldr	r0, [pc, #152]	@ (8004384 <_printf_i+0x238>)
 80042ea:	e7e9      	b.n	80042c0 <_printf_i+0x174>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	f023 0320 	bic.w	r3, r3, #32
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	e7f6      	b.n	80042e4 <_printf_i+0x198>
 80042f6:	4616      	mov	r6, r2
 80042f8:	e7bd      	b.n	8004276 <_printf_i+0x12a>
 80042fa:	6833      	ldr	r3, [r6, #0]
 80042fc:	6825      	ldr	r5, [r4, #0]
 80042fe:	1d18      	adds	r0, r3, #4
 8004300:	6961      	ldr	r1, [r4, #20]
 8004302:	6030      	str	r0, [r6, #0]
 8004304:	062e      	lsls	r6, r5, #24
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	d501      	bpl.n	800430e <_printf_i+0x1c2>
 800430a:	6019      	str	r1, [r3, #0]
 800430c:	e002      	b.n	8004314 <_printf_i+0x1c8>
 800430e:	0668      	lsls	r0, r5, #25
 8004310:	d5fb      	bpl.n	800430a <_printf_i+0x1be>
 8004312:	8019      	strh	r1, [r3, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	4616      	mov	r6, r2
 8004318:	6123      	str	r3, [r4, #16]
 800431a:	e7bc      	b.n	8004296 <_printf_i+0x14a>
 800431c:	6833      	ldr	r3, [r6, #0]
 800431e:	2100      	movs	r1, #0
 8004320:	1d1a      	adds	r2, r3, #4
 8004322:	6032      	str	r2, [r6, #0]
 8004324:	681e      	ldr	r6, [r3, #0]
 8004326:	6862      	ldr	r2, [r4, #4]
 8004328:	4630      	mov	r0, r6
 800432a:	f000 f9c6 	bl	80046ba <memchr>
 800432e:	b108      	cbz	r0, 8004334 <_printf_i+0x1e8>
 8004330:	1b80      	subs	r0, r0, r6
 8004332:	6060      	str	r0, [r4, #4]
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	6123      	str	r3, [r4, #16]
 8004338:	2300      	movs	r3, #0
 800433a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800433e:	e7aa      	b.n	8004296 <_printf_i+0x14a>
 8004340:	4632      	mov	r2, r6
 8004342:	4649      	mov	r1, r9
 8004344:	4640      	mov	r0, r8
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	47d0      	blx	sl
 800434a:	3001      	adds	r0, #1
 800434c:	d0ad      	beq.n	80042aa <_printf_i+0x15e>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	079b      	lsls	r3, r3, #30
 8004352:	d413      	bmi.n	800437c <_printf_i+0x230>
 8004354:	68e0      	ldr	r0, [r4, #12]
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	4298      	cmp	r0, r3
 800435a:	bfb8      	it	lt
 800435c:	4618      	movlt	r0, r3
 800435e:	e7a6      	b.n	80042ae <_printf_i+0x162>
 8004360:	2301      	movs	r3, #1
 8004362:	4632      	mov	r2, r6
 8004364:	4649      	mov	r1, r9
 8004366:	4640      	mov	r0, r8
 8004368:	47d0      	blx	sl
 800436a:	3001      	adds	r0, #1
 800436c:	d09d      	beq.n	80042aa <_printf_i+0x15e>
 800436e:	3501      	adds	r5, #1
 8004370:	68e3      	ldr	r3, [r4, #12]
 8004372:	9903      	ldr	r1, [sp, #12]
 8004374:	1a5b      	subs	r3, r3, r1
 8004376:	42ab      	cmp	r3, r5
 8004378:	dcf2      	bgt.n	8004360 <_printf_i+0x214>
 800437a:	e7eb      	b.n	8004354 <_printf_i+0x208>
 800437c:	2500      	movs	r5, #0
 800437e:	f104 0619 	add.w	r6, r4, #25
 8004382:	e7f5      	b.n	8004370 <_printf_i+0x224>
 8004384:	08006478 	.word	0x08006478
 8004388:	08006489 	.word	0x08006489

0800438c <std>:
 800438c:	2300      	movs	r3, #0
 800438e:	b510      	push	{r4, lr}
 8004390:	4604      	mov	r4, r0
 8004392:	e9c0 3300 	strd	r3, r3, [r0]
 8004396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800439a:	6083      	str	r3, [r0, #8]
 800439c:	8181      	strh	r1, [r0, #12]
 800439e:	6643      	str	r3, [r0, #100]	@ 0x64
 80043a0:	81c2      	strh	r2, [r0, #14]
 80043a2:	6183      	str	r3, [r0, #24]
 80043a4:	4619      	mov	r1, r3
 80043a6:	2208      	movs	r2, #8
 80043a8:	305c      	adds	r0, #92	@ 0x5c
 80043aa:	f000 f906 	bl	80045ba <memset>
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <std+0x58>)
 80043b0:	6224      	str	r4, [r4, #32]
 80043b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80043b4:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <std+0x5c>)
 80043b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <std+0x60>)
 80043ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043bc:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <std+0x64>)
 80043be:	6323      	str	r3, [r4, #48]	@ 0x30
 80043c0:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <std+0x68>)
 80043c2:	429c      	cmp	r4, r3
 80043c4:	d006      	beq.n	80043d4 <std+0x48>
 80043c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043ca:	4294      	cmp	r4, r2
 80043cc:	d002      	beq.n	80043d4 <std+0x48>
 80043ce:	33d0      	adds	r3, #208	@ 0xd0
 80043d0:	429c      	cmp	r4, r3
 80043d2:	d105      	bne.n	80043e0 <std+0x54>
 80043d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043dc:	f000 b96a 	b.w	80046b4 <__retarget_lock_init_recursive>
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	bf00      	nop
 80043e4:	08004535 	.word	0x08004535
 80043e8:	08004557 	.word	0x08004557
 80043ec:	0800458f 	.word	0x0800458f
 80043f0:	080045b3 	.word	0x080045b3
 80043f4:	2000028c 	.word	0x2000028c

080043f8 <stdio_exit_handler>:
 80043f8:	4a02      	ldr	r2, [pc, #8]	@ (8004404 <stdio_exit_handler+0xc>)
 80043fa:	4903      	ldr	r1, [pc, #12]	@ (8004408 <stdio_exit_handler+0x10>)
 80043fc:	4803      	ldr	r0, [pc, #12]	@ (800440c <stdio_exit_handler+0x14>)
 80043fe:	f000 b869 	b.w	80044d4 <_fwalk_sglue>
 8004402:	bf00      	nop
 8004404:	2000000c 	.word	0x2000000c
 8004408:	08005ff5 	.word	0x08005ff5
 800440c:	2000001c 	.word	0x2000001c

08004410 <cleanup_stdio>:
 8004410:	6841      	ldr	r1, [r0, #4]
 8004412:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <cleanup_stdio+0x34>)
 8004414:	b510      	push	{r4, lr}
 8004416:	4299      	cmp	r1, r3
 8004418:	4604      	mov	r4, r0
 800441a:	d001      	beq.n	8004420 <cleanup_stdio+0x10>
 800441c:	f001 fdea 	bl	8005ff4 <_fflush_r>
 8004420:	68a1      	ldr	r1, [r4, #8]
 8004422:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <cleanup_stdio+0x38>)
 8004424:	4299      	cmp	r1, r3
 8004426:	d002      	beq.n	800442e <cleanup_stdio+0x1e>
 8004428:	4620      	mov	r0, r4
 800442a:	f001 fde3 	bl	8005ff4 <_fflush_r>
 800442e:	68e1      	ldr	r1, [r4, #12]
 8004430:	4b06      	ldr	r3, [pc, #24]	@ (800444c <cleanup_stdio+0x3c>)
 8004432:	4299      	cmp	r1, r3
 8004434:	d004      	beq.n	8004440 <cleanup_stdio+0x30>
 8004436:	4620      	mov	r0, r4
 8004438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800443c:	f001 bdda 	b.w	8005ff4 <_fflush_r>
 8004440:	bd10      	pop	{r4, pc}
 8004442:	bf00      	nop
 8004444:	2000028c 	.word	0x2000028c
 8004448:	200002f4 	.word	0x200002f4
 800444c:	2000035c 	.word	0x2000035c

08004450 <global_stdio_init.part.0>:
 8004450:	b510      	push	{r4, lr}
 8004452:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <global_stdio_init.part.0+0x30>)
 8004454:	4c0b      	ldr	r4, [pc, #44]	@ (8004484 <global_stdio_init.part.0+0x34>)
 8004456:	4a0c      	ldr	r2, [pc, #48]	@ (8004488 <global_stdio_init.part.0+0x38>)
 8004458:	4620      	mov	r0, r4
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	2104      	movs	r1, #4
 800445e:	2200      	movs	r2, #0
 8004460:	f7ff ff94 	bl	800438c <std>
 8004464:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004468:	2201      	movs	r2, #1
 800446a:	2109      	movs	r1, #9
 800446c:	f7ff ff8e 	bl	800438c <std>
 8004470:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004474:	2202      	movs	r2, #2
 8004476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447a:	2112      	movs	r1, #18
 800447c:	f7ff bf86 	b.w	800438c <std>
 8004480:	200003c4 	.word	0x200003c4
 8004484:	2000028c 	.word	0x2000028c
 8004488:	080043f9 	.word	0x080043f9

0800448c <__sfp_lock_acquire>:
 800448c:	4801      	ldr	r0, [pc, #4]	@ (8004494 <__sfp_lock_acquire+0x8>)
 800448e:	f000 b912 	b.w	80046b6 <__retarget_lock_acquire_recursive>
 8004492:	bf00      	nop
 8004494:	200003cd 	.word	0x200003cd

08004498 <__sfp_lock_release>:
 8004498:	4801      	ldr	r0, [pc, #4]	@ (80044a0 <__sfp_lock_release+0x8>)
 800449a:	f000 b90d 	b.w	80046b8 <__retarget_lock_release_recursive>
 800449e:	bf00      	nop
 80044a0:	200003cd 	.word	0x200003cd

080044a4 <__sinit>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	4604      	mov	r4, r0
 80044a8:	f7ff fff0 	bl	800448c <__sfp_lock_acquire>
 80044ac:	6a23      	ldr	r3, [r4, #32]
 80044ae:	b11b      	cbz	r3, 80044b8 <__sinit+0x14>
 80044b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b4:	f7ff bff0 	b.w	8004498 <__sfp_lock_release>
 80044b8:	4b04      	ldr	r3, [pc, #16]	@ (80044cc <__sinit+0x28>)
 80044ba:	6223      	str	r3, [r4, #32]
 80044bc:	4b04      	ldr	r3, [pc, #16]	@ (80044d0 <__sinit+0x2c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f5      	bne.n	80044b0 <__sinit+0xc>
 80044c4:	f7ff ffc4 	bl	8004450 <global_stdio_init.part.0>
 80044c8:	e7f2      	b.n	80044b0 <__sinit+0xc>
 80044ca:	bf00      	nop
 80044cc:	08004411 	.word	0x08004411
 80044d0:	200003c4 	.word	0x200003c4

080044d4 <_fwalk_sglue>:
 80044d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044d8:	4607      	mov	r7, r0
 80044da:	4688      	mov	r8, r1
 80044dc:	4614      	mov	r4, r2
 80044de:	2600      	movs	r6, #0
 80044e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044e4:	f1b9 0901 	subs.w	r9, r9, #1
 80044e8:	d505      	bpl.n	80044f6 <_fwalk_sglue+0x22>
 80044ea:	6824      	ldr	r4, [r4, #0]
 80044ec:	2c00      	cmp	r4, #0
 80044ee:	d1f7      	bne.n	80044e0 <_fwalk_sglue+0xc>
 80044f0:	4630      	mov	r0, r6
 80044f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044f6:	89ab      	ldrh	r3, [r5, #12]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d907      	bls.n	800450c <_fwalk_sglue+0x38>
 80044fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004500:	3301      	adds	r3, #1
 8004502:	d003      	beq.n	800450c <_fwalk_sglue+0x38>
 8004504:	4629      	mov	r1, r5
 8004506:	4638      	mov	r0, r7
 8004508:	47c0      	blx	r8
 800450a:	4306      	orrs	r6, r0
 800450c:	3568      	adds	r5, #104	@ 0x68
 800450e:	e7e9      	b.n	80044e4 <_fwalk_sglue+0x10>

08004510 <iprintf>:
 8004510:	b40f      	push	{r0, r1, r2, r3}
 8004512:	b507      	push	{r0, r1, r2, lr}
 8004514:	4906      	ldr	r1, [pc, #24]	@ (8004530 <iprintf+0x20>)
 8004516:	ab04      	add	r3, sp, #16
 8004518:	6808      	ldr	r0, [r1, #0]
 800451a:	f853 2b04 	ldr.w	r2, [r3], #4
 800451e:	6881      	ldr	r1, [r0, #8]
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	f001 fbcf 	bl	8005cc4 <_vfiprintf_r>
 8004526:	b003      	add	sp, #12
 8004528:	f85d eb04 	ldr.w	lr, [sp], #4
 800452c:	b004      	add	sp, #16
 800452e:	4770      	bx	lr
 8004530:	20000018 	.word	0x20000018

08004534 <__sread>:
 8004534:	b510      	push	{r4, lr}
 8004536:	460c      	mov	r4, r1
 8004538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453c:	f000 f86c 	bl	8004618 <_read_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	bfab      	itete	ge
 8004544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004546:	89a3      	ldrhlt	r3, [r4, #12]
 8004548:	181b      	addge	r3, r3, r0
 800454a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800454e:	bfac      	ite	ge
 8004550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004552:	81a3      	strhlt	r3, [r4, #12]
 8004554:	bd10      	pop	{r4, pc}

08004556 <__swrite>:
 8004556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800455a:	461f      	mov	r7, r3
 800455c:	898b      	ldrh	r3, [r1, #12]
 800455e:	4605      	mov	r5, r0
 8004560:	05db      	lsls	r3, r3, #23
 8004562:	460c      	mov	r4, r1
 8004564:	4616      	mov	r6, r2
 8004566:	d505      	bpl.n	8004574 <__swrite+0x1e>
 8004568:	2302      	movs	r3, #2
 800456a:	2200      	movs	r2, #0
 800456c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004570:	f000 f840 	bl	80045f4 <_lseek_r>
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	4632      	mov	r2, r6
 8004578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800457c:	81a3      	strh	r3, [r4, #12]
 800457e:	4628      	mov	r0, r5
 8004580:	463b      	mov	r3, r7
 8004582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800458a:	f000 b857 	b.w	800463c <_write_r>

0800458e <__sseek>:
 800458e:	b510      	push	{r4, lr}
 8004590:	460c      	mov	r4, r1
 8004592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004596:	f000 f82d 	bl	80045f4 <_lseek_r>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	bf15      	itete	ne
 80045a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045aa:	81a3      	strheq	r3, [r4, #12]
 80045ac:	bf18      	it	ne
 80045ae:	81a3      	strhne	r3, [r4, #12]
 80045b0:	bd10      	pop	{r4, pc}

080045b2 <__sclose>:
 80045b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b6:	f000 b80d 	b.w	80045d4 <_close_r>

080045ba <memset>:
 80045ba:	4603      	mov	r3, r0
 80045bc:	4402      	add	r2, r0
 80045be:	4293      	cmp	r3, r2
 80045c0:	d100      	bne.n	80045c4 <memset+0xa>
 80045c2:	4770      	bx	lr
 80045c4:	f803 1b01 	strb.w	r1, [r3], #1
 80045c8:	e7f9      	b.n	80045be <memset+0x4>
	...

080045cc <_localeconv_r>:
 80045cc:	4800      	ldr	r0, [pc, #0]	@ (80045d0 <_localeconv_r+0x4>)
 80045ce:	4770      	bx	lr
 80045d0:	20000158 	.word	0x20000158

080045d4 <_close_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	2300      	movs	r3, #0
 80045d8:	4d05      	ldr	r5, [pc, #20]	@ (80045f0 <_close_r+0x1c>)
 80045da:	4604      	mov	r4, r0
 80045dc:	4608      	mov	r0, r1
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	f7fc fc1f 	bl	8000e22 <_close>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_close_r+0x1a>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_close_r+0x1a>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	200003c8 	.word	0x200003c8

080045f4 <_lseek_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	2200      	movs	r2, #0
 80045fe:	4d05      	ldr	r5, [pc, #20]	@ (8004614 <_lseek_r+0x20>)
 8004600:	602a      	str	r2, [r5, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	f7fc fc31 	bl	8000e6a <_lseek>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_lseek_r+0x1e>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_lseek_r+0x1e>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	200003c8 	.word	0x200003c8

08004618 <_read_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	2200      	movs	r2, #0
 8004622:	4d05      	ldr	r5, [pc, #20]	@ (8004638 <_read_r+0x20>)
 8004624:	602a      	str	r2, [r5, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	f7fc fbc2 	bl	8000db0 <_read>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_read_r+0x1e>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_read_r+0x1e>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	200003c8 	.word	0x200003c8

0800463c <_write_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4604      	mov	r4, r0
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	2200      	movs	r2, #0
 8004646:	4d05      	ldr	r5, [pc, #20]	@ (800465c <_write_r+0x20>)
 8004648:	602a      	str	r2, [r5, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	f7fc fbcd 	bl	8000dea <_write>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_write_r+0x1e>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_write_r+0x1e>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	200003c8 	.word	0x200003c8

08004660 <__errno>:
 8004660:	4b01      	ldr	r3, [pc, #4]	@ (8004668 <__errno+0x8>)
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000018 	.word	0x20000018

0800466c <__libc_init_array>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	2600      	movs	r6, #0
 8004670:	4d0c      	ldr	r5, [pc, #48]	@ (80046a4 <__libc_init_array+0x38>)
 8004672:	4c0d      	ldr	r4, [pc, #52]	@ (80046a8 <__libc_init_array+0x3c>)
 8004674:	1b64      	subs	r4, r4, r5
 8004676:	10a4      	asrs	r4, r4, #2
 8004678:	42a6      	cmp	r6, r4
 800467a:	d109      	bne.n	8004690 <__libc_init_array+0x24>
 800467c:	f001 fec8 	bl	8006410 <_init>
 8004680:	2600      	movs	r6, #0
 8004682:	4d0a      	ldr	r5, [pc, #40]	@ (80046ac <__libc_init_array+0x40>)
 8004684:	4c0a      	ldr	r4, [pc, #40]	@ (80046b0 <__libc_init_array+0x44>)
 8004686:	1b64      	subs	r4, r4, r5
 8004688:	10a4      	asrs	r4, r4, #2
 800468a:	42a6      	cmp	r6, r4
 800468c:	d105      	bne.n	800469a <__libc_init_array+0x2e>
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	f855 3b04 	ldr.w	r3, [r5], #4
 8004694:	4798      	blx	r3
 8004696:	3601      	adds	r6, #1
 8004698:	e7ee      	b.n	8004678 <__libc_init_array+0xc>
 800469a:	f855 3b04 	ldr.w	r3, [r5], #4
 800469e:	4798      	blx	r3
 80046a0:	3601      	adds	r6, #1
 80046a2:	e7f2      	b.n	800468a <__libc_init_array+0x1e>
 80046a4:	080067e0 	.word	0x080067e0
 80046a8:	080067e0 	.word	0x080067e0
 80046ac:	080067e0 	.word	0x080067e0
 80046b0:	080067e4 	.word	0x080067e4

080046b4 <__retarget_lock_init_recursive>:
 80046b4:	4770      	bx	lr

080046b6 <__retarget_lock_acquire_recursive>:
 80046b6:	4770      	bx	lr

080046b8 <__retarget_lock_release_recursive>:
 80046b8:	4770      	bx	lr

080046ba <memchr>:
 80046ba:	4603      	mov	r3, r0
 80046bc:	b510      	push	{r4, lr}
 80046be:	b2c9      	uxtb	r1, r1
 80046c0:	4402      	add	r2, r0
 80046c2:	4293      	cmp	r3, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	d101      	bne.n	80046cc <memchr+0x12>
 80046c8:	2000      	movs	r0, #0
 80046ca:	e003      	b.n	80046d4 <memchr+0x1a>
 80046cc:	7804      	ldrb	r4, [r0, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	428c      	cmp	r4, r1
 80046d2:	d1f6      	bne.n	80046c2 <memchr+0x8>
 80046d4:	bd10      	pop	{r4, pc}

080046d6 <quorem>:
 80046d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046da:	6903      	ldr	r3, [r0, #16]
 80046dc:	690c      	ldr	r4, [r1, #16]
 80046de:	4607      	mov	r7, r0
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	db7e      	blt.n	80047e2 <quorem+0x10c>
 80046e4:	3c01      	subs	r4, #1
 80046e6:	00a3      	lsls	r3, r4, #2
 80046e8:	f100 0514 	add.w	r5, r0, #20
 80046ec:	f101 0814 	add.w	r8, r1, #20
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004700:	3301      	adds	r3, #1
 8004702:	429a      	cmp	r2, r3
 8004704:	fbb2 f6f3 	udiv	r6, r2, r3
 8004708:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800470c:	d32e      	bcc.n	800476c <quorem+0x96>
 800470e:	f04f 0a00 	mov.w	sl, #0
 8004712:	46c4      	mov	ip, r8
 8004714:	46ae      	mov	lr, r5
 8004716:	46d3      	mov	fp, sl
 8004718:	f85c 3b04 	ldr.w	r3, [ip], #4
 800471c:	b298      	uxth	r0, r3
 800471e:	fb06 a000 	mla	r0, r6, r0, sl
 8004722:	0c1b      	lsrs	r3, r3, #16
 8004724:	0c02      	lsrs	r2, r0, #16
 8004726:	fb06 2303 	mla	r3, r6, r3, r2
 800472a:	f8de 2000 	ldr.w	r2, [lr]
 800472e:	b280      	uxth	r0, r0
 8004730:	b292      	uxth	r2, r2
 8004732:	1a12      	subs	r2, r2, r0
 8004734:	445a      	add	r2, fp
 8004736:	f8de 0000 	ldr.w	r0, [lr]
 800473a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800473e:	b29b      	uxth	r3, r3
 8004740:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004744:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004748:	b292      	uxth	r2, r2
 800474a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800474e:	45e1      	cmp	r9, ip
 8004750:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004754:	f84e 2b04 	str.w	r2, [lr], #4
 8004758:	d2de      	bcs.n	8004718 <quorem+0x42>
 800475a:	9b00      	ldr	r3, [sp, #0]
 800475c:	58eb      	ldr	r3, [r5, r3]
 800475e:	b92b      	cbnz	r3, 800476c <quorem+0x96>
 8004760:	9b01      	ldr	r3, [sp, #4]
 8004762:	3b04      	subs	r3, #4
 8004764:	429d      	cmp	r5, r3
 8004766:	461a      	mov	r2, r3
 8004768:	d32f      	bcc.n	80047ca <quorem+0xf4>
 800476a:	613c      	str	r4, [r7, #16]
 800476c:	4638      	mov	r0, r7
 800476e:	f001 f979 	bl	8005a64 <__mcmp>
 8004772:	2800      	cmp	r0, #0
 8004774:	db25      	blt.n	80047c2 <quorem+0xec>
 8004776:	4629      	mov	r1, r5
 8004778:	2000      	movs	r0, #0
 800477a:	f858 2b04 	ldr.w	r2, [r8], #4
 800477e:	f8d1 c000 	ldr.w	ip, [r1]
 8004782:	fa1f fe82 	uxth.w	lr, r2
 8004786:	fa1f f38c 	uxth.w	r3, ip
 800478a:	eba3 030e 	sub.w	r3, r3, lr
 800478e:	4403      	add	r3, r0
 8004790:	0c12      	lsrs	r2, r2, #16
 8004792:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004796:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800479a:	b29b      	uxth	r3, r3
 800479c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047a0:	45c1      	cmp	r9, r8
 80047a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80047a6:	f841 3b04 	str.w	r3, [r1], #4
 80047aa:	d2e6      	bcs.n	800477a <quorem+0xa4>
 80047ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047b4:	b922      	cbnz	r2, 80047c0 <quorem+0xea>
 80047b6:	3b04      	subs	r3, #4
 80047b8:	429d      	cmp	r5, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	d30b      	bcc.n	80047d6 <quorem+0x100>
 80047be:	613c      	str	r4, [r7, #16]
 80047c0:	3601      	adds	r6, #1
 80047c2:	4630      	mov	r0, r6
 80047c4:	b003      	add	sp, #12
 80047c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	3b04      	subs	r3, #4
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d1cb      	bne.n	800476a <quorem+0x94>
 80047d2:	3c01      	subs	r4, #1
 80047d4:	e7c6      	b.n	8004764 <quorem+0x8e>
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	3b04      	subs	r3, #4
 80047da:	2a00      	cmp	r2, #0
 80047dc:	d1ef      	bne.n	80047be <quorem+0xe8>
 80047de:	3c01      	subs	r4, #1
 80047e0:	e7ea      	b.n	80047b8 <quorem+0xe2>
 80047e2:	2000      	movs	r0, #0
 80047e4:	e7ee      	b.n	80047c4 <quorem+0xee>
	...

080047e8 <_dtoa_r>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	4614      	mov	r4, r2
 80047ee:	461d      	mov	r5, r3
 80047f0:	69c7      	ldr	r7, [r0, #28]
 80047f2:	b097      	sub	sp, #92	@ 0x5c
 80047f4:	4683      	mov	fp, r0
 80047f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80047fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80047fc:	b97f      	cbnz	r7, 800481e <_dtoa_r+0x36>
 80047fe:	2010      	movs	r0, #16
 8004800:	f000 fe02 	bl	8005408 <malloc>
 8004804:	4602      	mov	r2, r0
 8004806:	f8cb 001c 	str.w	r0, [fp, #28]
 800480a:	b920      	cbnz	r0, 8004816 <_dtoa_r+0x2e>
 800480c:	21ef      	movs	r1, #239	@ 0xef
 800480e:	4ba8      	ldr	r3, [pc, #672]	@ (8004ab0 <_dtoa_r+0x2c8>)
 8004810:	48a8      	ldr	r0, [pc, #672]	@ (8004ab4 <_dtoa_r+0x2cc>)
 8004812:	f001 fcc9 	bl	80061a8 <__assert_func>
 8004816:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800481a:	6007      	str	r7, [r0, #0]
 800481c:	60c7      	str	r7, [r0, #12]
 800481e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	b159      	cbz	r1, 800483e <_dtoa_r+0x56>
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	2301      	movs	r3, #1
 800482a:	4093      	lsls	r3, r2
 800482c:	604a      	str	r2, [r1, #4]
 800482e:	608b      	str	r3, [r1, #8]
 8004830:	4658      	mov	r0, fp
 8004832:	f000 fedf 	bl	80055f4 <_Bfree>
 8004836:	2200      	movs	r2, #0
 8004838:	f8db 301c 	ldr.w	r3, [fp, #28]
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	1e2b      	subs	r3, r5, #0
 8004840:	bfaf      	iteee	ge
 8004842:	2300      	movge	r3, #0
 8004844:	2201      	movlt	r2, #1
 8004846:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800484a:	9303      	strlt	r3, [sp, #12]
 800484c:	bfa8      	it	ge
 800484e:	6033      	strge	r3, [r6, #0]
 8004850:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004854:	4b98      	ldr	r3, [pc, #608]	@ (8004ab8 <_dtoa_r+0x2d0>)
 8004856:	bfb8      	it	lt
 8004858:	6032      	strlt	r2, [r6, #0]
 800485a:	ea33 0308 	bics.w	r3, r3, r8
 800485e:	d112      	bne.n	8004886 <_dtoa_r+0x9e>
 8004860:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004864:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800486c:	4323      	orrs	r3, r4
 800486e:	f000 8550 	beq.w	8005312 <_dtoa_r+0xb2a>
 8004872:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004874:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004abc <_dtoa_r+0x2d4>
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8552 	beq.w	8005322 <_dtoa_r+0xb3a>
 800487e:	f10a 0303 	add.w	r3, sl, #3
 8004882:	f000 bd4c 	b.w	800531e <_dtoa_r+0xb36>
 8004886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800488a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800488e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004892:	2200      	movs	r2, #0
 8004894:	2300      	movs	r3, #0
 8004896:	f7fc f887 	bl	80009a8 <__aeabi_dcmpeq>
 800489a:	4607      	mov	r7, r0
 800489c:	b158      	cbz	r0, 80048b6 <_dtoa_r+0xce>
 800489e:	2301      	movs	r3, #1
 80048a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80048a6:	b113      	cbz	r3, 80048ae <_dtoa_r+0xc6>
 80048a8:	4b85      	ldr	r3, [pc, #532]	@ (8004ac0 <_dtoa_r+0x2d8>)
 80048aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004ac4 <_dtoa_r+0x2dc>
 80048b2:	f000 bd36 	b.w	8005322 <_dtoa_r+0xb3a>
 80048b6:	ab14      	add	r3, sp, #80	@ 0x50
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	ab15      	add	r3, sp, #84	@ 0x54
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4658      	mov	r0, fp
 80048c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80048c4:	f001 f97e 	bl	8005bc4 <__d2b>
 80048c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80048cc:	4681      	mov	r9, r0
 80048ce:	2e00      	cmp	r6, #0
 80048d0:	d077      	beq.n	80049c2 <_dtoa_r+0x1da>
 80048d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80048dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80048e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80048e8:	9712      	str	r7, [sp, #72]	@ 0x48
 80048ea:	4619      	mov	r1, r3
 80048ec:	2200      	movs	r2, #0
 80048ee:	4b76      	ldr	r3, [pc, #472]	@ (8004ac8 <_dtoa_r+0x2e0>)
 80048f0:	f7fb fc3a 	bl	8000168 <__aeabi_dsub>
 80048f4:	a368      	add	r3, pc, #416	@ (adr r3, 8004a98 <_dtoa_r+0x2b0>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb fded 	bl	80004d8 <__aeabi_dmul>
 80048fe:	a368      	add	r3, pc, #416	@ (adr r3, 8004aa0 <_dtoa_r+0x2b8>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fc32 	bl	800016c <__adddf3>
 8004908:	4604      	mov	r4, r0
 800490a:	4630      	mov	r0, r6
 800490c:	460d      	mov	r5, r1
 800490e:	f7fb fd79 	bl	8000404 <__aeabi_i2d>
 8004912:	a365      	add	r3, pc, #404	@ (adr r3, 8004aa8 <_dtoa_r+0x2c0>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb fdde 	bl	80004d8 <__aeabi_dmul>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4620      	mov	r0, r4
 8004922:	4629      	mov	r1, r5
 8004924:	f7fb fc22 	bl	800016c <__adddf3>
 8004928:	4604      	mov	r4, r0
 800492a:	460d      	mov	r5, r1
 800492c:	f7fc f884 	bl	8000a38 <__aeabi_d2iz>
 8004930:	2200      	movs	r2, #0
 8004932:	4607      	mov	r7, r0
 8004934:	2300      	movs	r3, #0
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f7fc f83f 	bl	80009bc <__aeabi_dcmplt>
 800493e:	b140      	cbz	r0, 8004952 <_dtoa_r+0x16a>
 8004940:	4638      	mov	r0, r7
 8004942:	f7fb fd5f 	bl	8000404 <__aeabi_i2d>
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	f7fc f82d 	bl	80009a8 <__aeabi_dcmpeq>
 800494e:	b900      	cbnz	r0, 8004952 <_dtoa_r+0x16a>
 8004950:	3f01      	subs	r7, #1
 8004952:	2f16      	cmp	r7, #22
 8004954:	d853      	bhi.n	80049fe <_dtoa_r+0x216>
 8004956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800495a:	4b5c      	ldr	r3, [pc, #368]	@ (8004acc <_dtoa_r+0x2e4>)
 800495c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fc f82a 	bl	80009bc <__aeabi_dcmplt>
 8004968:	2800      	cmp	r0, #0
 800496a:	d04a      	beq.n	8004a02 <_dtoa_r+0x21a>
 800496c:	2300      	movs	r3, #0
 800496e:	3f01      	subs	r7, #1
 8004970:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004972:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004974:	1b9b      	subs	r3, r3, r6
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	bf46      	itte	mi
 800497a:	f1c3 0801 	rsbmi	r8, r3, #1
 800497e:	2300      	movmi	r3, #0
 8004980:	f04f 0800 	movpl.w	r8, #0
 8004984:	9209      	str	r2, [sp, #36]	@ 0x24
 8004986:	bf48      	it	mi
 8004988:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800498a:	2f00      	cmp	r7, #0
 800498c:	db3b      	blt.n	8004a06 <_dtoa_r+0x21e>
 800498e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004990:	970e      	str	r7, [sp, #56]	@ 0x38
 8004992:	443b      	add	r3, r7
 8004994:	9309      	str	r3, [sp, #36]	@ 0x24
 8004996:	2300      	movs	r3, #0
 8004998:	930a      	str	r3, [sp, #40]	@ 0x28
 800499a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800499c:	2b09      	cmp	r3, #9
 800499e:	d866      	bhi.n	8004a6e <_dtoa_r+0x286>
 80049a0:	2b05      	cmp	r3, #5
 80049a2:	bfc4      	itt	gt
 80049a4:	3b04      	subgt	r3, #4
 80049a6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80049a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049aa:	bfc8      	it	gt
 80049ac:	2400      	movgt	r4, #0
 80049ae:	f1a3 0302 	sub.w	r3, r3, #2
 80049b2:	bfd8      	it	le
 80049b4:	2401      	movle	r4, #1
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d864      	bhi.n	8004a84 <_dtoa_r+0x29c>
 80049ba:	e8df f003 	tbb	[pc, r3]
 80049be:	382b      	.short	0x382b
 80049c0:	5636      	.short	0x5636
 80049c2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80049c6:	441e      	add	r6, r3
 80049c8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	bfc1      	itttt	gt
 80049d0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80049d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80049d8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80049dc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80049e0:	bfd6      	itet	le
 80049e2:	f1c3 0320 	rsble	r3, r3, #32
 80049e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80049ea:	fa04 f003 	lslle.w	r0, r4, r3
 80049ee:	f7fb fcf9 	bl	80003e4 <__aeabi_ui2d>
 80049f2:	2201      	movs	r2, #1
 80049f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80049f8:	3e01      	subs	r6, #1
 80049fa:	9212      	str	r2, [sp, #72]	@ 0x48
 80049fc:	e775      	b.n	80048ea <_dtoa_r+0x102>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e7b6      	b.n	8004970 <_dtoa_r+0x188>
 8004a02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004a04:	e7b5      	b.n	8004972 <_dtoa_r+0x18a>
 8004a06:	427b      	negs	r3, r7
 8004a08:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	eba8 0807 	sub.w	r8, r8, r7
 8004a10:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a12:	e7c2      	b.n	800499a <_dtoa_r+0x1b2>
 8004a14:	2300      	movs	r3, #0
 8004a16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dc35      	bgt.n	8004a8a <_dtoa_r+0x2a2>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	461a      	mov	r2, r3
 8004a22:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a26:	9221      	str	r2, [sp, #132]	@ 0x84
 8004a28:	e00b      	b.n	8004a42 <_dtoa_r+0x25a>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e7f3      	b.n	8004a16 <_dtoa_r+0x22e>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	9308      	str	r3, [sp, #32]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	9307      	str	r3, [sp, #28]
 8004a3e:	bfb8      	it	lt
 8004a40:	2301      	movlt	r3, #1
 8004a42:	2100      	movs	r1, #0
 8004a44:	2204      	movs	r2, #4
 8004a46:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004a4a:	f102 0514 	add.w	r5, r2, #20
 8004a4e:	429d      	cmp	r5, r3
 8004a50:	d91f      	bls.n	8004a92 <_dtoa_r+0x2aa>
 8004a52:	6041      	str	r1, [r0, #4]
 8004a54:	4658      	mov	r0, fp
 8004a56:	f000 fd8d 	bl	8005574 <_Balloc>
 8004a5a:	4682      	mov	sl, r0
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d139      	bne.n	8004ad4 <_dtoa_r+0x2ec>
 8004a60:	4602      	mov	r2, r0
 8004a62:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a66:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad0 <_dtoa_r+0x2e8>)
 8004a68:	e6d2      	b.n	8004810 <_dtoa_r+0x28>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e7e0      	b.n	8004a30 <_dtoa_r+0x248>
 8004a6e:	2401      	movs	r4, #1
 8004a70:	2300      	movs	r3, #0
 8004a72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a74:	9320      	str	r3, [sp, #128]	@ 0x80
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a80:	2312      	movs	r3, #18
 8004a82:	e7d0      	b.n	8004a26 <_dtoa_r+0x23e>
 8004a84:	2301      	movs	r3, #1
 8004a86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a88:	e7f5      	b.n	8004a76 <_dtoa_r+0x28e>
 8004a8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a90:	e7d7      	b.n	8004a42 <_dtoa_r+0x25a>
 8004a92:	3101      	adds	r1, #1
 8004a94:	0052      	lsls	r2, r2, #1
 8004a96:	e7d8      	b.n	8004a4a <_dtoa_r+0x262>
 8004a98:	636f4361 	.word	0x636f4361
 8004a9c:	3fd287a7 	.word	0x3fd287a7
 8004aa0:	8b60c8b3 	.word	0x8b60c8b3
 8004aa4:	3fc68a28 	.word	0x3fc68a28
 8004aa8:	509f79fb 	.word	0x509f79fb
 8004aac:	3fd34413 	.word	0x3fd34413
 8004ab0:	080064a7 	.word	0x080064a7
 8004ab4:	080064be 	.word	0x080064be
 8004ab8:	7ff00000 	.word	0x7ff00000
 8004abc:	080064a3 	.word	0x080064a3
 8004ac0:	08006477 	.word	0x08006477
 8004ac4:	08006476 	.word	0x08006476
 8004ac8:	3ff80000 	.word	0x3ff80000
 8004acc:	080065b8 	.word	0x080065b8
 8004ad0:	08006516 	.word	0x08006516
 8004ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ad8:	6018      	str	r0, [r3, #0]
 8004ada:	9b07      	ldr	r3, [sp, #28]
 8004adc:	2b0e      	cmp	r3, #14
 8004ade:	f200 80a4 	bhi.w	8004c2a <_dtoa_r+0x442>
 8004ae2:	2c00      	cmp	r4, #0
 8004ae4:	f000 80a1 	beq.w	8004c2a <_dtoa_r+0x442>
 8004ae8:	2f00      	cmp	r7, #0
 8004aea:	dd33      	ble.n	8004b54 <_dtoa_r+0x36c>
 8004aec:	4b86      	ldr	r3, [pc, #536]	@ (8004d08 <_dtoa_r+0x520>)
 8004aee:	f007 020f 	and.w	r2, r7, #15
 8004af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004af6:	05f8      	lsls	r0, r7, #23
 8004af8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004afc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b04:	d516      	bpl.n	8004b34 <_dtoa_r+0x34c>
 8004b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b0a:	4b80      	ldr	r3, [pc, #512]	@ (8004d0c <_dtoa_r+0x524>)
 8004b0c:	2603      	movs	r6, #3
 8004b0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b12:	f7fb fe0b 	bl	800072c <__aeabi_ddiv>
 8004b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b1a:	f004 040f 	and.w	r4, r4, #15
 8004b1e:	4d7b      	ldr	r5, [pc, #492]	@ (8004d0c <_dtoa_r+0x524>)
 8004b20:	b954      	cbnz	r4, 8004b38 <_dtoa_r+0x350>
 8004b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b2a:	f7fb fdff 	bl	800072c <__aeabi_ddiv>
 8004b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b32:	e028      	b.n	8004b86 <_dtoa_r+0x39e>
 8004b34:	2602      	movs	r6, #2
 8004b36:	e7f2      	b.n	8004b1e <_dtoa_r+0x336>
 8004b38:	07e1      	lsls	r1, r4, #31
 8004b3a:	d508      	bpl.n	8004b4e <_dtoa_r+0x366>
 8004b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b44:	f7fb fcc8 	bl	80004d8 <__aeabi_dmul>
 8004b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	1064      	asrs	r4, r4, #1
 8004b50:	3508      	adds	r5, #8
 8004b52:	e7e5      	b.n	8004b20 <_dtoa_r+0x338>
 8004b54:	f000 80d2 	beq.w	8004cfc <_dtoa_r+0x514>
 8004b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b5c:	427c      	negs	r4, r7
 8004b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d08 <_dtoa_r+0x520>)
 8004b60:	f004 020f 	and.w	r2, r4, #15
 8004b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f7fb fcb4 	bl	80004d8 <__aeabi_dmul>
 8004b70:	2602      	movs	r6, #2
 8004b72:	2300      	movs	r3, #0
 8004b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b78:	4d64      	ldr	r5, [pc, #400]	@ (8004d0c <_dtoa_r+0x524>)
 8004b7a:	1124      	asrs	r4, r4, #4
 8004b7c:	2c00      	cmp	r4, #0
 8004b7e:	f040 80b2 	bne.w	8004ce6 <_dtoa_r+0x4fe>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1d3      	bne.n	8004b2e <_dtoa_r+0x346>
 8004b86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80b7 	beq.w	8004d00 <_dtoa_r+0x518>
 8004b92:	2200      	movs	r2, #0
 8004b94:	4620      	mov	r0, r4
 8004b96:	4629      	mov	r1, r5
 8004b98:	4b5d      	ldr	r3, [pc, #372]	@ (8004d10 <_dtoa_r+0x528>)
 8004b9a:	f7fb ff0f 	bl	80009bc <__aeabi_dcmplt>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f000 80ae 	beq.w	8004d00 <_dtoa_r+0x518>
 8004ba4:	9b07      	ldr	r3, [sp, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80aa 	beq.w	8004d00 <_dtoa_r+0x518>
 8004bac:	9b08      	ldr	r3, [sp, #32]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	dd37      	ble.n	8004c22 <_dtoa_r+0x43a>
 8004bb2:	1e7b      	subs	r3, r7, #1
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4b55      	ldr	r3, [pc, #340]	@ (8004d14 <_dtoa_r+0x52c>)
 8004bbe:	f7fb fc8b 	bl	80004d8 <__aeabi_dmul>
 8004bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc6:	9c08      	ldr	r4, [sp, #32]
 8004bc8:	3601      	adds	r6, #1
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7fb fc1a 	bl	8000404 <__aeabi_i2d>
 8004bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bd4:	f7fb fc80 	bl	80004d8 <__aeabi_dmul>
 8004bd8:	2200      	movs	r2, #0
 8004bda:	4b4f      	ldr	r3, [pc, #316]	@ (8004d18 <_dtoa_r+0x530>)
 8004bdc:	f7fb fac6 	bl	800016c <__adddf3>
 8004be0:	4605      	mov	r5, r0
 8004be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004be6:	2c00      	cmp	r4, #0
 8004be8:	f040 809a 	bne.w	8004d20 <_dtoa_r+0x538>
 8004bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8004d1c <_dtoa_r+0x534>)
 8004bf4:	f7fb fab8 	bl	8000168 <__aeabi_dsub>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c00:	462a      	mov	r2, r5
 8004c02:	4633      	mov	r3, r6
 8004c04:	f7fb fef8 	bl	80009f8 <__aeabi_dcmpgt>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	f040 828e 	bne.w	800512a <_dtoa_r+0x942>
 8004c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c12:	462a      	mov	r2, r5
 8004c14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c18:	f7fb fed0 	bl	80009bc <__aeabi_dcmplt>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f040 8127 	bne.w	8004e70 <_dtoa_r+0x688>
 8004c22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004c2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f2c0 8163 	blt.w	8004ef8 <_dtoa_r+0x710>
 8004c32:	2f0e      	cmp	r7, #14
 8004c34:	f300 8160 	bgt.w	8004ef8 <_dtoa_r+0x710>
 8004c38:	4b33      	ldr	r3, [pc, #204]	@ (8004d08 <_dtoa_r+0x520>)
 8004c3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	da03      	bge.n	8004c54 <_dtoa_r+0x46c>
 8004c4c:	9b07      	ldr	r3, [sp, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f340 8100 	ble.w	8004e54 <_dtoa_r+0x66c>
 8004c54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c58:	4656      	mov	r6, sl
 8004c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c5e:	4620      	mov	r0, r4
 8004c60:	4629      	mov	r1, r5
 8004c62:	f7fb fd63 	bl	800072c <__aeabi_ddiv>
 8004c66:	f7fb fee7 	bl	8000a38 <__aeabi_d2iz>
 8004c6a:	4680      	mov	r8, r0
 8004c6c:	f7fb fbca 	bl	8000404 <__aeabi_i2d>
 8004c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c74:	f7fb fc30 	bl	80004d8 <__aeabi_dmul>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	f7fb fa72 	bl	8000168 <__aeabi_dsub>
 8004c84:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004c88:	9d07      	ldr	r5, [sp, #28]
 8004c8a:	f806 4b01 	strb.w	r4, [r6], #1
 8004c8e:	eba6 040a 	sub.w	r4, r6, sl
 8004c92:	42a5      	cmp	r5, r4
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	f040 8116 	bne.w	8004ec8 <_dtoa_r+0x6e0>
 8004c9c:	f7fb fa66 	bl	800016c <__adddf3>
 8004ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	460d      	mov	r5, r1
 8004ca8:	f7fb fea6 	bl	80009f8 <__aeabi_dcmpgt>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f040 80f8 	bne.w	8004ea2 <_dtoa_r+0x6ba>
 8004cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	f7fb fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8004cbe:	b118      	cbz	r0, 8004cc8 <_dtoa_r+0x4e0>
 8004cc0:	f018 0f01 	tst.w	r8, #1
 8004cc4:	f040 80ed 	bne.w	8004ea2 <_dtoa_r+0x6ba>
 8004cc8:	4649      	mov	r1, r9
 8004cca:	4658      	mov	r0, fp
 8004ccc:	f000 fc92 	bl	80055f4 <_Bfree>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	7033      	strb	r3, [r6, #0]
 8004cd4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004cd6:	3701      	adds	r7, #1
 8004cd8:	601f      	str	r7, [r3, #0]
 8004cda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8320 	beq.w	8005322 <_dtoa_r+0xb3a>
 8004ce2:	601e      	str	r6, [r3, #0]
 8004ce4:	e31d      	b.n	8005322 <_dtoa_r+0xb3a>
 8004ce6:	07e2      	lsls	r2, r4, #31
 8004ce8:	d505      	bpl.n	8004cf6 <_dtoa_r+0x50e>
 8004cea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004cee:	f7fb fbf3 	bl	80004d8 <__aeabi_dmul>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	1064      	asrs	r4, r4, #1
 8004cf8:	3508      	adds	r5, #8
 8004cfa:	e73f      	b.n	8004b7c <_dtoa_r+0x394>
 8004cfc:	2602      	movs	r6, #2
 8004cfe:	e742      	b.n	8004b86 <_dtoa_r+0x39e>
 8004d00:	9c07      	ldr	r4, [sp, #28]
 8004d02:	9704      	str	r7, [sp, #16]
 8004d04:	e761      	b.n	8004bca <_dtoa_r+0x3e2>
 8004d06:	bf00      	nop
 8004d08:	080065b8 	.word	0x080065b8
 8004d0c:	08006590 	.word	0x08006590
 8004d10:	3ff00000 	.word	0x3ff00000
 8004d14:	40240000 	.word	0x40240000
 8004d18:	401c0000 	.word	0x401c0000
 8004d1c:	40140000 	.word	0x40140000
 8004d20:	4b70      	ldr	r3, [pc, #448]	@ (8004ee4 <_dtoa_r+0x6fc>)
 8004d22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d2c:	4454      	add	r4, sl
 8004d2e:	2900      	cmp	r1, #0
 8004d30:	d045      	beq.n	8004dbe <_dtoa_r+0x5d6>
 8004d32:	2000      	movs	r0, #0
 8004d34:	496c      	ldr	r1, [pc, #432]	@ (8004ee8 <_dtoa_r+0x700>)
 8004d36:	f7fb fcf9 	bl	800072c <__aeabi_ddiv>
 8004d3a:	4633      	mov	r3, r6
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	f7fb fa13 	bl	8000168 <__aeabi_dsub>
 8004d42:	4656      	mov	r6, sl
 8004d44:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d4c:	f7fb fe74 	bl	8000a38 <__aeabi_d2iz>
 8004d50:	4605      	mov	r5, r0
 8004d52:	f7fb fb57 	bl	8000404 <__aeabi_i2d>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d5e:	f7fb fa03 	bl	8000168 <__aeabi_dsub>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	3530      	adds	r5, #48	@ 0x30
 8004d68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d70:	f806 5b01 	strb.w	r5, [r6], #1
 8004d74:	f7fb fe22 	bl	80009bc <__aeabi_dcmplt>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d163      	bne.n	8004e44 <_dtoa_r+0x65c>
 8004d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d80:	2000      	movs	r0, #0
 8004d82:	495a      	ldr	r1, [pc, #360]	@ (8004eec <_dtoa_r+0x704>)
 8004d84:	f7fb f9f0 	bl	8000168 <__aeabi_dsub>
 8004d88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d8c:	f7fb fe16 	bl	80009bc <__aeabi_dcmplt>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	f040 8087 	bne.w	8004ea4 <_dtoa_r+0x6bc>
 8004d96:	42a6      	cmp	r6, r4
 8004d98:	f43f af43 	beq.w	8004c22 <_dtoa_r+0x43a>
 8004d9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004da0:	2200      	movs	r2, #0
 8004da2:	4b53      	ldr	r3, [pc, #332]	@ (8004ef0 <_dtoa_r+0x708>)
 8004da4:	f7fb fb98 	bl	80004d8 <__aeabi_dmul>
 8004da8:	2200      	movs	r2, #0
 8004daa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004db2:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef0 <_dtoa_r+0x708>)
 8004db4:	f7fb fb90 	bl	80004d8 <__aeabi_dmul>
 8004db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dbc:	e7c4      	b.n	8004d48 <_dtoa_r+0x560>
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f7fb fb89 	bl	80004d8 <__aeabi_dmul>
 8004dc6:	4656      	mov	r6, sl
 8004dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004dcc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dd2:	f7fb fe31 	bl	8000a38 <__aeabi_d2iz>
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	f7fb fb14 	bl	8000404 <__aeabi_i2d>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004de4:	f7fb f9c0 	bl	8000168 <__aeabi_dsub>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	3530      	adds	r5, #48	@ 0x30
 8004dee:	f806 5b01 	strb.w	r5, [r6], #1
 8004df2:	42a6      	cmp	r6, r4
 8004df4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	d124      	bne.n	8004e48 <_dtoa_r+0x660>
 8004dfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e02:	4b39      	ldr	r3, [pc, #228]	@ (8004ee8 <_dtoa_r+0x700>)
 8004e04:	f7fb f9b2 	bl	800016c <__adddf3>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e10:	f7fb fdf2 	bl	80009f8 <__aeabi_dcmpgt>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d145      	bne.n	8004ea4 <_dtoa_r+0x6bc>
 8004e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	4932      	ldr	r1, [pc, #200]	@ (8004ee8 <_dtoa_r+0x700>)
 8004e20:	f7fb f9a2 	bl	8000168 <__aeabi_dsub>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e2c:	f7fb fdc6 	bl	80009bc <__aeabi_dcmplt>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	f43f aef6 	beq.w	8004c22 <_dtoa_r+0x43a>
 8004e36:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004e38:	1e73      	subs	r3, r6, #1
 8004e3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004e40:	2b30      	cmp	r3, #48	@ 0x30
 8004e42:	d0f8      	beq.n	8004e36 <_dtoa_r+0x64e>
 8004e44:	9f04      	ldr	r7, [sp, #16]
 8004e46:	e73f      	b.n	8004cc8 <_dtoa_r+0x4e0>
 8004e48:	4b29      	ldr	r3, [pc, #164]	@ (8004ef0 <_dtoa_r+0x708>)
 8004e4a:	f7fb fb45 	bl	80004d8 <__aeabi_dmul>
 8004e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e52:	e7bc      	b.n	8004dce <_dtoa_r+0x5e6>
 8004e54:	d10c      	bne.n	8004e70 <_dtoa_r+0x688>
 8004e56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <_dtoa_r+0x70c>)
 8004e5e:	f7fb fb3b 	bl	80004d8 <__aeabi_dmul>
 8004e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e66:	f7fb fdbd 	bl	80009e4 <__aeabi_dcmpge>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	f000 815b 	beq.w	8005126 <_dtoa_r+0x93e>
 8004e70:	2400      	movs	r4, #0
 8004e72:	4625      	mov	r5, r4
 8004e74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e76:	4656      	mov	r6, sl
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	9304      	str	r3, [sp, #16]
 8004e7c:	2700      	movs	r7, #0
 8004e7e:	4621      	mov	r1, r4
 8004e80:	4658      	mov	r0, fp
 8004e82:	f000 fbb7 	bl	80055f4 <_Bfree>
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	d0dc      	beq.n	8004e44 <_dtoa_r+0x65c>
 8004e8a:	b12f      	cbz	r7, 8004e98 <_dtoa_r+0x6b0>
 8004e8c:	42af      	cmp	r7, r5
 8004e8e:	d003      	beq.n	8004e98 <_dtoa_r+0x6b0>
 8004e90:	4639      	mov	r1, r7
 8004e92:	4658      	mov	r0, fp
 8004e94:	f000 fbae 	bl	80055f4 <_Bfree>
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4658      	mov	r0, fp
 8004e9c:	f000 fbaa 	bl	80055f4 <_Bfree>
 8004ea0:	e7d0      	b.n	8004e44 <_dtoa_r+0x65c>
 8004ea2:	9704      	str	r7, [sp, #16]
 8004ea4:	4633      	mov	r3, r6
 8004ea6:	461e      	mov	r6, r3
 8004ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004eac:	2a39      	cmp	r2, #57	@ 0x39
 8004eae:	d107      	bne.n	8004ec0 <_dtoa_r+0x6d8>
 8004eb0:	459a      	cmp	sl, r3
 8004eb2:	d1f8      	bne.n	8004ea6 <_dtoa_r+0x6be>
 8004eb4:	9a04      	ldr	r2, [sp, #16]
 8004eb6:	3201      	adds	r2, #1
 8004eb8:	9204      	str	r2, [sp, #16]
 8004eba:	2230      	movs	r2, #48	@ 0x30
 8004ebc:	f88a 2000 	strb.w	r2, [sl]
 8004ec0:	781a      	ldrb	r2, [r3, #0]
 8004ec2:	3201      	adds	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	e7bd      	b.n	8004e44 <_dtoa_r+0x65c>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <_dtoa_r+0x708>)
 8004ecc:	f7fb fb04 	bl	80004d8 <__aeabi_dmul>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	460d      	mov	r5, r1
 8004ed8:	f7fb fd66 	bl	80009a8 <__aeabi_dcmpeq>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	f43f aebc 	beq.w	8004c5a <_dtoa_r+0x472>
 8004ee2:	e6f1      	b.n	8004cc8 <_dtoa_r+0x4e0>
 8004ee4:	080065b8 	.word	0x080065b8
 8004ee8:	3fe00000 	.word	0x3fe00000
 8004eec:	3ff00000 	.word	0x3ff00000
 8004ef0:	40240000 	.word	0x40240000
 8004ef4:	40140000 	.word	0x40140000
 8004ef8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	f000 80db 	beq.w	80050b6 <_dtoa_r+0x8ce>
 8004f00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f02:	2a01      	cmp	r2, #1
 8004f04:	f300 80bf 	bgt.w	8005086 <_dtoa_r+0x89e>
 8004f08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	f000 80b7 	beq.w	800507e <_dtoa_r+0x896>
 8004f10:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f14:	4646      	mov	r6, r8
 8004f16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	441a      	add	r2, r3
 8004f1e:	4658      	mov	r0, fp
 8004f20:	4498      	add	r8, r3
 8004f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f24:	f000 fc1a 	bl	800575c <__i2b>
 8004f28:	4605      	mov	r5, r0
 8004f2a:	b15e      	cbz	r6, 8004f44 <_dtoa_r+0x75c>
 8004f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	dd08      	ble.n	8004f44 <_dtoa_r+0x75c>
 8004f32:	42b3      	cmp	r3, r6
 8004f34:	bfa8      	it	ge
 8004f36:	4633      	movge	r3, r6
 8004f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f3a:	eba8 0803 	sub.w	r8, r8, r3
 8004f3e:	1af6      	subs	r6, r6, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f46:	b1f3      	cbz	r3, 8004f86 <_dtoa_r+0x79e>
 8004f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80b7 	beq.w	80050be <_dtoa_r+0x8d6>
 8004f50:	b18c      	cbz	r4, 8004f76 <_dtoa_r+0x78e>
 8004f52:	4629      	mov	r1, r5
 8004f54:	4622      	mov	r2, r4
 8004f56:	4658      	mov	r0, fp
 8004f58:	f000 fcbe 	bl	80058d8 <__pow5mult>
 8004f5c:	464a      	mov	r2, r9
 8004f5e:	4601      	mov	r1, r0
 8004f60:	4605      	mov	r5, r0
 8004f62:	4658      	mov	r0, fp
 8004f64:	f000 fc10 	bl	8005788 <__multiply>
 8004f68:	4649      	mov	r1, r9
 8004f6a:	9004      	str	r0, [sp, #16]
 8004f6c:	4658      	mov	r0, fp
 8004f6e:	f000 fb41 	bl	80055f4 <_Bfree>
 8004f72:	9b04      	ldr	r3, [sp, #16]
 8004f74:	4699      	mov	r9, r3
 8004f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f78:	1b1a      	subs	r2, r3, r4
 8004f7a:	d004      	beq.n	8004f86 <_dtoa_r+0x79e>
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	4658      	mov	r0, fp
 8004f80:	f000 fcaa 	bl	80058d8 <__pow5mult>
 8004f84:	4681      	mov	r9, r0
 8004f86:	2101      	movs	r1, #1
 8004f88:	4658      	mov	r0, fp
 8004f8a:	f000 fbe7 	bl	800575c <__i2b>
 8004f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f90:	4604      	mov	r4, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 81c9 	beq.w	800532a <_dtoa_r+0xb42>
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	4658      	mov	r0, fp
 8004f9e:	f000 fc9b 	bl	80058d8 <__pow5mult>
 8004fa2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	f300 808f 	bgt.w	80050ca <_dtoa_r+0x8e2>
 8004fac:	9b02      	ldr	r3, [sp, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 8087 	bne.w	80050c2 <_dtoa_r+0x8da>
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 8083 	bne.w	80050c6 <_dtoa_r+0x8de>
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fc6:	0d1b      	lsrs	r3, r3, #20
 8004fc8:	051b      	lsls	r3, r3, #20
 8004fca:	b12b      	cbz	r3, 8004fd8 <_dtoa_r+0x7f0>
 8004fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fce:	f108 0801 	add.w	r8, r8, #1
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 81aa 	beq.w	8005336 <_dtoa_r+0xb4e>
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fe8:	6918      	ldr	r0, [r3, #16]
 8004fea:	f000 fb6b 	bl	80056c4 <__hi0bits>
 8004fee:	f1c0 0020 	rsb	r0, r0, #32
 8004ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ff4:	4418      	add	r0, r3
 8004ff6:	f010 001f 	ands.w	r0, r0, #31
 8004ffa:	d071      	beq.n	80050e0 <_dtoa_r+0x8f8>
 8004ffc:	f1c0 0320 	rsb	r3, r0, #32
 8005000:	2b04      	cmp	r3, #4
 8005002:	dd65      	ble.n	80050d0 <_dtoa_r+0x8e8>
 8005004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005006:	f1c0 001c 	rsb	r0, r0, #28
 800500a:	4403      	add	r3, r0
 800500c:	4480      	add	r8, r0
 800500e:	4406      	add	r6, r0
 8005010:	9309      	str	r3, [sp, #36]	@ 0x24
 8005012:	f1b8 0f00 	cmp.w	r8, #0
 8005016:	dd05      	ble.n	8005024 <_dtoa_r+0x83c>
 8005018:	4649      	mov	r1, r9
 800501a:	4642      	mov	r2, r8
 800501c:	4658      	mov	r0, fp
 800501e:	f000 fcb5 	bl	800598c <__lshift>
 8005022:	4681      	mov	r9, r0
 8005024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	dd05      	ble.n	8005036 <_dtoa_r+0x84e>
 800502a:	4621      	mov	r1, r4
 800502c:	461a      	mov	r2, r3
 800502e:	4658      	mov	r0, fp
 8005030:	f000 fcac 	bl	800598c <__lshift>
 8005034:	4604      	mov	r4, r0
 8005036:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d053      	beq.n	80050e4 <_dtoa_r+0x8fc>
 800503c:	4621      	mov	r1, r4
 800503e:	4648      	mov	r0, r9
 8005040:	f000 fd10 	bl	8005a64 <__mcmp>
 8005044:	2800      	cmp	r0, #0
 8005046:	da4d      	bge.n	80050e4 <_dtoa_r+0x8fc>
 8005048:	1e7b      	subs	r3, r7, #1
 800504a:	4649      	mov	r1, r9
 800504c:	9304      	str	r3, [sp, #16]
 800504e:	220a      	movs	r2, #10
 8005050:	2300      	movs	r3, #0
 8005052:	4658      	mov	r0, fp
 8005054:	f000 faf0 	bl	8005638 <__multadd>
 8005058:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800505a:	4681      	mov	r9, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 816c 	beq.w	800533a <_dtoa_r+0xb52>
 8005062:	2300      	movs	r3, #0
 8005064:	4629      	mov	r1, r5
 8005066:	220a      	movs	r2, #10
 8005068:	4658      	mov	r0, fp
 800506a:	f000 fae5 	bl	8005638 <__multadd>
 800506e:	9b08      	ldr	r3, [sp, #32]
 8005070:	4605      	mov	r5, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	dc61      	bgt.n	800513a <_dtoa_r+0x952>
 8005076:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005078:	2b02      	cmp	r3, #2
 800507a:	dc3b      	bgt.n	80050f4 <_dtoa_r+0x90c>
 800507c:	e05d      	b.n	800513a <_dtoa_r+0x952>
 800507e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005080:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005084:	e746      	b.n	8004f14 <_dtoa_r+0x72c>
 8005086:	9b07      	ldr	r3, [sp, #28]
 8005088:	1e5c      	subs	r4, r3, #1
 800508a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800508c:	42a3      	cmp	r3, r4
 800508e:	bfbf      	itttt	lt
 8005090:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005092:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005094:	1ae3      	sublt	r3, r4, r3
 8005096:	18d2      	addlt	r2, r2, r3
 8005098:	bfa8      	it	ge
 800509a:	1b1c      	subge	r4, r3, r4
 800509c:	9b07      	ldr	r3, [sp, #28]
 800509e:	bfbe      	ittt	lt
 80050a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80050a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80050a4:	2400      	movlt	r4, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bfb5      	itete	lt
 80050aa:	eba8 0603 	sublt.w	r6, r8, r3
 80050ae:	4646      	movge	r6, r8
 80050b0:	2300      	movlt	r3, #0
 80050b2:	9b07      	ldrge	r3, [sp, #28]
 80050b4:	e730      	b.n	8004f18 <_dtoa_r+0x730>
 80050b6:	4646      	mov	r6, r8
 80050b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80050bc:	e735      	b.n	8004f2a <_dtoa_r+0x742>
 80050be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050c0:	e75c      	b.n	8004f7c <_dtoa_r+0x794>
 80050c2:	2300      	movs	r3, #0
 80050c4:	e788      	b.n	8004fd8 <_dtoa_r+0x7f0>
 80050c6:	9b02      	ldr	r3, [sp, #8]
 80050c8:	e786      	b.n	8004fd8 <_dtoa_r+0x7f0>
 80050ca:	2300      	movs	r3, #0
 80050cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80050ce:	e788      	b.n	8004fe2 <_dtoa_r+0x7fa>
 80050d0:	d09f      	beq.n	8005012 <_dtoa_r+0x82a>
 80050d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050d4:	331c      	adds	r3, #28
 80050d6:	441a      	add	r2, r3
 80050d8:	4498      	add	r8, r3
 80050da:	441e      	add	r6, r3
 80050dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80050de:	e798      	b.n	8005012 <_dtoa_r+0x82a>
 80050e0:	4603      	mov	r3, r0
 80050e2:	e7f6      	b.n	80050d2 <_dtoa_r+0x8ea>
 80050e4:	9b07      	ldr	r3, [sp, #28]
 80050e6:	9704      	str	r7, [sp, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dc20      	bgt.n	800512e <_dtoa_r+0x946>
 80050ec:	9308      	str	r3, [sp, #32]
 80050ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	dd1e      	ble.n	8005132 <_dtoa_r+0x94a>
 80050f4:	9b08      	ldr	r3, [sp, #32]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f47f aebc 	bne.w	8004e74 <_dtoa_r+0x68c>
 80050fc:	4621      	mov	r1, r4
 80050fe:	2205      	movs	r2, #5
 8005100:	4658      	mov	r0, fp
 8005102:	f000 fa99 	bl	8005638 <__multadd>
 8005106:	4601      	mov	r1, r0
 8005108:	4604      	mov	r4, r0
 800510a:	4648      	mov	r0, r9
 800510c:	f000 fcaa 	bl	8005a64 <__mcmp>
 8005110:	2800      	cmp	r0, #0
 8005112:	f77f aeaf 	ble.w	8004e74 <_dtoa_r+0x68c>
 8005116:	2331      	movs	r3, #49	@ 0x31
 8005118:	4656      	mov	r6, sl
 800511a:	f806 3b01 	strb.w	r3, [r6], #1
 800511e:	9b04      	ldr	r3, [sp, #16]
 8005120:	3301      	adds	r3, #1
 8005122:	9304      	str	r3, [sp, #16]
 8005124:	e6aa      	b.n	8004e7c <_dtoa_r+0x694>
 8005126:	9c07      	ldr	r4, [sp, #28]
 8005128:	9704      	str	r7, [sp, #16]
 800512a:	4625      	mov	r5, r4
 800512c:	e7f3      	b.n	8005116 <_dtoa_r+0x92e>
 800512e:	9b07      	ldr	r3, [sp, #28]
 8005130:	9308      	str	r3, [sp, #32]
 8005132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8104 	beq.w	8005342 <_dtoa_r+0xb5a>
 800513a:	2e00      	cmp	r6, #0
 800513c:	dd05      	ble.n	800514a <_dtoa_r+0x962>
 800513e:	4629      	mov	r1, r5
 8005140:	4632      	mov	r2, r6
 8005142:	4658      	mov	r0, fp
 8005144:	f000 fc22 	bl	800598c <__lshift>
 8005148:	4605      	mov	r5, r0
 800514a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	d05a      	beq.n	8005206 <_dtoa_r+0xa1e>
 8005150:	4658      	mov	r0, fp
 8005152:	6869      	ldr	r1, [r5, #4]
 8005154:	f000 fa0e 	bl	8005574 <_Balloc>
 8005158:	4606      	mov	r6, r0
 800515a:	b928      	cbnz	r0, 8005168 <_dtoa_r+0x980>
 800515c:	4602      	mov	r2, r0
 800515e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005162:	4b83      	ldr	r3, [pc, #524]	@ (8005370 <_dtoa_r+0xb88>)
 8005164:	f7ff bb54 	b.w	8004810 <_dtoa_r+0x28>
 8005168:	692a      	ldr	r2, [r5, #16]
 800516a:	f105 010c 	add.w	r1, r5, #12
 800516e:	3202      	adds	r2, #2
 8005170:	0092      	lsls	r2, r2, #2
 8005172:	300c      	adds	r0, #12
 8005174:	f001 f80a 	bl	800618c <memcpy>
 8005178:	2201      	movs	r2, #1
 800517a:	4631      	mov	r1, r6
 800517c:	4658      	mov	r0, fp
 800517e:	f000 fc05 	bl	800598c <__lshift>
 8005182:	462f      	mov	r7, r5
 8005184:	4605      	mov	r5, r0
 8005186:	f10a 0301 	add.w	r3, sl, #1
 800518a:	9307      	str	r3, [sp, #28]
 800518c:	9b08      	ldr	r3, [sp, #32]
 800518e:	4453      	add	r3, sl
 8005190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005192:	9b02      	ldr	r3, [sp, #8]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	930a      	str	r3, [sp, #40]	@ 0x28
 800519a:	9b07      	ldr	r3, [sp, #28]
 800519c:	4621      	mov	r1, r4
 800519e:	3b01      	subs	r3, #1
 80051a0:	4648      	mov	r0, r9
 80051a2:	9302      	str	r3, [sp, #8]
 80051a4:	f7ff fa97 	bl	80046d6 <quorem>
 80051a8:	4639      	mov	r1, r7
 80051aa:	9008      	str	r0, [sp, #32]
 80051ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80051b0:	4648      	mov	r0, r9
 80051b2:	f000 fc57 	bl	8005a64 <__mcmp>
 80051b6:	462a      	mov	r2, r5
 80051b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80051ba:	4621      	mov	r1, r4
 80051bc:	4658      	mov	r0, fp
 80051be:	f000 fc6d 	bl	8005a9c <__mdiff>
 80051c2:	68c2      	ldr	r2, [r0, #12]
 80051c4:	4606      	mov	r6, r0
 80051c6:	bb02      	cbnz	r2, 800520a <_dtoa_r+0xa22>
 80051c8:	4601      	mov	r1, r0
 80051ca:	4648      	mov	r0, r9
 80051cc:	f000 fc4a 	bl	8005a64 <__mcmp>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4631      	mov	r1, r6
 80051d4:	4658      	mov	r0, fp
 80051d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80051d8:	f000 fa0c 	bl	80055f4 <_Bfree>
 80051dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051e0:	9e07      	ldr	r6, [sp, #28]
 80051e2:	ea43 0102 	orr.w	r1, r3, r2
 80051e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051e8:	4319      	orrs	r1, r3
 80051ea:	d110      	bne.n	800520e <_dtoa_r+0xa26>
 80051ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80051f0:	d029      	beq.n	8005246 <_dtoa_r+0xa5e>
 80051f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	dd02      	ble.n	80051fe <_dtoa_r+0xa16>
 80051f8:	9b08      	ldr	r3, [sp, #32]
 80051fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80051fe:	9b02      	ldr	r3, [sp, #8]
 8005200:	f883 8000 	strb.w	r8, [r3]
 8005204:	e63b      	b.n	8004e7e <_dtoa_r+0x696>
 8005206:	4628      	mov	r0, r5
 8005208:	e7bb      	b.n	8005182 <_dtoa_r+0x99a>
 800520a:	2201      	movs	r2, #1
 800520c:	e7e1      	b.n	80051d2 <_dtoa_r+0x9ea>
 800520e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	db04      	blt.n	800521e <_dtoa_r+0xa36>
 8005214:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005216:	430b      	orrs	r3, r1
 8005218:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800521a:	430b      	orrs	r3, r1
 800521c:	d120      	bne.n	8005260 <_dtoa_r+0xa78>
 800521e:	2a00      	cmp	r2, #0
 8005220:	dded      	ble.n	80051fe <_dtoa_r+0xa16>
 8005222:	4649      	mov	r1, r9
 8005224:	2201      	movs	r2, #1
 8005226:	4658      	mov	r0, fp
 8005228:	f000 fbb0 	bl	800598c <__lshift>
 800522c:	4621      	mov	r1, r4
 800522e:	4681      	mov	r9, r0
 8005230:	f000 fc18 	bl	8005a64 <__mcmp>
 8005234:	2800      	cmp	r0, #0
 8005236:	dc03      	bgt.n	8005240 <_dtoa_r+0xa58>
 8005238:	d1e1      	bne.n	80051fe <_dtoa_r+0xa16>
 800523a:	f018 0f01 	tst.w	r8, #1
 800523e:	d0de      	beq.n	80051fe <_dtoa_r+0xa16>
 8005240:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005244:	d1d8      	bne.n	80051f8 <_dtoa_r+0xa10>
 8005246:	2339      	movs	r3, #57	@ 0x39
 8005248:	9a02      	ldr	r2, [sp, #8]
 800524a:	7013      	strb	r3, [r2, #0]
 800524c:	4633      	mov	r3, r6
 800524e:	461e      	mov	r6, r3
 8005250:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005254:	3b01      	subs	r3, #1
 8005256:	2a39      	cmp	r2, #57	@ 0x39
 8005258:	d052      	beq.n	8005300 <_dtoa_r+0xb18>
 800525a:	3201      	adds	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e60e      	b.n	8004e7e <_dtoa_r+0x696>
 8005260:	2a00      	cmp	r2, #0
 8005262:	dd07      	ble.n	8005274 <_dtoa_r+0xa8c>
 8005264:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005268:	d0ed      	beq.n	8005246 <_dtoa_r+0xa5e>
 800526a:	9a02      	ldr	r2, [sp, #8]
 800526c:	f108 0301 	add.w	r3, r8, #1
 8005270:	7013      	strb	r3, [r2, #0]
 8005272:	e604      	b.n	8004e7e <_dtoa_r+0x696>
 8005274:	9b07      	ldr	r3, [sp, #28]
 8005276:	9a07      	ldr	r2, [sp, #28]
 8005278:	f803 8c01 	strb.w	r8, [r3, #-1]
 800527c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800527e:	4293      	cmp	r3, r2
 8005280:	d028      	beq.n	80052d4 <_dtoa_r+0xaec>
 8005282:	4649      	mov	r1, r9
 8005284:	2300      	movs	r3, #0
 8005286:	220a      	movs	r2, #10
 8005288:	4658      	mov	r0, fp
 800528a:	f000 f9d5 	bl	8005638 <__multadd>
 800528e:	42af      	cmp	r7, r5
 8005290:	4681      	mov	r9, r0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	f04f 020a 	mov.w	r2, #10
 800529a:	4639      	mov	r1, r7
 800529c:	4658      	mov	r0, fp
 800529e:	d107      	bne.n	80052b0 <_dtoa_r+0xac8>
 80052a0:	f000 f9ca 	bl	8005638 <__multadd>
 80052a4:	4607      	mov	r7, r0
 80052a6:	4605      	mov	r5, r0
 80052a8:	9b07      	ldr	r3, [sp, #28]
 80052aa:	3301      	adds	r3, #1
 80052ac:	9307      	str	r3, [sp, #28]
 80052ae:	e774      	b.n	800519a <_dtoa_r+0x9b2>
 80052b0:	f000 f9c2 	bl	8005638 <__multadd>
 80052b4:	4629      	mov	r1, r5
 80052b6:	4607      	mov	r7, r0
 80052b8:	2300      	movs	r3, #0
 80052ba:	220a      	movs	r2, #10
 80052bc:	4658      	mov	r0, fp
 80052be:	f000 f9bb 	bl	8005638 <__multadd>
 80052c2:	4605      	mov	r5, r0
 80052c4:	e7f0      	b.n	80052a8 <_dtoa_r+0xac0>
 80052c6:	9b08      	ldr	r3, [sp, #32]
 80052c8:	2700      	movs	r7, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bfcc      	ite	gt
 80052ce:	461e      	movgt	r6, r3
 80052d0:	2601      	movle	r6, #1
 80052d2:	4456      	add	r6, sl
 80052d4:	4649      	mov	r1, r9
 80052d6:	2201      	movs	r2, #1
 80052d8:	4658      	mov	r0, fp
 80052da:	f000 fb57 	bl	800598c <__lshift>
 80052de:	4621      	mov	r1, r4
 80052e0:	4681      	mov	r9, r0
 80052e2:	f000 fbbf 	bl	8005a64 <__mcmp>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	dcb0      	bgt.n	800524c <_dtoa_r+0xa64>
 80052ea:	d102      	bne.n	80052f2 <_dtoa_r+0xb0a>
 80052ec:	f018 0f01 	tst.w	r8, #1
 80052f0:	d1ac      	bne.n	800524c <_dtoa_r+0xa64>
 80052f2:	4633      	mov	r3, r6
 80052f4:	461e      	mov	r6, r3
 80052f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052fa:	2a30      	cmp	r2, #48	@ 0x30
 80052fc:	d0fa      	beq.n	80052f4 <_dtoa_r+0xb0c>
 80052fe:	e5be      	b.n	8004e7e <_dtoa_r+0x696>
 8005300:	459a      	cmp	sl, r3
 8005302:	d1a4      	bne.n	800524e <_dtoa_r+0xa66>
 8005304:	9b04      	ldr	r3, [sp, #16]
 8005306:	3301      	adds	r3, #1
 8005308:	9304      	str	r3, [sp, #16]
 800530a:	2331      	movs	r3, #49	@ 0x31
 800530c:	f88a 3000 	strb.w	r3, [sl]
 8005310:	e5b5      	b.n	8004e7e <_dtoa_r+0x696>
 8005312:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005314:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005374 <_dtoa_r+0xb8c>
 8005318:	b11b      	cbz	r3, 8005322 <_dtoa_r+0xb3a>
 800531a:	f10a 0308 	add.w	r3, sl, #8
 800531e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4650      	mov	r0, sl
 8005324:	b017      	add	sp, #92	@ 0x5c
 8005326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800532c:	2b01      	cmp	r3, #1
 800532e:	f77f ae3d 	ble.w	8004fac <_dtoa_r+0x7c4>
 8005332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005334:	930a      	str	r3, [sp, #40]	@ 0x28
 8005336:	2001      	movs	r0, #1
 8005338:	e65b      	b.n	8004ff2 <_dtoa_r+0x80a>
 800533a:	9b08      	ldr	r3, [sp, #32]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f77f aed6 	ble.w	80050ee <_dtoa_r+0x906>
 8005342:	4656      	mov	r6, sl
 8005344:	4621      	mov	r1, r4
 8005346:	4648      	mov	r0, r9
 8005348:	f7ff f9c5 	bl	80046d6 <quorem>
 800534c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005350:	9b08      	ldr	r3, [sp, #32]
 8005352:	f806 8b01 	strb.w	r8, [r6], #1
 8005356:	eba6 020a 	sub.w	r2, r6, sl
 800535a:	4293      	cmp	r3, r2
 800535c:	ddb3      	ble.n	80052c6 <_dtoa_r+0xade>
 800535e:	4649      	mov	r1, r9
 8005360:	2300      	movs	r3, #0
 8005362:	220a      	movs	r2, #10
 8005364:	4658      	mov	r0, fp
 8005366:	f000 f967 	bl	8005638 <__multadd>
 800536a:	4681      	mov	r9, r0
 800536c:	e7ea      	b.n	8005344 <_dtoa_r+0xb5c>
 800536e:	bf00      	nop
 8005370:	08006516 	.word	0x08006516
 8005374:	0800649a 	.word	0x0800649a

08005378 <_free_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4605      	mov	r5, r0
 800537c:	2900      	cmp	r1, #0
 800537e:	d040      	beq.n	8005402 <_free_r+0x8a>
 8005380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005384:	1f0c      	subs	r4, r1, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	bfb8      	it	lt
 800538a:	18e4      	addlt	r4, r4, r3
 800538c:	f000 f8e6 	bl	800555c <__malloc_lock>
 8005390:	4a1c      	ldr	r2, [pc, #112]	@ (8005404 <_free_r+0x8c>)
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	b933      	cbnz	r3, 80053a4 <_free_r+0x2c>
 8005396:	6063      	str	r3, [r4, #4]
 8005398:	6014      	str	r4, [r2, #0]
 800539a:	4628      	mov	r0, r5
 800539c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053a0:	f000 b8e2 	b.w	8005568 <__malloc_unlock>
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	d908      	bls.n	80053ba <_free_r+0x42>
 80053a8:	6820      	ldr	r0, [r4, #0]
 80053aa:	1821      	adds	r1, r4, r0
 80053ac:	428b      	cmp	r3, r1
 80053ae:	bf01      	itttt	eq
 80053b0:	6819      	ldreq	r1, [r3, #0]
 80053b2:	685b      	ldreq	r3, [r3, #4]
 80053b4:	1809      	addeq	r1, r1, r0
 80053b6:	6021      	streq	r1, [r4, #0]
 80053b8:	e7ed      	b.n	8005396 <_free_r+0x1e>
 80053ba:	461a      	mov	r2, r3
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	b10b      	cbz	r3, 80053c4 <_free_r+0x4c>
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	d9fa      	bls.n	80053ba <_free_r+0x42>
 80053c4:	6811      	ldr	r1, [r2, #0]
 80053c6:	1850      	adds	r0, r2, r1
 80053c8:	42a0      	cmp	r0, r4
 80053ca:	d10b      	bne.n	80053e4 <_free_r+0x6c>
 80053cc:	6820      	ldr	r0, [r4, #0]
 80053ce:	4401      	add	r1, r0
 80053d0:	1850      	adds	r0, r2, r1
 80053d2:	4283      	cmp	r3, r0
 80053d4:	6011      	str	r1, [r2, #0]
 80053d6:	d1e0      	bne.n	800539a <_free_r+0x22>
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	4408      	add	r0, r1
 80053de:	6010      	str	r0, [r2, #0]
 80053e0:	6053      	str	r3, [r2, #4]
 80053e2:	e7da      	b.n	800539a <_free_r+0x22>
 80053e4:	d902      	bls.n	80053ec <_free_r+0x74>
 80053e6:	230c      	movs	r3, #12
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	e7d6      	b.n	800539a <_free_r+0x22>
 80053ec:	6820      	ldr	r0, [r4, #0]
 80053ee:	1821      	adds	r1, r4, r0
 80053f0:	428b      	cmp	r3, r1
 80053f2:	bf01      	itttt	eq
 80053f4:	6819      	ldreq	r1, [r3, #0]
 80053f6:	685b      	ldreq	r3, [r3, #4]
 80053f8:	1809      	addeq	r1, r1, r0
 80053fa:	6021      	streq	r1, [r4, #0]
 80053fc:	6063      	str	r3, [r4, #4]
 80053fe:	6054      	str	r4, [r2, #4]
 8005400:	e7cb      	b.n	800539a <_free_r+0x22>
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	200003d4 	.word	0x200003d4

08005408 <malloc>:
 8005408:	4b02      	ldr	r3, [pc, #8]	@ (8005414 <malloc+0xc>)
 800540a:	4601      	mov	r1, r0
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	f000 b825 	b.w	800545c <_malloc_r>
 8005412:	bf00      	nop
 8005414:	20000018 	.word	0x20000018

08005418 <sbrk_aligned>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4e0f      	ldr	r6, [pc, #60]	@ (8005458 <sbrk_aligned+0x40>)
 800541c:	460c      	mov	r4, r1
 800541e:	6831      	ldr	r1, [r6, #0]
 8005420:	4605      	mov	r5, r0
 8005422:	b911      	cbnz	r1, 800542a <sbrk_aligned+0x12>
 8005424:	f000 fea2 	bl	800616c <_sbrk_r>
 8005428:	6030      	str	r0, [r6, #0]
 800542a:	4621      	mov	r1, r4
 800542c:	4628      	mov	r0, r5
 800542e:	f000 fe9d 	bl	800616c <_sbrk_r>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d103      	bne.n	800543e <sbrk_aligned+0x26>
 8005436:	f04f 34ff 	mov.w	r4, #4294967295
 800543a:	4620      	mov	r0, r4
 800543c:	bd70      	pop	{r4, r5, r6, pc}
 800543e:	1cc4      	adds	r4, r0, #3
 8005440:	f024 0403 	bic.w	r4, r4, #3
 8005444:	42a0      	cmp	r0, r4
 8005446:	d0f8      	beq.n	800543a <sbrk_aligned+0x22>
 8005448:	1a21      	subs	r1, r4, r0
 800544a:	4628      	mov	r0, r5
 800544c:	f000 fe8e 	bl	800616c <_sbrk_r>
 8005450:	3001      	adds	r0, #1
 8005452:	d1f2      	bne.n	800543a <sbrk_aligned+0x22>
 8005454:	e7ef      	b.n	8005436 <sbrk_aligned+0x1e>
 8005456:	bf00      	nop
 8005458:	200003d0 	.word	0x200003d0

0800545c <_malloc_r>:
 800545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005460:	1ccd      	adds	r5, r1, #3
 8005462:	f025 0503 	bic.w	r5, r5, #3
 8005466:	3508      	adds	r5, #8
 8005468:	2d0c      	cmp	r5, #12
 800546a:	bf38      	it	cc
 800546c:	250c      	movcc	r5, #12
 800546e:	2d00      	cmp	r5, #0
 8005470:	4606      	mov	r6, r0
 8005472:	db01      	blt.n	8005478 <_malloc_r+0x1c>
 8005474:	42a9      	cmp	r1, r5
 8005476:	d904      	bls.n	8005482 <_malloc_r+0x26>
 8005478:	230c      	movs	r3, #12
 800547a:	6033      	str	r3, [r6, #0]
 800547c:	2000      	movs	r0, #0
 800547e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005482:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005558 <_malloc_r+0xfc>
 8005486:	f000 f869 	bl	800555c <__malloc_lock>
 800548a:	f8d8 3000 	ldr.w	r3, [r8]
 800548e:	461c      	mov	r4, r3
 8005490:	bb44      	cbnz	r4, 80054e4 <_malloc_r+0x88>
 8005492:	4629      	mov	r1, r5
 8005494:	4630      	mov	r0, r6
 8005496:	f7ff ffbf 	bl	8005418 <sbrk_aligned>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	4604      	mov	r4, r0
 800549e:	d158      	bne.n	8005552 <_malloc_r+0xf6>
 80054a0:	f8d8 4000 	ldr.w	r4, [r8]
 80054a4:	4627      	mov	r7, r4
 80054a6:	2f00      	cmp	r7, #0
 80054a8:	d143      	bne.n	8005532 <_malloc_r+0xd6>
 80054aa:	2c00      	cmp	r4, #0
 80054ac:	d04b      	beq.n	8005546 <_malloc_r+0xea>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	4639      	mov	r1, r7
 80054b2:	4630      	mov	r0, r6
 80054b4:	eb04 0903 	add.w	r9, r4, r3
 80054b8:	f000 fe58 	bl	800616c <_sbrk_r>
 80054bc:	4581      	cmp	r9, r0
 80054be:	d142      	bne.n	8005546 <_malloc_r+0xea>
 80054c0:	6821      	ldr	r1, [r4, #0]
 80054c2:	4630      	mov	r0, r6
 80054c4:	1a6d      	subs	r5, r5, r1
 80054c6:	4629      	mov	r1, r5
 80054c8:	f7ff ffa6 	bl	8005418 <sbrk_aligned>
 80054cc:	3001      	adds	r0, #1
 80054ce:	d03a      	beq.n	8005546 <_malloc_r+0xea>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	442b      	add	r3, r5
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	f8d8 3000 	ldr.w	r3, [r8]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	bb62      	cbnz	r2, 8005538 <_malloc_r+0xdc>
 80054de:	f8c8 7000 	str.w	r7, [r8]
 80054e2:	e00f      	b.n	8005504 <_malloc_r+0xa8>
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	1b52      	subs	r2, r2, r5
 80054e8:	d420      	bmi.n	800552c <_malloc_r+0xd0>
 80054ea:	2a0b      	cmp	r2, #11
 80054ec:	d917      	bls.n	800551e <_malloc_r+0xc2>
 80054ee:	1961      	adds	r1, r4, r5
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	6025      	str	r5, [r4, #0]
 80054f4:	bf18      	it	ne
 80054f6:	6059      	strne	r1, [r3, #4]
 80054f8:	6863      	ldr	r3, [r4, #4]
 80054fa:	bf08      	it	eq
 80054fc:	f8c8 1000 	streq.w	r1, [r8]
 8005500:	5162      	str	r2, [r4, r5]
 8005502:	604b      	str	r3, [r1, #4]
 8005504:	4630      	mov	r0, r6
 8005506:	f000 f82f 	bl	8005568 <__malloc_unlock>
 800550a:	f104 000b 	add.w	r0, r4, #11
 800550e:	1d23      	adds	r3, r4, #4
 8005510:	f020 0007 	bic.w	r0, r0, #7
 8005514:	1ac2      	subs	r2, r0, r3
 8005516:	bf1c      	itt	ne
 8005518:	1a1b      	subne	r3, r3, r0
 800551a:	50a3      	strne	r3, [r4, r2]
 800551c:	e7af      	b.n	800547e <_malloc_r+0x22>
 800551e:	6862      	ldr	r2, [r4, #4]
 8005520:	42a3      	cmp	r3, r4
 8005522:	bf0c      	ite	eq
 8005524:	f8c8 2000 	streq.w	r2, [r8]
 8005528:	605a      	strne	r2, [r3, #4]
 800552a:	e7eb      	b.n	8005504 <_malloc_r+0xa8>
 800552c:	4623      	mov	r3, r4
 800552e:	6864      	ldr	r4, [r4, #4]
 8005530:	e7ae      	b.n	8005490 <_malloc_r+0x34>
 8005532:	463c      	mov	r4, r7
 8005534:	687f      	ldr	r7, [r7, #4]
 8005536:	e7b6      	b.n	80054a6 <_malloc_r+0x4a>
 8005538:	461a      	mov	r2, r3
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	42a3      	cmp	r3, r4
 800553e:	d1fb      	bne.n	8005538 <_malloc_r+0xdc>
 8005540:	2300      	movs	r3, #0
 8005542:	6053      	str	r3, [r2, #4]
 8005544:	e7de      	b.n	8005504 <_malloc_r+0xa8>
 8005546:	230c      	movs	r3, #12
 8005548:	4630      	mov	r0, r6
 800554a:	6033      	str	r3, [r6, #0]
 800554c:	f000 f80c 	bl	8005568 <__malloc_unlock>
 8005550:	e794      	b.n	800547c <_malloc_r+0x20>
 8005552:	6005      	str	r5, [r0, #0]
 8005554:	e7d6      	b.n	8005504 <_malloc_r+0xa8>
 8005556:	bf00      	nop
 8005558:	200003d4 	.word	0x200003d4

0800555c <__malloc_lock>:
 800555c:	4801      	ldr	r0, [pc, #4]	@ (8005564 <__malloc_lock+0x8>)
 800555e:	f7ff b8aa 	b.w	80046b6 <__retarget_lock_acquire_recursive>
 8005562:	bf00      	nop
 8005564:	200003cc 	.word	0x200003cc

08005568 <__malloc_unlock>:
 8005568:	4801      	ldr	r0, [pc, #4]	@ (8005570 <__malloc_unlock+0x8>)
 800556a:	f7ff b8a5 	b.w	80046b8 <__retarget_lock_release_recursive>
 800556e:	bf00      	nop
 8005570:	200003cc 	.word	0x200003cc

08005574 <_Balloc>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	69c6      	ldr	r6, [r0, #28]
 8005578:	4604      	mov	r4, r0
 800557a:	460d      	mov	r5, r1
 800557c:	b976      	cbnz	r6, 800559c <_Balloc+0x28>
 800557e:	2010      	movs	r0, #16
 8005580:	f7ff ff42 	bl	8005408 <malloc>
 8005584:	4602      	mov	r2, r0
 8005586:	61e0      	str	r0, [r4, #28]
 8005588:	b920      	cbnz	r0, 8005594 <_Balloc+0x20>
 800558a:	216b      	movs	r1, #107	@ 0x6b
 800558c:	4b17      	ldr	r3, [pc, #92]	@ (80055ec <_Balloc+0x78>)
 800558e:	4818      	ldr	r0, [pc, #96]	@ (80055f0 <_Balloc+0x7c>)
 8005590:	f000 fe0a 	bl	80061a8 <__assert_func>
 8005594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005598:	6006      	str	r6, [r0, #0]
 800559a:	60c6      	str	r6, [r0, #12]
 800559c:	69e6      	ldr	r6, [r4, #28]
 800559e:	68f3      	ldr	r3, [r6, #12]
 80055a0:	b183      	cbz	r3, 80055c4 <_Balloc+0x50>
 80055a2:	69e3      	ldr	r3, [r4, #28]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055aa:	b9b8      	cbnz	r0, 80055dc <_Balloc+0x68>
 80055ac:	2101      	movs	r1, #1
 80055ae:	fa01 f605 	lsl.w	r6, r1, r5
 80055b2:	1d72      	adds	r2, r6, #5
 80055b4:	4620      	mov	r0, r4
 80055b6:	0092      	lsls	r2, r2, #2
 80055b8:	f000 fe14 	bl	80061e4 <_calloc_r>
 80055bc:	b160      	cbz	r0, 80055d8 <_Balloc+0x64>
 80055be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055c2:	e00e      	b.n	80055e2 <_Balloc+0x6e>
 80055c4:	2221      	movs	r2, #33	@ 0x21
 80055c6:	2104      	movs	r1, #4
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 fe0b 	bl	80061e4 <_calloc_r>
 80055ce:	69e3      	ldr	r3, [r4, #28]
 80055d0:	60f0      	str	r0, [r6, #12]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e4      	bne.n	80055a2 <_Balloc+0x2e>
 80055d8:	2000      	movs	r0, #0
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	6802      	ldr	r2, [r0, #0]
 80055de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055e2:	2300      	movs	r3, #0
 80055e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055e8:	e7f7      	b.n	80055da <_Balloc+0x66>
 80055ea:	bf00      	nop
 80055ec:	080064a7 	.word	0x080064a7
 80055f0:	08006527 	.word	0x08006527

080055f4 <_Bfree>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	69c6      	ldr	r6, [r0, #28]
 80055f8:	4605      	mov	r5, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	b976      	cbnz	r6, 800561c <_Bfree+0x28>
 80055fe:	2010      	movs	r0, #16
 8005600:	f7ff ff02 	bl	8005408 <malloc>
 8005604:	4602      	mov	r2, r0
 8005606:	61e8      	str	r0, [r5, #28]
 8005608:	b920      	cbnz	r0, 8005614 <_Bfree+0x20>
 800560a:	218f      	movs	r1, #143	@ 0x8f
 800560c:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <_Bfree+0x3c>)
 800560e:	4809      	ldr	r0, [pc, #36]	@ (8005634 <_Bfree+0x40>)
 8005610:	f000 fdca 	bl	80061a8 <__assert_func>
 8005614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005618:	6006      	str	r6, [r0, #0]
 800561a:	60c6      	str	r6, [r0, #12]
 800561c:	b13c      	cbz	r4, 800562e <_Bfree+0x3a>
 800561e:	69eb      	ldr	r3, [r5, #28]
 8005620:	6862      	ldr	r2, [r4, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005628:	6021      	str	r1, [r4, #0]
 800562a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	080064a7 	.word	0x080064a7
 8005634:	08006527 	.word	0x08006527

08005638 <__multadd>:
 8005638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563c:	4607      	mov	r7, r0
 800563e:	460c      	mov	r4, r1
 8005640:	461e      	mov	r6, r3
 8005642:	2000      	movs	r0, #0
 8005644:	690d      	ldr	r5, [r1, #16]
 8005646:	f101 0c14 	add.w	ip, r1, #20
 800564a:	f8dc 3000 	ldr.w	r3, [ip]
 800564e:	3001      	adds	r0, #1
 8005650:	b299      	uxth	r1, r3
 8005652:	fb02 6101 	mla	r1, r2, r1, r6
 8005656:	0c1e      	lsrs	r6, r3, #16
 8005658:	0c0b      	lsrs	r3, r1, #16
 800565a:	fb02 3306 	mla	r3, r2, r6, r3
 800565e:	b289      	uxth	r1, r1
 8005660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005664:	4285      	cmp	r5, r0
 8005666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800566a:	f84c 1b04 	str.w	r1, [ip], #4
 800566e:	dcec      	bgt.n	800564a <__multadd+0x12>
 8005670:	b30e      	cbz	r6, 80056b6 <__multadd+0x7e>
 8005672:	68a3      	ldr	r3, [r4, #8]
 8005674:	42ab      	cmp	r3, r5
 8005676:	dc19      	bgt.n	80056ac <__multadd+0x74>
 8005678:	6861      	ldr	r1, [r4, #4]
 800567a:	4638      	mov	r0, r7
 800567c:	3101      	adds	r1, #1
 800567e:	f7ff ff79 	bl	8005574 <_Balloc>
 8005682:	4680      	mov	r8, r0
 8005684:	b928      	cbnz	r0, 8005692 <__multadd+0x5a>
 8005686:	4602      	mov	r2, r0
 8005688:	21ba      	movs	r1, #186	@ 0xba
 800568a:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <__multadd+0x84>)
 800568c:	480c      	ldr	r0, [pc, #48]	@ (80056c0 <__multadd+0x88>)
 800568e:	f000 fd8b 	bl	80061a8 <__assert_func>
 8005692:	6922      	ldr	r2, [r4, #16]
 8005694:	f104 010c 	add.w	r1, r4, #12
 8005698:	3202      	adds	r2, #2
 800569a:	0092      	lsls	r2, r2, #2
 800569c:	300c      	adds	r0, #12
 800569e:	f000 fd75 	bl	800618c <memcpy>
 80056a2:	4621      	mov	r1, r4
 80056a4:	4638      	mov	r0, r7
 80056a6:	f7ff ffa5 	bl	80055f4 <_Bfree>
 80056aa:	4644      	mov	r4, r8
 80056ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056b0:	3501      	adds	r5, #1
 80056b2:	615e      	str	r6, [r3, #20]
 80056b4:	6125      	str	r5, [r4, #16]
 80056b6:	4620      	mov	r0, r4
 80056b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056bc:	08006516 	.word	0x08006516
 80056c0:	08006527 	.word	0x08006527

080056c4 <__hi0bits>:
 80056c4:	4603      	mov	r3, r0
 80056c6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80056ca:	bf3a      	itte	cc
 80056cc:	0403      	lslcc	r3, r0, #16
 80056ce:	2010      	movcc	r0, #16
 80056d0:	2000      	movcs	r0, #0
 80056d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056d6:	bf3c      	itt	cc
 80056d8:	021b      	lslcc	r3, r3, #8
 80056da:	3008      	addcc	r0, #8
 80056dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056e0:	bf3c      	itt	cc
 80056e2:	011b      	lslcc	r3, r3, #4
 80056e4:	3004      	addcc	r0, #4
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ea:	bf3c      	itt	cc
 80056ec:	009b      	lslcc	r3, r3, #2
 80056ee:	3002      	addcc	r0, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	db05      	blt.n	8005700 <__hi0bits+0x3c>
 80056f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80056f8:	f100 0001 	add.w	r0, r0, #1
 80056fc:	bf08      	it	eq
 80056fe:	2020      	moveq	r0, #32
 8005700:	4770      	bx	lr

08005702 <__lo0bits>:
 8005702:	6803      	ldr	r3, [r0, #0]
 8005704:	4602      	mov	r2, r0
 8005706:	f013 0007 	ands.w	r0, r3, #7
 800570a:	d00b      	beq.n	8005724 <__lo0bits+0x22>
 800570c:	07d9      	lsls	r1, r3, #31
 800570e:	d421      	bmi.n	8005754 <__lo0bits+0x52>
 8005710:	0798      	lsls	r0, r3, #30
 8005712:	bf49      	itett	mi
 8005714:	085b      	lsrmi	r3, r3, #1
 8005716:	089b      	lsrpl	r3, r3, #2
 8005718:	2001      	movmi	r0, #1
 800571a:	6013      	strmi	r3, [r2, #0]
 800571c:	bf5c      	itt	pl
 800571e:	2002      	movpl	r0, #2
 8005720:	6013      	strpl	r3, [r2, #0]
 8005722:	4770      	bx	lr
 8005724:	b299      	uxth	r1, r3
 8005726:	b909      	cbnz	r1, 800572c <__lo0bits+0x2a>
 8005728:	2010      	movs	r0, #16
 800572a:	0c1b      	lsrs	r3, r3, #16
 800572c:	b2d9      	uxtb	r1, r3
 800572e:	b909      	cbnz	r1, 8005734 <__lo0bits+0x32>
 8005730:	3008      	adds	r0, #8
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	0719      	lsls	r1, r3, #28
 8005736:	bf04      	itt	eq
 8005738:	091b      	lsreq	r3, r3, #4
 800573a:	3004      	addeq	r0, #4
 800573c:	0799      	lsls	r1, r3, #30
 800573e:	bf04      	itt	eq
 8005740:	089b      	lsreq	r3, r3, #2
 8005742:	3002      	addeq	r0, #2
 8005744:	07d9      	lsls	r1, r3, #31
 8005746:	d403      	bmi.n	8005750 <__lo0bits+0x4e>
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	f100 0001 	add.w	r0, r0, #1
 800574e:	d003      	beq.n	8005758 <__lo0bits+0x56>
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	4770      	bx	lr
 8005754:	2000      	movs	r0, #0
 8005756:	4770      	bx	lr
 8005758:	2020      	movs	r0, #32
 800575a:	4770      	bx	lr

0800575c <__i2b>:
 800575c:	b510      	push	{r4, lr}
 800575e:	460c      	mov	r4, r1
 8005760:	2101      	movs	r1, #1
 8005762:	f7ff ff07 	bl	8005574 <_Balloc>
 8005766:	4602      	mov	r2, r0
 8005768:	b928      	cbnz	r0, 8005776 <__i2b+0x1a>
 800576a:	f240 1145 	movw	r1, #325	@ 0x145
 800576e:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <__i2b+0x24>)
 8005770:	4804      	ldr	r0, [pc, #16]	@ (8005784 <__i2b+0x28>)
 8005772:	f000 fd19 	bl	80061a8 <__assert_func>
 8005776:	2301      	movs	r3, #1
 8005778:	6144      	str	r4, [r0, #20]
 800577a:	6103      	str	r3, [r0, #16]
 800577c:	bd10      	pop	{r4, pc}
 800577e:	bf00      	nop
 8005780:	08006516 	.word	0x08006516
 8005784:	08006527 	.word	0x08006527

08005788 <__multiply>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	4614      	mov	r4, r2
 800578e:	690a      	ldr	r2, [r1, #16]
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	460f      	mov	r7, r1
 8005794:	429a      	cmp	r2, r3
 8005796:	bfa2      	ittt	ge
 8005798:	4623      	movge	r3, r4
 800579a:	460c      	movge	r4, r1
 800579c:	461f      	movge	r7, r3
 800579e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80057a2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	6861      	ldr	r1, [r4, #4]
 80057aa:	eb0a 0609 	add.w	r6, sl, r9
 80057ae:	42b3      	cmp	r3, r6
 80057b0:	b085      	sub	sp, #20
 80057b2:	bfb8      	it	lt
 80057b4:	3101      	addlt	r1, #1
 80057b6:	f7ff fedd 	bl	8005574 <_Balloc>
 80057ba:	b930      	cbnz	r0, 80057ca <__multiply+0x42>
 80057bc:	4602      	mov	r2, r0
 80057be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80057c2:	4b43      	ldr	r3, [pc, #268]	@ (80058d0 <__multiply+0x148>)
 80057c4:	4843      	ldr	r0, [pc, #268]	@ (80058d4 <__multiply+0x14c>)
 80057c6:	f000 fcef 	bl	80061a8 <__assert_func>
 80057ca:	f100 0514 	add.w	r5, r0, #20
 80057ce:	462b      	mov	r3, r5
 80057d0:	2200      	movs	r2, #0
 80057d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057d6:	4543      	cmp	r3, r8
 80057d8:	d321      	bcc.n	800581e <__multiply+0x96>
 80057da:	f107 0114 	add.w	r1, r7, #20
 80057de:	f104 0214 	add.w	r2, r4, #20
 80057e2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80057e6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	1b13      	subs	r3, r2, r4
 80057ee:	3b15      	subs	r3, #21
 80057f0:	f023 0303 	bic.w	r3, r3, #3
 80057f4:	3304      	adds	r3, #4
 80057f6:	f104 0715 	add.w	r7, r4, #21
 80057fa:	42ba      	cmp	r2, r7
 80057fc:	bf38      	it	cc
 80057fe:	2304      	movcc	r3, #4
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	9b02      	ldr	r3, [sp, #8]
 8005804:	9103      	str	r1, [sp, #12]
 8005806:	428b      	cmp	r3, r1
 8005808:	d80c      	bhi.n	8005824 <__multiply+0x9c>
 800580a:	2e00      	cmp	r6, #0
 800580c:	dd03      	ble.n	8005816 <__multiply+0x8e>
 800580e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005812:	2b00      	cmp	r3, #0
 8005814:	d05a      	beq.n	80058cc <__multiply+0x144>
 8005816:	6106      	str	r6, [r0, #16]
 8005818:	b005      	add	sp, #20
 800581a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581e:	f843 2b04 	str.w	r2, [r3], #4
 8005822:	e7d8      	b.n	80057d6 <__multiply+0x4e>
 8005824:	f8b1 a000 	ldrh.w	sl, [r1]
 8005828:	f1ba 0f00 	cmp.w	sl, #0
 800582c:	d023      	beq.n	8005876 <__multiply+0xee>
 800582e:	46a9      	mov	r9, r5
 8005830:	f04f 0c00 	mov.w	ip, #0
 8005834:	f104 0e14 	add.w	lr, r4, #20
 8005838:	f85e 7b04 	ldr.w	r7, [lr], #4
 800583c:	f8d9 3000 	ldr.w	r3, [r9]
 8005840:	fa1f fb87 	uxth.w	fp, r7
 8005844:	b29b      	uxth	r3, r3
 8005846:	fb0a 330b 	mla	r3, sl, fp, r3
 800584a:	4463      	add	r3, ip
 800584c:	f8d9 c000 	ldr.w	ip, [r9]
 8005850:	0c3f      	lsrs	r7, r7, #16
 8005852:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005856:	fb0a c707 	mla	r7, sl, r7, ip
 800585a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800585e:	b29b      	uxth	r3, r3
 8005860:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005864:	4572      	cmp	r2, lr
 8005866:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800586a:	f849 3b04 	str.w	r3, [r9], #4
 800586e:	d8e3      	bhi.n	8005838 <__multiply+0xb0>
 8005870:	9b01      	ldr	r3, [sp, #4]
 8005872:	f845 c003 	str.w	ip, [r5, r3]
 8005876:	9b03      	ldr	r3, [sp, #12]
 8005878:	3104      	adds	r1, #4
 800587a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800587e:	f1b9 0f00 	cmp.w	r9, #0
 8005882:	d021      	beq.n	80058c8 <__multiply+0x140>
 8005884:	46ae      	mov	lr, r5
 8005886:	f04f 0a00 	mov.w	sl, #0
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	f104 0c14 	add.w	ip, r4, #20
 8005890:	f8bc b000 	ldrh.w	fp, [ip]
 8005894:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005898:	b29b      	uxth	r3, r3
 800589a:	fb09 770b 	mla	r7, r9, fp, r7
 800589e:	4457      	add	r7, sl
 80058a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058a4:	f84e 3b04 	str.w	r3, [lr], #4
 80058a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058b0:	f8be 3000 	ldrh.w	r3, [lr]
 80058b4:	4562      	cmp	r2, ip
 80058b6:	fb09 330a 	mla	r3, r9, sl, r3
 80058ba:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80058be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058c2:	d8e5      	bhi.n	8005890 <__multiply+0x108>
 80058c4:	9f01      	ldr	r7, [sp, #4]
 80058c6:	51eb      	str	r3, [r5, r7]
 80058c8:	3504      	adds	r5, #4
 80058ca:	e79a      	b.n	8005802 <__multiply+0x7a>
 80058cc:	3e01      	subs	r6, #1
 80058ce:	e79c      	b.n	800580a <__multiply+0x82>
 80058d0:	08006516 	.word	0x08006516
 80058d4:	08006527 	.word	0x08006527

080058d8 <__pow5mult>:
 80058d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058dc:	4615      	mov	r5, r2
 80058de:	f012 0203 	ands.w	r2, r2, #3
 80058e2:	4607      	mov	r7, r0
 80058e4:	460e      	mov	r6, r1
 80058e6:	d007      	beq.n	80058f8 <__pow5mult+0x20>
 80058e8:	4c25      	ldr	r4, [pc, #148]	@ (8005980 <__pow5mult+0xa8>)
 80058ea:	3a01      	subs	r2, #1
 80058ec:	2300      	movs	r3, #0
 80058ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058f2:	f7ff fea1 	bl	8005638 <__multadd>
 80058f6:	4606      	mov	r6, r0
 80058f8:	10ad      	asrs	r5, r5, #2
 80058fa:	d03d      	beq.n	8005978 <__pow5mult+0xa0>
 80058fc:	69fc      	ldr	r4, [r7, #28]
 80058fe:	b97c      	cbnz	r4, 8005920 <__pow5mult+0x48>
 8005900:	2010      	movs	r0, #16
 8005902:	f7ff fd81 	bl	8005408 <malloc>
 8005906:	4602      	mov	r2, r0
 8005908:	61f8      	str	r0, [r7, #28]
 800590a:	b928      	cbnz	r0, 8005918 <__pow5mult+0x40>
 800590c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005910:	4b1c      	ldr	r3, [pc, #112]	@ (8005984 <__pow5mult+0xac>)
 8005912:	481d      	ldr	r0, [pc, #116]	@ (8005988 <__pow5mult+0xb0>)
 8005914:	f000 fc48 	bl	80061a8 <__assert_func>
 8005918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800591c:	6004      	str	r4, [r0, #0]
 800591e:	60c4      	str	r4, [r0, #12]
 8005920:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005928:	b94c      	cbnz	r4, 800593e <__pow5mult+0x66>
 800592a:	f240 2171 	movw	r1, #625	@ 0x271
 800592e:	4638      	mov	r0, r7
 8005930:	f7ff ff14 	bl	800575c <__i2b>
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	f8c8 0008 	str.w	r0, [r8, #8]
 800593c:	6003      	str	r3, [r0, #0]
 800593e:	f04f 0900 	mov.w	r9, #0
 8005942:	07eb      	lsls	r3, r5, #31
 8005944:	d50a      	bpl.n	800595c <__pow5mult+0x84>
 8005946:	4631      	mov	r1, r6
 8005948:	4622      	mov	r2, r4
 800594a:	4638      	mov	r0, r7
 800594c:	f7ff ff1c 	bl	8005788 <__multiply>
 8005950:	4680      	mov	r8, r0
 8005952:	4631      	mov	r1, r6
 8005954:	4638      	mov	r0, r7
 8005956:	f7ff fe4d 	bl	80055f4 <_Bfree>
 800595a:	4646      	mov	r6, r8
 800595c:	106d      	asrs	r5, r5, #1
 800595e:	d00b      	beq.n	8005978 <__pow5mult+0xa0>
 8005960:	6820      	ldr	r0, [r4, #0]
 8005962:	b938      	cbnz	r0, 8005974 <__pow5mult+0x9c>
 8005964:	4622      	mov	r2, r4
 8005966:	4621      	mov	r1, r4
 8005968:	4638      	mov	r0, r7
 800596a:	f7ff ff0d 	bl	8005788 <__multiply>
 800596e:	6020      	str	r0, [r4, #0]
 8005970:	f8c0 9000 	str.w	r9, [r0]
 8005974:	4604      	mov	r4, r0
 8005976:	e7e4      	b.n	8005942 <__pow5mult+0x6a>
 8005978:	4630      	mov	r0, r6
 800597a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597e:	bf00      	nop
 8005980:	08006580 	.word	0x08006580
 8005984:	080064a7 	.word	0x080064a7
 8005988:	08006527 	.word	0x08006527

0800598c <__lshift>:
 800598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	460c      	mov	r4, r1
 8005992:	4607      	mov	r7, r0
 8005994:	4691      	mov	r9, r2
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	6849      	ldr	r1, [r1, #4]
 800599a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800599e:	68a3      	ldr	r3, [r4, #8]
 80059a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059a4:	f108 0601 	add.w	r6, r8, #1
 80059a8:	42b3      	cmp	r3, r6
 80059aa:	db0b      	blt.n	80059c4 <__lshift+0x38>
 80059ac:	4638      	mov	r0, r7
 80059ae:	f7ff fde1 	bl	8005574 <_Balloc>
 80059b2:	4605      	mov	r5, r0
 80059b4:	b948      	cbnz	r0, 80059ca <__lshift+0x3e>
 80059b6:	4602      	mov	r2, r0
 80059b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80059bc:	4b27      	ldr	r3, [pc, #156]	@ (8005a5c <__lshift+0xd0>)
 80059be:	4828      	ldr	r0, [pc, #160]	@ (8005a60 <__lshift+0xd4>)
 80059c0:	f000 fbf2 	bl	80061a8 <__assert_func>
 80059c4:	3101      	adds	r1, #1
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	e7ee      	b.n	80059a8 <__lshift+0x1c>
 80059ca:	2300      	movs	r3, #0
 80059cc:	f100 0114 	add.w	r1, r0, #20
 80059d0:	f100 0210 	add.w	r2, r0, #16
 80059d4:	4618      	mov	r0, r3
 80059d6:	4553      	cmp	r3, sl
 80059d8:	db33      	blt.n	8005a42 <__lshift+0xb6>
 80059da:	6920      	ldr	r0, [r4, #16]
 80059dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059e0:	f104 0314 	add.w	r3, r4, #20
 80059e4:	f019 091f 	ands.w	r9, r9, #31
 80059e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059f0:	d02b      	beq.n	8005a4a <__lshift+0xbe>
 80059f2:	468a      	mov	sl, r1
 80059f4:	2200      	movs	r2, #0
 80059f6:	f1c9 0e20 	rsb	lr, r9, #32
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	fa00 f009 	lsl.w	r0, r0, r9
 8005a00:	4310      	orrs	r0, r2
 8005a02:	f84a 0b04 	str.w	r0, [sl], #4
 8005a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a0a:	459c      	cmp	ip, r3
 8005a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a10:	d8f3      	bhi.n	80059fa <__lshift+0x6e>
 8005a12:	ebac 0304 	sub.w	r3, ip, r4
 8005a16:	3b15      	subs	r3, #21
 8005a18:	f023 0303 	bic.w	r3, r3, #3
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	f104 0015 	add.w	r0, r4, #21
 8005a22:	4584      	cmp	ip, r0
 8005a24:	bf38      	it	cc
 8005a26:	2304      	movcc	r3, #4
 8005a28:	50ca      	str	r2, [r1, r3]
 8005a2a:	b10a      	cbz	r2, 8005a30 <__lshift+0xa4>
 8005a2c:	f108 0602 	add.w	r6, r8, #2
 8005a30:	3e01      	subs	r6, #1
 8005a32:	4638      	mov	r0, r7
 8005a34:	4621      	mov	r1, r4
 8005a36:	612e      	str	r6, [r5, #16]
 8005a38:	f7ff fddc 	bl	80055f4 <_Bfree>
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a46:	3301      	adds	r3, #1
 8005a48:	e7c5      	b.n	80059d6 <__lshift+0x4a>
 8005a4a:	3904      	subs	r1, #4
 8005a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a50:	459c      	cmp	ip, r3
 8005a52:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a56:	d8f9      	bhi.n	8005a4c <__lshift+0xc0>
 8005a58:	e7ea      	b.n	8005a30 <__lshift+0xa4>
 8005a5a:	bf00      	nop
 8005a5c:	08006516 	.word	0x08006516
 8005a60:	08006527 	.word	0x08006527

08005a64 <__mcmp>:
 8005a64:	4603      	mov	r3, r0
 8005a66:	690a      	ldr	r2, [r1, #16]
 8005a68:	6900      	ldr	r0, [r0, #16]
 8005a6a:	b530      	push	{r4, r5, lr}
 8005a6c:	1a80      	subs	r0, r0, r2
 8005a6e:	d10e      	bne.n	8005a8e <__mcmp+0x2a>
 8005a70:	3314      	adds	r3, #20
 8005a72:	3114      	adds	r1, #20
 8005a74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a84:	4295      	cmp	r5, r2
 8005a86:	d003      	beq.n	8005a90 <__mcmp+0x2c>
 8005a88:	d205      	bcs.n	8005a96 <__mcmp+0x32>
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	bd30      	pop	{r4, r5, pc}
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	d3f3      	bcc.n	8005a7c <__mcmp+0x18>
 8005a94:	e7fb      	b.n	8005a8e <__mcmp+0x2a>
 8005a96:	2001      	movs	r0, #1
 8005a98:	e7f9      	b.n	8005a8e <__mcmp+0x2a>
	...

08005a9c <__mdiff>:
 8005a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	4689      	mov	r9, r1
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4648      	mov	r0, r9
 8005aa8:	4614      	mov	r4, r2
 8005aaa:	f7ff ffdb 	bl	8005a64 <__mcmp>
 8005aae:	1e05      	subs	r5, r0, #0
 8005ab0:	d112      	bne.n	8005ad8 <__mdiff+0x3c>
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7ff fd5d 	bl	8005574 <_Balloc>
 8005aba:	4602      	mov	r2, r0
 8005abc:	b928      	cbnz	r0, 8005aca <__mdiff+0x2e>
 8005abe:	f240 2137 	movw	r1, #567	@ 0x237
 8005ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8005bbc <__mdiff+0x120>)
 8005ac4:	483e      	ldr	r0, [pc, #248]	@ (8005bc0 <__mdiff+0x124>)
 8005ac6:	f000 fb6f 	bl	80061a8 <__assert_func>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	b003      	add	sp, #12
 8005ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad8:	bfbc      	itt	lt
 8005ada:	464b      	movlt	r3, r9
 8005adc:	46a1      	movlt	r9, r4
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ae4:	bfba      	itte	lt
 8005ae6:	461c      	movlt	r4, r3
 8005ae8:	2501      	movlt	r5, #1
 8005aea:	2500      	movge	r5, #0
 8005aec:	f7ff fd42 	bl	8005574 <_Balloc>
 8005af0:	4602      	mov	r2, r0
 8005af2:	b918      	cbnz	r0, 8005afc <__mdiff+0x60>
 8005af4:	f240 2145 	movw	r1, #581	@ 0x245
 8005af8:	4b30      	ldr	r3, [pc, #192]	@ (8005bbc <__mdiff+0x120>)
 8005afa:	e7e3      	b.n	8005ac4 <__mdiff+0x28>
 8005afc:	f100 0b14 	add.w	fp, r0, #20
 8005b00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b04:	f109 0310 	add.w	r3, r9, #16
 8005b08:	60c5      	str	r5, [r0, #12]
 8005b0a:	f04f 0c00 	mov.w	ip, #0
 8005b0e:	f109 0514 	add.w	r5, r9, #20
 8005b12:	46d9      	mov	r9, fp
 8005b14:	6926      	ldr	r6, [r4, #16]
 8005b16:	f104 0e14 	add.w	lr, r4, #20
 8005b1a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b1e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	9b01      	ldr	r3, [sp, #4]
 8005b26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b2e:	b281      	uxth	r1, r0
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	fa1f f38a 	uxth.w	r3, sl
 8005b36:	1a5b      	subs	r3, r3, r1
 8005b38:	0c00      	lsrs	r0, r0, #16
 8005b3a:	4463      	add	r3, ip
 8005b3c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b40:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b4a:	4576      	cmp	r6, lr
 8005b4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b50:	f849 3b04 	str.w	r3, [r9], #4
 8005b54:	d8e6      	bhi.n	8005b24 <__mdiff+0x88>
 8005b56:	1b33      	subs	r3, r6, r4
 8005b58:	3b15      	subs	r3, #21
 8005b5a:	f023 0303 	bic.w	r3, r3, #3
 8005b5e:	3415      	adds	r4, #21
 8005b60:	3304      	adds	r3, #4
 8005b62:	42a6      	cmp	r6, r4
 8005b64:	bf38      	it	cc
 8005b66:	2304      	movcc	r3, #4
 8005b68:	441d      	add	r5, r3
 8005b6a:	445b      	add	r3, fp
 8005b6c:	461e      	mov	r6, r3
 8005b6e:	462c      	mov	r4, r5
 8005b70:	4544      	cmp	r4, r8
 8005b72:	d30e      	bcc.n	8005b92 <__mdiff+0xf6>
 8005b74:	f108 0103 	add.w	r1, r8, #3
 8005b78:	1b49      	subs	r1, r1, r5
 8005b7a:	f021 0103 	bic.w	r1, r1, #3
 8005b7e:	3d03      	subs	r5, #3
 8005b80:	45a8      	cmp	r8, r5
 8005b82:	bf38      	it	cc
 8005b84:	2100      	movcc	r1, #0
 8005b86:	440b      	add	r3, r1
 8005b88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b8c:	b199      	cbz	r1, 8005bb6 <__mdiff+0x11a>
 8005b8e:	6117      	str	r7, [r2, #16]
 8005b90:	e79e      	b.n	8005ad0 <__mdiff+0x34>
 8005b92:	46e6      	mov	lr, ip
 8005b94:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b98:	fa1f fc81 	uxth.w	ip, r1
 8005b9c:	44f4      	add	ip, lr
 8005b9e:	0c08      	lsrs	r0, r1, #16
 8005ba0:	4471      	add	r1, lr
 8005ba2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ba6:	b289      	uxth	r1, r1
 8005ba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005bac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005bb0:	f846 1b04 	str.w	r1, [r6], #4
 8005bb4:	e7dc      	b.n	8005b70 <__mdiff+0xd4>
 8005bb6:	3f01      	subs	r7, #1
 8005bb8:	e7e6      	b.n	8005b88 <__mdiff+0xec>
 8005bba:	bf00      	nop
 8005bbc:	08006516 	.word	0x08006516
 8005bc0:	08006527 	.word	0x08006527

08005bc4 <__d2b>:
 8005bc4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005bc8:	2101      	movs	r1, #1
 8005bca:	4690      	mov	r8, r2
 8005bcc:	4699      	mov	r9, r3
 8005bce:	9e08      	ldr	r6, [sp, #32]
 8005bd0:	f7ff fcd0 	bl	8005574 <_Balloc>
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	b930      	cbnz	r0, 8005be6 <__d2b+0x22>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	f240 310f 	movw	r1, #783	@ 0x30f
 8005bde:	4b23      	ldr	r3, [pc, #140]	@ (8005c6c <__d2b+0xa8>)
 8005be0:	4823      	ldr	r0, [pc, #140]	@ (8005c70 <__d2b+0xac>)
 8005be2:	f000 fae1 	bl	80061a8 <__assert_func>
 8005be6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005bea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bee:	b10d      	cbz	r5, 8005bf4 <__d2b+0x30>
 8005bf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	f1b8 0300 	subs.w	r3, r8, #0
 8005bfa:	d024      	beq.n	8005c46 <__d2b+0x82>
 8005bfc:	4668      	mov	r0, sp
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	f7ff fd7f 	bl	8005702 <__lo0bits>
 8005c04:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c08:	b1d8      	cbz	r0, 8005c42 <__d2b+0x7e>
 8005c0a:	f1c0 0320 	rsb	r3, r0, #32
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	430b      	orrs	r3, r1
 8005c14:	40c2      	lsrs	r2, r0
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	9201      	str	r2, [sp, #4]
 8005c1a:	9b01      	ldr	r3, [sp, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf0c      	ite	eq
 8005c20:	2201      	moveq	r2, #1
 8005c22:	2202      	movne	r2, #2
 8005c24:	61a3      	str	r3, [r4, #24]
 8005c26:	6122      	str	r2, [r4, #16]
 8005c28:	b1ad      	cbz	r5, 8005c56 <__d2b+0x92>
 8005c2a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005c2e:	4405      	add	r5, r0
 8005c30:	6035      	str	r5, [r6, #0]
 8005c32:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c38:	6018      	str	r0, [r3, #0]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	b002      	add	sp, #8
 8005c3e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005c42:	6161      	str	r1, [r4, #20]
 8005c44:	e7e9      	b.n	8005c1a <__d2b+0x56>
 8005c46:	a801      	add	r0, sp, #4
 8005c48:	f7ff fd5b 	bl	8005702 <__lo0bits>
 8005c4c:	9b01      	ldr	r3, [sp, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	6163      	str	r3, [r4, #20]
 8005c52:	3020      	adds	r0, #32
 8005c54:	e7e7      	b.n	8005c26 <__d2b+0x62>
 8005c56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c5e:	6030      	str	r0, [r6, #0]
 8005c60:	6918      	ldr	r0, [r3, #16]
 8005c62:	f7ff fd2f 	bl	80056c4 <__hi0bits>
 8005c66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c6a:	e7e4      	b.n	8005c36 <__d2b+0x72>
 8005c6c:	08006516 	.word	0x08006516
 8005c70:	08006527 	.word	0x08006527

08005c74 <__sfputc_r>:
 8005c74:	6893      	ldr	r3, [r2, #8]
 8005c76:	b410      	push	{r4}
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	6093      	str	r3, [r2, #8]
 8005c7e:	da07      	bge.n	8005c90 <__sfputc_r+0x1c>
 8005c80:	6994      	ldr	r4, [r2, #24]
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	db01      	blt.n	8005c8a <__sfputc_r+0x16>
 8005c86:	290a      	cmp	r1, #10
 8005c88:	d102      	bne.n	8005c90 <__sfputc_r+0x1c>
 8005c8a:	bc10      	pop	{r4}
 8005c8c:	f000 b9da 	b.w	8006044 <__swbuf_r>
 8005c90:	6813      	ldr	r3, [r2, #0]
 8005c92:	1c58      	adds	r0, r3, #1
 8005c94:	6010      	str	r0, [r2, #0]
 8005c96:	7019      	strb	r1, [r3, #0]
 8005c98:	4608      	mov	r0, r1
 8005c9a:	bc10      	pop	{r4}
 8005c9c:	4770      	bx	lr

08005c9e <__sfputs_r>:
 8005c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	460f      	mov	r7, r1
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	18d5      	adds	r5, r2, r3
 8005ca8:	42ac      	cmp	r4, r5
 8005caa:	d101      	bne.n	8005cb0 <__sfputs_r+0x12>
 8005cac:	2000      	movs	r0, #0
 8005cae:	e007      	b.n	8005cc0 <__sfputs_r+0x22>
 8005cb0:	463a      	mov	r2, r7
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb8:	f7ff ffdc 	bl	8005c74 <__sfputc_r>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d1f3      	bne.n	8005ca8 <__sfputs_r+0xa>
 8005cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cc4 <_vfiprintf_r>:
 8005cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc8:	460d      	mov	r5, r1
 8005cca:	4614      	mov	r4, r2
 8005ccc:	4698      	mov	r8, r3
 8005cce:	4606      	mov	r6, r0
 8005cd0:	b09d      	sub	sp, #116	@ 0x74
 8005cd2:	b118      	cbz	r0, 8005cdc <_vfiprintf_r+0x18>
 8005cd4:	6a03      	ldr	r3, [r0, #32]
 8005cd6:	b90b      	cbnz	r3, 8005cdc <_vfiprintf_r+0x18>
 8005cd8:	f7fe fbe4 	bl	80044a4 <__sinit>
 8005cdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	d405      	bmi.n	8005cee <_vfiprintf_r+0x2a>
 8005ce2:	89ab      	ldrh	r3, [r5, #12]
 8005ce4:	059a      	lsls	r2, r3, #22
 8005ce6:	d402      	bmi.n	8005cee <_vfiprintf_r+0x2a>
 8005ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cea:	f7fe fce4 	bl	80046b6 <__retarget_lock_acquire_recursive>
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	071b      	lsls	r3, r3, #28
 8005cf2:	d501      	bpl.n	8005cf8 <_vfiprintf_r+0x34>
 8005cf4:	692b      	ldr	r3, [r5, #16]
 8005cf6:	b99b      	cbnz	r3, 8005d20 <_vfiprintf_r+0x5c>
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f000 f9e0 	bl	80060c0 <__swsetup_r>
 8005d00:	b170      	cbz	r0, 8005d20 <_vfiprintf_r+0x5c>
 8005d02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d04:	07dc      	lsls	r4, r3, #31
 8005d06:	d504      	bpl.n	8005d12 <_vfiprintf_r+0x4e>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	b01d      	add	sp, #116	@ 0x74
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	89ab      	ldrh	r3, [r5, #12]
 8005d14:	0598      	lsls	r0, r3, #22
 8005d16:	d4f7      	bmi.n	8005d08 <_vfiprintf_r+0x44>
 8005d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d1a:	f7fe fccd 	bl	80046b8 <__retarget_lock_release_recursive>
 8005d1e:	e7f3      	b.n	8005d08 <_vfiprintf_r+0x44>
 8005d20:	2300      	movs	r3, #0
 8005d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d24:	2320      	movs	r3, #32
 8005d26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d2a:	2330      	movs	r3, #48	@ 0x30
 8005d2c:	f04f 0901 	mov.w	r9, #1
 8005d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d34:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005ee0 <_vfiprintf_r+0x21c>
 8005d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d3c:	4623      	mov	r3, r4
 8005d3e:	469a      	mov	sl, r3
 8005d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d44:	b10a      	cbz	r2, 8005d4a <_vfiprintf_r+0x86>
 8005d46:	2a25      	cmp	r2, #37	@ 0x25
 8005d48:	d1f9      	bne.n	8005d3e <_vfiprintf_r+0x7a>
 8005d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8005d4e:	d00b      	beq.n	8005d68 <_vfiprintf_r+0xa4>
 8005d50:	465b      	mov	r3, fp
 8005d52:	4622      	mov	r2, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	4630      	mov	r0, r6
 8005d58:	f7ff ffa1 	bl	8005c9e <__sfputs_r>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	f000 80a7 	beq.w	8005eb0 <_vfiprintf_r+0x1ec>
 8005d62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d64:	445a      	add	r2, fp
 8005d66:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d68:	f89a 3000 	ldrb.w	r3, [sl]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 809f 	beq.w	8005eb0 <_vfiprintf_r+0x1ec>
 8005d72:	2300      	movs	r3, #0
 8005d74:	f04f 32ff 	mov.w	r2, #4294967295
 8005d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d7c:	f10a 0a01 	add.w	sl, sl, #1
 8005d80:	9304      	str	r3, [sp, #16]
 8005d82:	9307      	str	r3, [sp, #28]
 8005d84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d88:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d8a:	4654      	mov	r4, sl
 8005d8c:	2205      	movs	r2, #5
 8005d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d92:	4853      	ldr	r0, [pc, #332]	@ (8005ee0 <_vfiprintf_r+0x21c>)
 8005d94:	f7fe fc91 	bl	80046ba <memchr>
 8005d98:	9a04      	ldr	r2, [sp, #16]
 8005d9a:	b9d8      	cbnz	r0, 8005dd4 <_vfiprintf_r+0x110>
 8005d9c:	06d1      	lsls	r1, r2, #27
 8005d9e:	bf44      	itt	mi
 8005da0:	2320      	movmi	r3, #32
 8005da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005da6:	0713      	lsls	r3, r2, #28
 8005da8:	bf44      	itt	mi
 8005daa:	232b      	movmi	r3, #43	@ 0x2b
 8005dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005db0:	f89a 3000 	ldrb.w	r3, [sl]
 8005db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005db6:	d015      	beq.n	8005de4 <_vfiprintf_r+0x120>
 8005db8:	4654      	mov	r4, sl
 8005dba:	2000      	movs	r0, #0
 8005dbc:	f04f 0c0a 	mov.w	ip, #10
 8005dc0:	9a07      	ldr	r2, [sp, #28]
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dc8:	3b30      	subs	r3, #48	@ 0x30
 8005dca:	2b09      	cmp	r3, #9
 8005dcc:	d94b      	bls.n	8005e66 <_vfiprintf_r+0x1a2>
 8005dce:	b1b0      	cbz	r0, 8005dfe <_vfiprintf_r+0x13a>
 8005dd0:	9207      	str	r2, [sp, #28]
 8005dd2:	e014      	b.n	8005dfe <_vfiprintf_r+0x13a>
 8005dd4:	eba0 0308 	sub.w	r3, r0, r8
 8005dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	46a2      	mov	sl, r4
 8005de0:	9304      	str	r3, [sp, #16]
 8005de2:	e7d2      	b.n	8005d8a <_vfiprintf_r+0xc6>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	1d19      	adds	r1, r3, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	9103      	str	r1, [sp, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bfbb      	ittet	lt
 8005df0:	425b      	neglt	r3, r3
 8005df2:	f042 0202 	orrlt.w	r2, r2, #2
 8005df6:	9307      	strge	r3, [sp, #28]
 8005df8:	9307      	strlt	r3, [sp, #28]
 8005dfa:	bfb8      	it	lt
 8005dfc:	9204      	strlt	r2, [sp, #16]
 8005dfe:	7823      	ldrb	r3, [r4, #0]
 8005e00:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e02:	d10a      	bne.n	8005e1a <_vfiprintf_r+0x156>
 8005e04:	7863      	ldrb	r3, [r4, #1]
 8005e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e08:	d132      	bne.n	8005e70 <_vfiprintf_r+0x1ac>
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	3402      	adds	r4, #2
 8005e0e:	1d1a      	adds	r2, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	9203      	str	r2, [sp, #12]
 8005e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e18:	9305      	str	r3, [sp, #20]
 8005e1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005ee4 <_vfiprintf_r+0x220>
 8005e1e:	2203      	movs	r2, #3
 8005e20:	4650      	mov	r0, sl
 8005e22:	7821      	ldrb	r1, [r4, #0]
 8005e24:	f7fe fc49 	bl	80046ba <memchr>
 8005e28:	b138      	cbz	r0, 8005e3a <_vfiprintf_r+0x176>
 8005e2a:	2240      	movs	r2, #64	@ 0x40
 8005e2c:	9b04      	ldr	r3, [sp, #16]
 8005e2e:	eba0 000a 	sub.w	r0, r0, sl
 8005e32:	4082      	lsls	r2, r0
 8005e34:	4313      	orrs	r3, r2
 8005e36:	3401      	adds	r4, #1
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e3e:	2206      	movs	r2, #6
 8005e40:	4829      	ldr	r0, [pc, #164]	@ (8005ee8 <_vfiprintf_r+0x224>)
 8005e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e46:	f7fe fc38 	bl	80046ba <memchr>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d03f      	beq.n	8005ece <_vfiprintf_r+0x20a>
 8005e4e:	4b27      	ldr	r3, [pc, #156]	@ (8005eec <_vfiprintf_r+0x228>)
 8005e50:	bb1b      	cbnz	r3, 8005e9a <_vfiprintf_r+0x1d6>
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	3307      	adds	r3, #7
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	9303      	str	r3, [sp, #12]
 8005e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e60:	443b      	add	r3, r7
 8005e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e64:	e76a      	b.n	8005d3c <_vfiprintf_r+0x78>
 8005e66:	460c      	mov	r4, r1
 8005e68:	2001      	movs	r0, #1
 8005e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e6e:	e7a8      	b.n	8005dc2 <_vfiprintf_r+0xfe>
 8005e70:	2300      	movs	r3, #0
 8005e72:	f04f 0c0a 	mov.w	ip, #10
 8005e76:	4619      	mov	r1, r3
 8005e78:	3401      	adds	r4, #1
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e82:	3a30      	subs	r2, #48	@ 0x30
 8005e84:	2a09      	cmp	r2, #9
 8005e86:	d903      	bls.n	8005e90 <_vfiprintf_r+0x1cc>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0c6      	beq.n	8005e1a <_vfiprintf_r+0x156>
 8005e8c:	9105      	str	r1, [sp, #20]
 8005e8e:	e7c4      	b.n	8005e1a <_vfiprintf_r+0x156>
 8005e90:	4604      	mov	r4, r0
 8005e92:	2301      	movs	r3, #1
 8005e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e98:	e7f0      	b.n	8005e7c <_vfiprintf_r+0x1b8>
 8005e9a:	ab03      	add	r3, sp, #12
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	462a      	mov	r2, r5
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	4b13      	ldr	r3, [pc, #76]	@ (8005ef0 <_vfiprintf_r+0x22c>)
 8005ea4:	a904      	add	r1, sp, #16
 8005ea6:	f7fd feb3 	bl	8003c10 <_printf_float>
 8005eaa:	4607      	mov	r7, r0
 8005eac:	1c78      	adds	r0, r7, #1
 8005eae:	d1d6      	bne.n	8005e5e <_vfiprintf_r+0x19a>
 8005eb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eb2:	07d9      	lsls	r1, r3, #31
 8005eb4:	d405      	bmi.n	8005ec2 <_vfiprintf_r+0x1fe>
 8005eb6:	89ab      	ldrh	r3, [r5, #12]
 8005eb8:	059a      	lsls	r2, r3, #22
 8005eba:	d402      	bmi.n	8005ec2 <_vfiprintf_r+0x1fe>
 8005ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ebe:	f7fe fbfb 	bl	80046b8 <__retarget_lock_release_recursive>
 8005ec2:	89ab      	ldrh	r3, [r5, #12]
 8005ec4:	065b      	lsls	r3, r3, #25
 8005ec6:	f53f af1f 	bmi.w	8005d08 <_vfiprintf_r+0x44>
 8005eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ecc:	e71e      	b.n	8005d0c <_vfiprintf_r+0x48>
 8005ece:	ab03      	add	r3, sp, #12
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	462a      	mov	r2, r5
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	4b06      	ldr	r3, [pc, #24]	@ (8005ef0 <_vfiprintf_r+0x22c>)
 8005ed8:	a904      	add	r1, sp, #16
 8005eda:	f7fe f937 	bl	800414c <_printf_i>
 8005ede:	e7e4      	b.n	8005eaa <_vfiprintf_r+0x1e6>
 8005ee0:	08006680 	.word	0x08006680
 8005ee4:	08006686 	.word	0x08006686
 8005ee8:	0800668a 	.word	0x0800668a
 8005eec:	08003c11 	.word	0x08003c11
 8005ef0:	08005c9f 	.word	0x08005c9f

08005ef4 <__sflush_r>:
 8005ef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	0716      	lsls	r6, r2, #28
 8005efc:	4605      	mov	r5, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	d454      	bmi.n	8005fac <__sflush_r+0xb8>
 8005f02:	684b      	ldr	r3, [r1, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	dc02      	bgt.n	8005f0e <__sflush_r+0x1a>
 8005f08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dd48      	ble.n	8005fa0 <__sflush_r+0xac>
 8005f0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f10:	2e00      	cmp	r6, #0
 8005f12:	d045      	beq.n	8005fa0 <__sflush_r+0xac>
 8005f14:	2300      	movs	r3, #0
 8005f16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f1a:	682f      	ldr	r7, [r5, #0]
 8005f1c:	6a21      	ldr	r1, [r4, #32]
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	d030      	beq.n	8005f84 <__sflush_r+0x90>
 8005f22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	0759      	lsls	r1, r3, #29
 8005f28:	d505      	bpl.n	8005f36 <__sflush_r+0x42>
 8005f2a:	6863      	ldr	r3, [r4, #4]
 8005f2c:	1ad2      	subs	r2, r2, r3
 8005f2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f30:	b10b      	cbz	r3, 8005f36 <__sflush_r+0x42>
 8005f32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f34:	1ad2      	subs	r2, r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	4628      	mov	r0, r5
 8005f3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f3c:	6a21      	ldr	r1, [r4, #32]
 8005f3e:	47b0      	blx	r6
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	d106      	bne.n	8005f54 <__sflush_r+0x60>
 8005f46:	6829      	ldr	r1, [r5, #0]
 8005f48:	291d      	cmp	r1, #29
 8005f4a:	d82b      	bhi.n	8005fa4 <__sflush_r+0xb0>
 8005f4c:	4a28      	ldr	r2, [pc, #160]	@ (8005ff0 <__sflush_r+0xfc>)
 8005f4e:	410a      	asrs	r2, r1
 8005f50:	07d6      	lsls	r6, r2, #31
 8005f52:	d427      	bmi.n	8005fa4 <__sflush_r+0xb0>
 8005f54:	2200      	movs	r2, #0
 8005f56:	6062      	str	r2, [r4, #4]
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	04d9      	lsls	r1, r3, #19
 8005f5c:	6022      	str	r2, [r4, #0]
 8005f5e:	d504      	bpl.n	8005f6a <__sflush_r+0x76>
 8005f60:	1c42      	adds	r2, r0, #1
 8005f62:	d101      	bne.n	8005f68 <__sflush_r+0x74>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b903      	cbnz	r3, 8005f6a <__sflush_r+0x76>
 8005f68:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f6c:	602f      	str	r7, [r5, #0]
 8005f6e:	b1b9      	cbz	r1, 8005fa0 <__sflush_r+0xac>
 8005f70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f74:	4299      	cmp	r1, r3
 8005f76:	d002      	beq.n	8005f7e <__sflush_r+0x8a>
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f7ff f9fd 	bl	8005378 <_free_r>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f82:	e00d      	b.n	8005fa0 <__sflush_r+0xac>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b0      	blx	r6
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	1c50      	adds	r0, r2, #1
 8005f8e:	d1c9      	bne.n	8005f24 <__sflush_r+0x30>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0c6      	beq.n	8005f24 <__sflush_r+0x30>
 8005f96:	2b1d      	cmp	r3, #29
 8005f98:	d001      	beq.n	8005f9e <__sflush_r+0xaa>
 8005f9a:	2b16      	cmp	r3, #22
 8005f9c:	d11d      	bne.n	8005fda <__sflush_r+0xe6>
 8005f9e:	602f      	str	r7, [r5, #0]
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e021      	b.n	8005fe8 <__sflush_r+0xf4>
 8005fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	e01a      	b.n	8005fe2 <__sflush_r+0xee>
 8005fac:	690f      	ldr	r7, [r1, #16]
 8005fae:	2f00      	cmp	r7, #0
 8005fb0:	d0f6      	beq.n	8005fa0 <__sflush_r+0xac>
 8005fb2:	0793      	lsls	r3, r2, #30
 8005fb4:	bf18      	it	ne
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	680e      	ldr	r6, [r1, #0]
 8005fba:	bf08      	it	eq
 8005fbc:	694b      	ldreq	r3, [r1, #20]
 8005fbe:	1bf6      	subs	r6, r6, r7
 8005fc0:	600f      	str	r7, [r1, #0]
 8005fc2:	608b      	str	r3, [r1, #8]
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	ddeb      	ble.n	8005fa0 <__sflush_r+0xac>
 8005fc8:	4633      	mov	r3, r6
 8005fca:	463a      	mov	r2, r7
 8005fcc:	4628      	mov	r0, r5
 8005fce:	6a21      	ldr	r1, [r4, #32]
 8005fd0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005fd4:	47e0      	blx	ip
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	dc07      	bgt.n	8005fea <__sflush_r+0xf6>
 8005fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fea:	4407      	add	r7, r0
 8005fec:	1a36      	subs	r6, r6, r0
 8005fee:	e7e9      	b.n	8005fc4 <__sflush_r+0xd0>
 8005ff0:	dfbffffe 	.word	0xdfbffffe

08005ff4 <_fflush_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	690b      	ldr	r3, [r1, #16]
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	b913      	cbnz	r3, 8006004 <_fflush_r+0x10>
 8005ffe:	2500      	movs	r5, #0
 8006000:	4628      	mov	r0, r5
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	b118      	cbz	r0, 800600e <_fflush_r+0x1a>
 8006006:	6a03      	ldr	r3, [r0, #32]
 8006008:	b90b      	cbnz	r3, 800600e <_fflush_r+0x1a>
 800600a:	f7fe fa4b 	bl	80044a4 <__sinit>
 800600e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0f3      	beq.n	8005ffe <_fflush_r+0xa>
 8006016:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006018:	07d0      	lsls	r0, r2, #31
 800601a:	d404      	bmi.n	8006026 <_fflush_r+0x32>
 800601c:	0599      	lsls	r1, r3, #22
 800601e:	d402      	bmi.n	8006026 <_fflush_r+0x32>
 8006020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006022:	f7fe fb48 	bl	80046b6 <__retarget_lock_acquire_recursive>
 8006026:	4628      	mov	r0, r5
 8006028:	4621      	mov	r1, r4
 800602a:	f7ff ff63 	bl	8005ef4 <__sflush_r>
 800602e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006030:	4605      	mov	r5, r0
 8006032:	07da      	lsls	r2, r3, #31
 8006034:	d4e4      	bmi.n	8006000 <_fflush_r+0xc>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	059b      	lsls	r3, r3, #22
 800603a:	d4e1      	bmi.n	8006000 <_fflush_r+0xc>
 800603c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800603e:	f7fe fb3b 	bl	80046b8 <__retarget_lock_release_recursive>
 8006042:	e7dd      	b.n	8006000 <_fflush_r+0xc>

08006044 <__swbuf_r>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	460e      	mov	r6, r1
 8006048:	4614      	mov	r4, r2
 800604a:	4605      	mov	r5, r0
 800604c:	b118      	cbz	r0, 8006056 <__swbuf_r+0x12>
 800604e:	6a03      	ldr	r3, [r0, #32]
 8006050:	b90b      	cbnz	r3, 8006056 <__swbuf_r+0x12>
 8006052:	f7fe fa27 	bl	80044a4 <__sinit>
 8006056:	69a3      	ldr	r3, [r4, #24]
 8006058:	60a3      	str	r3, [r4, #8]
 800605a:	89a3      	ldrh	r3, [r4, #12]
 800605c:	071a      	lsls	r2, r3, #28
 800605e:	d501      	bpl.n	8006064 <__swbuf_r+0x20>
 8006060:	6923      	ldr	r3, [r4, #16]
 8006062:	b943      	cbnz	r3, 8006076 <__swbuf_r+0x32>
 8006064:	4621      	mov	r1, r4
 8006066:	4628      	mov	r0, r5
 8006068:	f000 f82a 	bl	80060c0 <__swsetup_r>
 800606c:	b118      	cbz	r0, 8006076 <__swbuf_r+0x32>
 800606e:	f04f 37ff 	mov.w	r7, #4294967295
 8006072:	4638      	mov	r0, r7
 8006074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	6922      	ldr	r2, [r4, #16]
 800607a:	b2f6      	uxtb	r6, r6
 800607c:	1a98      	subs	r0, r3, r2
 800607e:	6963      	ldr	r3, [r4, #20]
 8006080:	4637      	mov	r7, r6
 8006082:	4283      	cmp	r3, r0
 8006084:	dc05      	bgt.n	8006092 <__swbuf_r+0x4e>
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f7ff ffb3 	bl	8005ff4 <_fflush_r>
 800608e:	2800      	cmp	r0, #0
 8006090:	d1ed      	bne.n	800606e <__swbuf_r+0x2a>
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	3b01      	subs	r3, #1
 8006096:	60a3      	str	r3, [r4, #8]
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	6022      	str	r2, [r4, #0]
 800609e:	701e      	strb	r6, [r3, #0]
 80060a0:	6962      	ldr	r2, [r4, #20]
 80060a2:	1c43      	adds	r3, r0, #1
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d004      	beq.n	80060b2 <__swbuf_r+0x6e>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	07db      	lsls	r3, r3, #31
 80060ac:	d5e1      	bpl.n	8006072 <__swbuf_r+0x2e>
 80060ae:	2e0a      	cmp	r6, #10
 80060b0:	d1df      	bne.n	8006072 <__swbuf_r+0x2e>
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f7ff ff9d 	bl	8005ff4 <_fflush_r>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d0d9      	beq.n	8006072 <__swbuf_r+0x2e>
 80060be:	e7d6      	b.n	800606e <__swbuf_r+0x2a>

080060c0 <__swsetup_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4b29      	ldr	r3, [pc, #164]	@ (8006168 <__swsetup_r+0xa8>)
 80060c4:	4605      	mov	r5, r0
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	460c      	mov	r4, r1
 80060ca:	b118      	cbz	r0, 80060d4 <__swsetup_r+0x14>
 80060cc:	6a03      	ldr	r3, [r0, #32]
 80060ce:	b90b      	cbnz	r3, 80060d4 <__swsetup_r+0x14>
 80060d0:	f7fe f9e8 	bl	80044a4 <__sinit>
 80060d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d8:	0719      	lsls	r1, r3, #28
 80060da:	d422      	bmi.n	8006122 <__swsetup_r+0x62>
 80060dc:	06da      	lsls	r2, r3, #27
 80060de:	d407      	bmi.n	80060f0 <__swsetup_r+0x30>
 80060e0:	2209      	movs	r2, #9
 80060e2:	602a      	str	r2, [r5, #0]
 80060e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	e033      	b.n	8006158 <__swsetup_r+0x98>
 80060f0:	0758      	lsls	r0, r3, #29
 80060f2:	d512      	bpl.n	800611a <__swsetup_r+0x5a>
 80060f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060f6:	b141      	cbz	r1, 800610a <__swsetup_r+0x4a>
 80060f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060fc:	4299      	cmp	r1, r3
 80060fe:	d002      	beq.n	8006106 <__swsetup_r+0x46>
 8006100:	4628      	mov	r0, r5
 8006102:	f7ff f939 	bl	8005378 <_free_r>
 8006106:	2300      	movs	r3, #0
 8006108:	6363      	str	r3, [r4, #52]	@ 0x34
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	2300      	movs	r3, #0
 8006114:	6063      	str	r3, [r4, #4]
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	f043 0308 	orr.w	r3, r3, #8
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	b94b      	cbnz	r3, 800613a <__swsetup_r+0x7a>
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800612c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006130:	d003      	beq.n	800613a <__swsetup_r+0x7a>
 8006132:	4621      	mov	r1, r4
 8006134:	4628      	mov	r0, r5
 8006136:	f000 f8c0 	bl	80062ba <__smakebuf_r>
 800613a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800613e:	f013 0201 	ands.w	r2, r3, #1
 8006142:	d00a      	beq.n	800615a <__swsetup_r+0x9a>
 8006144:	2200      	movs	r2, #0
 8006146:	60a2      	str	r2, [r4, #8]
 8006148:	6962      	ldr	r2, [r4, #20]
 800614a:	4252      	negs	r2, r2
 800614c:	61a2      	str	r2, [r4, #24]
 800614e:	6922      	ldr	r2, [r4, #16]
 8006150:	b942      	cbnz	r2, 8006164 <__swsetup_r+0xa4>
 8006152:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006156:	d1c5      	bne.n	80060e4 <__swsetup_r+0x24>
 8006158:	bd38      	pop	{r3, r4, r5, pc}
 800615a:	0799      	lsls	r1, r3, #30
 800615c:	bf58      	it	pl
 800615e:	6962      	ldrpl	r2, [r4, #20]
 8006160:	60a2      	str	r2, [r4, #8]
 8006162:	e7f4      	b.n	800614e <__swsetup_r+0x8e>
 8006164:	2000      	movs	r0, #0
 8006166:	e7f7      	b.n	8006158 <__swsetup_r+0x98>
 8006168:	20000018 	.word	0x20000018

0800616c <_sbrk_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	2300      	movs	r3, #0
 8006170:	4d05      	ldr	r5, [pc, #20]	@ (8006188 <_sbrk_r+0x1c>)
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	f7fa fe84 	bl	8000e84 <_sbrk>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_sbrk_r+0x1a>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_sbrk_r+0x1a>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	200003c8 	.word	0x200003c8

0800618c <memcpy>:
 800618c:	440a      	add	r2, r1
 800618e:	4291      	cmp	r1, r2
 8006190:	f100 33ff 	add.w	r3, r0, #4294967295
 8006194:	d100      	bne.n	8006198 <memcpy+0xc>
 8006196:	4770      	bx	lr
 8006198:	b510      	push	{r4, lr}
 800619a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619e:	4291      	cmp	r1, r2
 80061a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a4:	d1f9      	bne.n	800619a <memcpy+0xe>
 80061a6:	bd10      	pop	{r4, pc}

080061a8 <__assert_func>:
 80061a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061aa:	4614      	mov	r4, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <__assert_func+0x2c>)
 80061b0:	4605      	mov	r5, r0
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68d8      	ldr	r0, [r3, #12]
 80061b6:	b954      	cbnz	r4, 80061ce <__assert_func+0x26>
 80061b8:	4b07      	ldr	r3, [pc, #28]	@ (80061d8 <__assert_func+0x30>)
 80061ba:	461c      	mov	r4, r3
 80061bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061c0:	9100      	str	r1, [sp, #0]
 80061c2:	462b      	mov	r3, r5
 80061c4:	4905      	ldr	r1, [pc, #20]	@ (80061dc <__assert_func+0x34>)
 80061c6:	f000 f841 	bl	800624c <fiprintf>
 80061ca:	f000 f8d5 	bl	8006378 <abort>
 80061ce:	4b04      	ldr	r3, [pc, #16]	@ (80061e0 <__assert_func+0x38>)
 80061d0:	e7f4      	b.n	80061bc <__assert_func+0x14>
 80061d2:	bf00      	nop
 80061d4:	20000018 	.word	0x20000018
 80061d8:	080066d6 	.word	0x080066d6
 80061dc:	080066a8 	.word	0x080066a8
 80061e0:	0800669b 	.word	0x0800669b

080061e4 <_calloc_r>:
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	fba1 5402 	umull	r5, r4, r1, r2
 80061ea:	b93c      	cbnz	r4, 80061fc <_calloc_r+0x18>
 80061ec:	4629      	mov	r1, r5
 80061ee:	f7ff f935 	bl	800545c <_malloc_r>
 80061f2:	4606      	mov	r6, r0
 80061f4:	b928      	cbnz	r0, 8006202 <_calloc_r+0x1e>
 80061f6:	2600      	movs	r6, #0
 80061f8:	4630      	mov	r0, r6
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	220c      	movs	r2, #12
 80061fe:	6002      	str	r2, [r0, #0]
 8006200:	e7f9      	b.n	80061f6 <_calloc_r+0x12>
 8006202:	462a      	mov	r2, r5
 8006204:	4621      	mov	r1, r4
 8006206:	f7fe f9d8 	bl	80045ba <memset>
 800620a:	e7f5      	b.n	80061f8 <_calloc_r+0x14>

0800620c <__ascii_mbtowc>:
 800620c:	b082      	sub	sp, #8
 800620e:	b901      	cbnz	r1, 8006212 <__ascii_mbtowc+0x6>
 8006210:	a901      	add	r1, sp, #4
 8006212:	b142      	cbz	r2, 8006226 <__ascii_mbtowc+0x1a>
 8006214:	b14b      	cbz	r3, 800622a <__ascii_mbtowc+0x1e>
 8006216:	7813      	ldrb	r3, [r2, #0]
 8006218:	600b      	str	r3, [r1, #0]
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	1e10      	subs	r0, r2, #0
 800621e:	bf18      	it	ne
 8006220:	2001      	movne	r0, #1
 8006222:	b002      	add	sp, #8
 8006224:	4770      	bx	lr
 8006226:	4610      	mov	r0, r2
 8006228:	e7fb      	b.n	8006222 <__ascii_mbtowc+0x16>
 800622a:	f06f 0001 	mvn.w	r0, #1
 800622e:	e7f8      	b.n	8006222 <__ascii_mbtowc+0x16>

08006230 <__ascii_wctomb>:
 8006230:	4603      	mov	r3, r0
 8006232:	4608      	mov	r0, r1
 8006234:	b141      	cbz	r1, 8006248 <__ascii_wctomb+0x18>
 8006236:	2aff      	cmp	r2, #255	@ 0xff
 8006238:	d904      	bls.n	8006244 <__ascii_wctomb+0x14>
 800623a:	228a      	movs	r2, #138	@ 0x8a
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	4770      	bx	lr
 8006244:	2001      	movs	r0, #1
 8006246:	700a      	strb	r2, [r1, #0]
 8006248:	4770      	bx	lr
	...

0800624c <fiprintf>:
 800624c:	b40e      	push	{r1, r2, r3}
 800624e:	b503      	push	{r0, r1, lr}
 8006250:	4601      	mov	r1, r0
 8006252:	ab03      	add	r3, sp, #12
 8006254:	4805      	ldr	r0, [pc, #20]	@ (800626c <fiprintf+0x20>)
 8006256:	f853 2b04 	ldr.w	r2, [r3], #4
 800625a:	6800      	ldr	r0, [r0, #0]
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	f7ff fd31 	bl	8005cc4 <_vfiprintf_r>
 8006262:	b002      	add	sp, #8
 8006264:	f85d eb04 	ldr.w	lr, [sp], #4
 8006268:	b003      	add	sp, #12
 800626a:	4770      	bx	lr
 800626c:	20000018 	.word	0x20000018

08006270 <__swhatbuf_r>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	460c      	mov	r4, r1
 8006274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006278:	4615      	mov	r5, r2
 800627a:	2900      	cmp	r1, #0
 800627c:	461e      	mov	r6, r3
 800627e:	b096      	sub	sp, #88	@ 0x58
 8006280:	da0c      	bge.n	800629c <__swhatbuf_r+0x2c>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	2100      	movs	r1, #0
 8006286:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800628a:	bf14      	ite	ne
 800628c:	2340      	movne	r3, #64	@ 0x40
 800628e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006292:	2000      	movs	r0, #0
 8006294:	6031      	str	r1, [r6, #0]
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	b016      	add	sp, #88	@ 0x58
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	466a      	mov	r2, sp
 800629e:	f000 f849 	bl	8006334 <_fstat_r>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	dbed      	blt.n	8006282 <__swhatbuf_r+0x12>
 80062a6:	9901      	ldr	r1, [sp, #4]
 80062a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062b0:	4259      	negs	r1, r3
 80062b2:	4159      	adcs	r1, r3
 80062b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062b8:	e7eb      	b.n	8006292 <__swhatbuf_r+0x22>

080062ba <__smakebuf_r>:
 80062ba:	898b      	ldrh	r3, [r1, #12]
 80062bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062be:	079d      	lsls	r5, r3, #30
 80062c0:	4606      	mov	r6, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	d507      	bpl.n	80062d6 <__smakebuf_r+0x1c>
 80062c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	2301      	movs	r3, #1
 80062d0:	6163      	str	r3, [r4, #20]
 80062d2:	b003      	add	sp, #12
 80062d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d6:	466a      	mov	r2, sp
 80062d8:	ab01      	add	r3, sp, #4
 80062da:	f7ff ffc9 	bl	8006270 <__swhatbuf_r>
 80062de:	9f00      	ldr	r7, [sp, #0]
 80062e0:	4605      	mov	r5, r0
 80062e2:	4639      	mov	r1, r7
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff f8b9 	bl	800545c <_malloc_r>
 80062ea:	b948      	cbnz	r0, 8006300 <__smakebuf_r+0x46>
 80062ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062f0:	059a      	lsls	r2, r3, #22
 80062f2:	d4ee      	bmi.n	80062d2 <__smakebuf_r+0x18>
 80062f4:	f023 0303 	bic.w	r3, r3, #3
 80062f8:	f043 0302 	orr.w	r3, r3, #2
 80062fc:	81a3      	strh	r3, [r4, #12]
 80062fe:	e7e2      	b.n	80062c6 <__smakebuf_r+0xc>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	9b01      	ldr	r3, [sp, #4]
 800630e:	6020      	str	r0, [r4, #0]
 8006310:	b15b      	cbz	r3, 800632a <__smakebuf_r+0x70>
 8006312:	4630      	mov	r0, r6
 8006314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006318:	f000 f81e 	bl	8006358 <_isatty_r>
 800631c:	b128      	cbz	r0, 800632a <__smakebuf_r+0x70>
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	f023 0303 	bic.w	r3, r3, #3
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	81a3      	strh	r3, [r4, #12]
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	431d      	orrs	r5, r3
 800632e:	81a5      	strh	r5, [r4, #12]
 8006330:	e7cf      	b.n	80062d2 <__smakebuf_r+0x18>
	...

08006334 <_fstat_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	2300      	movs	r3, #0
 8006338:	4d06      	ldr	r5, [pc, #24]	@ (8006354 <_fstat_r+0x20>)
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	f7fa fd79 	bl	8000e38 <_fstat>
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	d102      	bne.n	8006350 <_fstat_r+0x1c>
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	b103      	cbz	r3, 8006350 <_fstat_r+0x1c>
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	bd38      	pop	{r3, r4, r5, pc}
 8006352:	bf00      	nop
 8006354:	200003c8 	.word	0x200003c8

08006358 <_isatty_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	2300      	movs	r3, #0
 800635c:	4d05      	ldr	r5, [pc, #20]	@ (8006374 <_isatty_r+0x1c>)
 800635e:	4604      	mov	r4, r0
 8006360:	4608      	mov	r0, r1
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	f7fa fd77 	bl	8000e56 <_isatty>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_isatty_r+0x1a>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_isatty_r+0x1a>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	200003c8 	.word	0x200003c8

08006378 <abort>:
 8006378:	2006      	movs	r0, #6
 800637a:	b508      	push	{r3, lr}
 800637c:	f000 f82c 	bl	80063d8 <raise>
 8006380:	2001      	movs	r0, #1
 8006382:	f7fa fd0a 	bl	8000d9a <_exit>

08006386 <_raise_r>:
 8006386:	291f      	cmp	r1, #31
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4605      	mov	r5, r0
 800638c:	460c      	mov	r4, r1
 800638e:	d904      	bls.n	800639a <_raise_r+0x14>
 8006390:	2316      	movs	r3, #22
 8006392:	6003      	str	r3, [r0, #0]
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	bd38      	pop	{r3, r4, r5, pc}
 800639a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800639c:	b112      	cbz	r2, 80063a4 <_raise_r+0x1e>
 800639e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063a2:	b94b      	cbnz	r3, 80063b8 <_raise_r+0x32>
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 f831 	bl	800640c <_getpid_r>
 80063aa:	4622      	mov	r2, r4
 80063ac:	4601      	mov	r1, r0
 80063ae:	4628      	mov	r0, r5
 80063b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063b4:	f000 b818 	b.w	80063e8 <_kill_r>
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d00a      	beq.n	80063d2 <_raise_r+0x4c>
 80063bc:	1c59      	adds	r1, r3, #1
 80063be:	d103      	bne.n	80063c8 <_raise_r+0x42>
 80063c0:	2316      	movs	r3, #22
 80063c2:	6003      	str	r3, [r0, #0]
 80063c4:	2001      	movs	r0, #1
 80063c6:	e7e7      	b.n	8006398 <_raise_r+0x12>
 80063c8:	2100      	movs	r1, #0
 80063ca:	4620      	mov	r0, r4
 80063cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80063d0:	4798      	blx	r3
 80063d2:	2000      	movs	r0, #0
 80063d4:	e7e0      	b.n	8006398 <_raise_r+0x12>
	...

080063d8 <raise>:
 80063d8:	4b02      	ldr	r3, [pc, #8]	@ (80063e4 <raise+0xc>)
 80063da:	4601      	mov	r1, r0
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	f7ff bfd2 	b.w	8006386 <_raise_r>
 80063e2:	bf00      	nop
 80063e4:	20000018 	.word	0x20000018

080063e8 <_kill_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	2300      	movs	r3, #0
 80063ec:	4d06      	ldr	r5, [pc, #24]	@ (8006408 <_kill_r+0x20>)
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f7fa fcc0 	bl	8000d7a <_kill>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d102      	bne.n	8006404 <_kill_r+0x1c>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	b103      	cbz	r3, 8006404 <_kill_r+0x1c>
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	200003c8 	.word	0x200003c8

0800640c <_getpid_r>:
 800640c:	f7fa bcae 	b.w	8000d6c <_getpid>

08006410 <_init>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr

0800641c <_fini>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr
